{
	"info": {
		"_postman_id": "f711f9c3-5524-465f-af60-430ee1c15a24",
		"name": "SMART_API.v1",
		"description": " SWAGGER: https://docs.docu.se/api/smart/api.yaml",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth client",
			"item": [
				{
					"name": "secret auth with error: Invalid Credentials - wrong secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const clientId = pm.variables.get(\"client_id\")",
									"const clientSecret = pm.variables.get(\"client_secret\")",
									"",
									"pm.test(\"Check variables\", function () {",
									"    console.log(\"clientId: \" + clientId.substring(0, 4) + \"..\" + clientId.substring(32))",
									"    console.log(\"clientSecret: \" + clientSecret.substring(0, 4) + \"..\" + clientSecret.substring(32))",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication with error: 501 - Error during authentication\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).equals(501);",
									"    pm.expect(jsonData.error.message).to.be.string;",
									"    pm.expect(jsonData.error.data).to.be.is;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_secret}}\",\n    \"client_secret\": \"b5d76c79-5e88-4578-910f-62112aa87\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl_api}}/v1/auth",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "secret auth with error: Invalid Credentials - wrong client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Authentication with error: 501 - Error during authentication\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.code).equals(501);",
									"    pm.expect(jsonData.error.message).to.be.string;",
									"    pm.expect(jsonData.error.data).to.be.is;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"b5d76c79-5e88-4578-910f-62568112aa87\",\n    \"client_secret\": \"{{client_secret}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl_api}}/v1/auth",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"No authentication\", function () {",
									"    pm.expect(jsonData.error.code).equals(501);",
									"    pm.expect(jsonData.error.message).equals(\"Token validation failed\");",
									"    pm.expect(jsonData.error.data).to.be.is;",
									"});",
									"",
									"// Skip auth with secret",
									"if (pm.environment.get(\"auth_type\") === \"email\") {",
									"    postman.setNextRequest(\"email auth with error: Invalid username\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl_api}}/v1/countries",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "secret auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Authentication with a token\", function () {",
									"    pm.expect(jsonData.result.opid).to.be.string;",
									"    pm.expect(jsonData.result.opid).has.length(36)",
									"});",
									"",
									"pm.collectionVariables.set(\"token\", jsonData.result.opid);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"client_id\": \"{{client_id}}\",\n    \"client_secret\": \"{{client_secret}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl_api}}/v1/auth",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Misc",
			"item": [
				{
					"name": "countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var country_ids = new Array();",
									"var country_names = new Array();",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All countries was got (6)\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(6);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(6);",
									"});",
									"",
									"pm.test(\"Test /countries response schema\", function () {",
									"",
									"    jsonData.result.data.forEach((country) => {",
									"        utils.schemaValidator(country, schemas.Item, `country[id:${country.id}]`)",
									"        country_ids.push(country.id);",
									"        country_names.push(country.name)",
									"    })",
									"",
									"})",
									"",
									"pm.collectionVariables.set(\"country_ids\", country_ids);",
									"pm.collectionVariables.set(\"country_names\", country_names);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/countries?offset=0&limit=100",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"countries"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "countries (filter all countries)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var country_ids = pm.collectionVariables.get(\"country_ids\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by id (all countries)\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(country_ids.length);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(country_ids.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/countries?offset=0&limit=100&filter=id:in:[1,2,3,4,63,202]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"countries"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "filter",
									"value": "id:in:[1,2,3,4,63,202]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = new Array();",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"All regions was got (79)\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(79);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(79);",
									"});",
									"",
									"pm.test(\"Test /regions response schema\", function () {",
									"",
									"    jsonData.result.data.forEach((region) => {",
									"        utils.schemaValidator(region, schemas.Region, `region[id:${region.id}]`)",
									"        region_ids.push(region.id);",
									"    })",
									"",
									"})",
									"",
									"pm.collectionVariables.set(\"region_ids\", region_ids);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter all countries  = no filters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = pm.collectionVariables.get(\"region_ids\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by country_id (all countries is the same as no filter)\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(region_ids.length);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(region_ids.length);",
									"    pm.expect(jsonData.result.data.length, \"data.length\").to.be.eq(region_ids.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=country_id:in:[{{country_ids}}]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "country_id:in:[{{country_ids}}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter by Swiden #1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = pm.collectionVariables.get(\"region_ids\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by country_id #1 Swiden\", function () {",
									"    pm.expect(jsonData.result.data",
									"    .map(({country_id}) => country_id)",
									"    .every( (val, i, arr) => val === 1 ), \"each country_id is #1 (Swiden)\").to.be.true;",
									"",
									"    pm.expect(jsonData.result.data.length, \"Number regions for Swiden is 21\").eq(21);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=country_id:in:[1]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "country_id:in:[1]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter by Denmark #2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = pm.collectionVariables.get(\"region_ids\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by country_id #2 Denmark\", function () {",
									"    pm.expect(jsonData.result.data",
									"    .map(({country_id}) => country_id)",
									"    .every( (val, i, arr) => val === 2 ), \"each country_id is #1 (Denmark)\").to.be.true;",
									"",
									"    pm.expect(jsonData.result.data.length, \"Number regions for Denmark\").eq(5);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=country_id:in:[2]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "country_id:in:[2]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter by Finland #3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = pm.collectionVariables.get(\"region_ids\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by country_id #3 Finland\", function () {",
									"    pm.expect(jsonData.result.data",
									"    .map(({country_id}) => country_id)",
									"    .every( (val, i, arr) => val === 3 ), \"each country_id is #3 (Finland)\").to.be.true;",
									"",
									"    pm.expect(jsonData.result.data.length, \"Number regions for Swiden\").eq(19);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=country_id:in:[3]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "country_id:in:[3]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter by Norway #4)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var region_ids = pm.collectionVariables.get(\"region_ids\");",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by country_id #4 — Norway\", function () {",
									"    pm.expect(jsonData.result.data",
									"    .map(({country_id}) => country_id)",
									"    .every( (val, i, arr) => val === 4 ), \"each country_id is #3 (Norway)\").to.be.true;",
									"",
									"    pm.expect(jsonData.result.data.length, \"Number regions for Norway\").eq(12);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=country_id:in:[4]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "country_id:in:[4]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "regions (filter regions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter by id (one region)\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(1);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(1);",
									"    pm.expect(jsonData.result.data[0].id, \"id\").to.be.eq(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/regions?offset=0&limit=300&filter=id:in:[1]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"regions"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								},
								{
									"key": "filter",
									"value": "id:in:[1]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "districts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test /districts response schema\", function () {",
									"",
									"    jsonData.result.data.forEach((district) => {",
									"        utils.schemaValidator(district, schemas.District, `district[id:${district.id}]`)",
									"    })",
									"",
									"})",
									"",
									"pm.collectionVariables.set(\"districts_num\", jsonData.result.meta.total);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/districts?offset=300&limit=10000",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"districts"
							],
							"query": [
								{
									"key": "offset",
									"value": "300"
								},
								{
									"key": "limit",
									"value": "10000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "districts  (filter all countries  = no filters)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var districts_num = pm.collectionVariables.get(\"districts_num\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter all countries\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(300);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(districts_num);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/districts?offset=0&limit=10000&filter=country_id:in:[{{country_ids}}]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"districts"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10000"
								},
								{
									"key": "filter",
									"value": "country_id:in:[{{country_ids}}]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "districts  (filter by regions)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter region #1\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(10);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(10);",
									"    pm.expect(jsonData.result.data.length, \"data.length\").to.be.eq(10);",
									"    pm.expect(jsonData.result.data",
									"    .map(({region_id}) => region_id)",
									"    .every( (val, i, arr) => val === 1 ), \"each region_id === 1\").to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/districts?offset=0&limit=10000&filter=region_id:in:[1]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"districts"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10000"
								},
								{
									"key": "filter",
									"value": "region_id:in:[1]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "districts  (filter by id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Filter region #1\", function () {",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.be.eq(1);",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.be.eq(1);",
									"    pm.expect(jsonData.result.data[0].id, \"id\").to.be.eq(1289);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/districts?offset=0&limit=10000&filter=id:in:[1289]",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"districts"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10000"
								},
								{
									"key": "filter",
									"value": "id:in:[1289]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "lookups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Test /lookups response schema\", function () {",
									"",
									"    utils.schemaValidator(jsonData.result.dict, schemas.Lookups, `lookups[section:${jsonData.result.section}]`)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/lookups",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"lookups"
							]
						}
					},
					"response": []
				},
				{
					"name": "client/company_folders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"const company_folders = new Array();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test /client/company_folders response schema\", function () {",
									"",
									"    jsonData.result.data.forEach((folder) => {",
									"        utils.schemaValidator(folder, schemas.Item, `folder[id:${folder.id}]`)",
									"        company_folders.push(folder.id)",
									"    })",
									"",
									"});",
									"",
									"pm.collectionVariables.set(\"company_folders\", company_folders);",
									"pm.collectionVariables.set(\"company_folder\", company_folders[0]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/client/company_folders",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"client",
								"company_folders"
							]
						}
					},
					"response": []
				},
				{
					"name": "client/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const users = jsonData.result.data.map(user => user.id)",
									"",
									"pm.test(\"Test /client/users response schema\", function () {",
									"",
									"    pm.expect(jsonData.result.data, \"data is an array\").to.be.an('array');",
									"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
									"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
									"",
									"    jsonData.result.data.forEach((user) => {",
									"",
									"        utils.schemaValidator(user, schemas.User, `user[id:${user.id}]`)",
									"",
									"    });",
									"});",
									"",
									"// STG",
									"// Основная — 198",
									"// Дочерние: — 384, 563",
									"// PROD",
									"// Основная — 202",
									"// Дочерние: — 477, 708",
									"",
									"pm.collectionVariables.set(\"users\", users);",
									"if (users.includes(2361)) { // PROD",
									"    pm.collectionVariables.set(\"env\", \"PROD\");",
									"    pm.collectionVariables.set(\"user\", 2361);",
									"    pm.collectionVariables.set(\"account_id0\", 202);",
									"    pm.collectionVariables.set(\"account_id1\", 477);",
									"    pm.collectionVariables.set(\"account_id2\", 708);",
									"} else if (users.includes(2304)) { // STG",
									"    pm.collectionVariables.set(\"env\", \"STG\");",
									"    pm.collectionVariables.set(\"user\", 2304);",
									"    pm.collectionVariables.set(\"account_id0\", 198);",
									"    pm.collectionVariables.set(\"account_id1\", 384);",
									"    pm.collectionVariables.set(\"account_id2\", 563);",
									"} else {",
									"    pm.expect(false, \"Collection variable 'user' undefined for PROD or STG enviroment.\").to.be.true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{baseurl_api}}/v1/client/users?offset=0&limit=300",
							"protocol": "https",
							"host": [
								"{{baseurl_api}}"
							],
							"path": [
								"v1",
								"client",
								"users"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "300"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organization CRM",
			"item": [
				{
					"name": "Schemas",
					"item": [
						{
							"name": "client/projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema\", function () {",
											"",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    jsonData.result.data.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.SalesProject, `project[id:${project.id}]`)",
											"    })",
											"",
											"    // Store not null properties of the first such project to check filtering projects",
											"    jsonData.result.data.some((p) => {",
											"        if (p.delivered_at != null && p.updated_at != null && p.modified_at != null) {",
											"            pm.collectionVariables.set(\"project_modified_at\", p.modified_at);",
											"            pm.collectionVariables.set(\"project_updated_at\", p.updated_at);",
											"            pm.collectionVariables.set(\"project_delivered_at\", p.delivered_at);",
											"            // pm.collectionVariables.set(\"project_user_id\", p.user_id);",
											"            console.log(p.id);",
											"            console.log(p.user_id);",
											"            return true;",
											"        } ",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects account_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"    pm.expect(jsonData.result.meta.account_id, \"meta.account_id\").to.be.eq(pm.collectionVariables.get(\"account_id1\"));",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    projects.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.SalesProject, `project[id:${project.id}]`)",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&account_id={{account_id1}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "account_id",
											"value": "{{account_id1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects cards=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Cards response schema /client/projects&cards=1 (only cards)\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    projects.forEach((project) => {",
											"        project.roles.forEach((role) => {",
											"            utils.schemaValidator(role, schemas.RoleWithCards, `project[id:${project.id}].role[company_id:${role.company_id}]`)",
											"        })",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&cards=1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "cards",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const tenders = jsonData.result.data;",
											"",
											"    tenders.forEach((tender) => {",
											"        utils.schemaValidator(tender, schemas.SalesTender, `tender[id:${tender.id}]`)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders?offset=0&limit=400",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "400"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders cards=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const tenders = jsonData.result.data;",
											"",
											"    tenders.forEach((tender) => {",
											"        utils.schemaValidator(tender, schemas.SalesTenderWithCard, `tender[id:${tender.id}]`)",
											"    })",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders?offset=0&limit=400&cards=1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "400"
										},
										{
											"key": "cards",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    jsonData.result.data.forEach((company) => {",
											"        utils.schemaValidator(company, schemas.SalesCompany, `company[id:${company.id}]`)",
											"    })",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies?offset=0&limit=50",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies cards=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    jsonData.result.data.forEach((company) => {",
											"        utils.schemaValidator(company, schemas.SalesCompanyWithCards, `company[id:${company.id}]`)",
											"    })",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies?offset=0&limit=300&cards=1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "300"
										},
										{
											"key": "cards",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies account_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"    pm.expect(jsonData.result.meta.account_id, \"meta.account_id\").to.be.eq(pm.collectionVariables.get(\"account_id1\"));",
											"",
											"    jsonData.result.data.forEach((company) => {",
											"        utils.schemaValidator(company, schemas.SalesCompany, `company[id:${company.id}]`)",
											"    })",
											"",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies?offset=0&limit=5&account_id={{account_id1}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "account_id",
											"value": "{{account_id1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/contacts response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    jsonData.result.data.forEach((contact) => {",
											"        utils.schemaValidator(contact, schemas.SalesContact, `contact[id:${contact.id}]`)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts?offset=0&limit=16",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "16"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/contacts account_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/contacts response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"    pm.expect(jsonData.result.meta.account_id, \"meta.account_id\").to.be.eq(pm.collectionVariables.get(\"account_id1\"));",
											"",
											"    jsonData.result.data.forEach((contact) => {",
											"        utils.schemaValidator(contact, schemas.SalesContact, `contact[id:${contact.id}]`)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts?offset=0&limit=5&account_id={{account_id1}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "account_id",
											"value": "{{account_id1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/updates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"",
											"    jsonData.result.users.forEach((user) => {",
											"        utils.schemaValidator(user, schemas.UserUpdates, `user[id:${user.id}]`)",
											"    })",
											"})",
											"",
											"pm.test(\"Test /client/updates check amount by statuses (or folders for company)\", function () {",
											"",
											"    for(var i=0; i<jsonData.result.users.length; i++) with (jsonData.result.users[i]) {",
											"",
											"        if (data.projects.updates > 0) { ",
											"            pm.expect(data.projects.by_status, \"data.projects.by_status\").to.be.an('array');",
											"            var pu = 0;",
											"            for(var j=0; j<data.projects.by_status.length; j++) with (data.projects.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_project_status_id, \"user_project_status_id\").to.be.a('number');",
											"                pu += updates;",
											"            }",
											"            pm.expect(data.projects.updates, \"data.projects.updates\").to.be.eq(pu);",
											"        }",
											"",
											"        if (data.tenders.updates > 0) { ",
											"            pm.expect(data.tenders.by_status, \"data.tenders.by_status\").to.be.an('array');",
											"            var tu = 0;",
											"            for(var j=0; j<data.tenders.by_status.length; j++) with (data.tenders.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_tender_status_id, \"user_tender_status_id\").to.be.a('number');",
											"                tu += updates;",
											"            }",
											"            pm.expect(data.tenders.updates, \"data.tenders.updates\").to.be.eq(tu);",
											"        }",
											"        ",
											"        if (data.companies.updates > 0) { ",
											"            pm.expect(data.companies.by_folder, \"data.companies.by_folder\").to.be.an('array');",
											"            var cu = 0;",
											"            for(var j=0; j<data.companies.by_folder.length; j++) with (data.companies.by_folder[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(client_company_folder_id, \"client_company_folder_id\").to.be.a('number');",
											"                cu += updates;",
											"            }",
											"            pm.expect(data.companies.updates, \"data.companies.updates\").to.be.eq(cu);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/updates?from=2021-01-01&to=2021-11-01",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"updates"
									],
									"query": [
										{
											"key": "from",
											"value": "2021-01-01"
										},
										{
											"key": "to",
											"value": "2021-11-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/updates account_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"",
											"    jsonData.result.users.forEach((user) => {",
											"        utils.schemaValidator(user, schemas.UserUpdates, `user[id:${user.id}]`)",
											"    })",
											"})",
											"",
											"pm.test(\"Test /client/updates check amount by statuses (or folders for company)\", function () {",
											"",
											"    for(var i=0; i<jsonData.result.users.length; i++) with (jsonData.result.users[i]) {",
											"",
											"        if (data.projects.updates > 0) { ",
											"            pm.expect(data.projects.by_status, \"data.projects.by_status\").to.be.an('array');",
											"            var pu = 0;",
											"            for(var j=0; j<data.projects.by_status.length; j++) with (data.projects.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_project_status_id, \"user_project_status_id\").to.be.a('number');",
											"                pu += updates;",
											"            }",
											"            pm.expect(data.projects.updates, \"data.projects.updates\").to.be.eq(pu);",
											"        }",
											"",
											"        if (data.tenders.updates > 0) { ",
											"            pm.expect(data.tenders.by_status, \"data.tenders.by_status\").to.be.an('array');",
											"            var tu = 0;",
											"            for(var j=0; j<data.tenders.by_status.length; j++) with (data.tenders.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_tender_status_id, \"user_tender_status_id\").to.be.a('number');",
											"                tu += updates;",
											"            }",
											"            pm.expect(data.tenders.updates, \"data.tenders.updates\").to.be.eq(tu);",
											"        }",
											"        ",
											"        if (data.companies.updates > 0) { ",
											"            pm.expect(data.companies.by_folder, \"data.companies.by_folder\").to.be.an('array');",
											"            var cu = 0;",
											"            for(var j=0; j<data.companies.by_folder.length; j++) with (data.companies.by_folder[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(client_company_folder_id, \"client_company_folder_id\").to.be.a('number');",
											"                cu += updates;",
											"            }",
											"            pm.expect(data.companies.updates, \"data.companies.updates\").to.be.eq(cu);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/updates?from=2021-01-01&to=2021-12-31&account_id={{account_id1}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"updates"
									],
									"query": [
										{
											"key": "from",
											"value": "2021-01-01"
										},
										{
											"key": "to",
											"value": "2021-12-31"
										},
										{
											"key": "account_id",
											"value": "{{account_id1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/updates &id={user}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"",
											"    jsonData.result.users.forEach((user) => {",
											"        utils.schemaValidator(user, schemas.UserUpdates, `user[id:${user.id}]`)",
											"    })",
											"})",
											"",
											"pm.test(\"Test /client/updates check amount by statuses (or folders for company)\", function () {",
											"",
											"    for(var i=0; i<jsonData.result.users.length; i++) with (jsonData.result.users[i]) {",
											"",
											"        if (data.projects.updates > 0) { ",
											"            pm.expect(data.projects.by_status, \"data.projects.by_status\").to.be.an('array');",
											"            var pu = 0;",
											"            for(var j=0; j<data.projects.by_status.length; j++) with (data.projects.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_project_status_id, \"user_project_status_id\").to.be.a('number');",
											"                pu += updates;",
											"            }",
											"            pm.expect(data.projects.updates, \"data.projects.updates\").to.be.eq(pu);",
											"        }",
											"",
											"        if (data.tenders.updates > 0) { ",
											"            pm.expect(data.tenders.by_status, \"data.tenders.by_status\").to.be.an('array');",
											"            var tu = 0;",
											"            for(var j=0; j<data.tenders.by_status.length; j++) with (data.tenders.by_status[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(user_tender_status_id, \"user_tender_status_id\").to.be.a('number');",
											"                tu += updates;",
											"            }",
											"            pm.expect(data.tenders.updates, \"data.tenders.updates\").to.be.eq(tu);",
											"        }",
											"        ",
											"        if (data.companies.updates > 0) { ",
											"            pm.expect(data.companies.by_folder, \"data.companies.by_folder\").to.be.an('array');",
											"            var cu = 0;",
											"            for(var j=0; j<data.companies.by_folder.length; j++) with (data.companies.by_folder[j]) {",
											"                pm.expect(updates, \"updates\").to.be.a('number');",
											"                pm.expect(client_company_folder_id, \"client_company_folder_id\").to.be.a('number');",
											"                cu += updates;",
											"            }",
											"            pm.expect(data.companies.updates, \"data.companies.updates\").to.be.eq(cu);",
											"        }",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/updates?from=2021-01-01&to=2021-12-31&id={{user}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"updates"
									],
									"query": [
										{
											"key": "from",
											"value": "2021-01-01"
										},
										{
											"key": "to",
											"value": "2021-12-31"
										},
										{
											"key": "id",
											"value": "{{user}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "client/projects account_id&cards=1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// STG",
											"// Основная — 198",
											"// Дочерние: — 384, 563",
											"// PROD",
											"// Основная — 202",
											"// Дочерние: — 477, 708",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects&cards=1 Cards response schema\", function () {",
											"",
											"    const jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"    pm.expect(jsonData.result.meta.account_id, \"meta.account_id\").to.be.eq(pm.collectionVariables.get(\"account_id1\"));",
											"",
											"    jsonData.result.data.forEach((project) => {",
											"        project.roles.forEach((role) => {",
											"            utils.schemaValidator(role, schemas.RoleWithCards, `project[id:${project.id}].role[company_id:${role.company_id}]`)",
											"        })",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&cards=1&account_id={{account_id1}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "cards",
											"value": "1"
										},
										{
											"key": "account_id",
											"value": "{{account_id1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema and filtering by user_id\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const userId =  pm.collectionVariables.get(\"user\");",
											"",
											"    jsonData.result.data.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.SalesProject, `project[id:${project.id}]`);",
											"        pm.expect(project.user_id, \"project.user_id\").to.eq(userId);",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&filter=user_id:in:[{{user}}]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "filter",
											"value": "user_id:in:[{{user}}]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by modified_at",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects filtering by modified_at\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"",
											"        pm.expect(modified_at, \"modified_at\").to.be.eq(pm.collectionVariables.get(\"project_modified_at\"));",
											"",
											"    }",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&fields=id,project_name,modified_at&filter=modified_at:gte:{{project_modified_at}},modified_at:lte:{{project_modified_at}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "fields",
											"value": "id,project_name,modified_at"
										},
										{
											"key": "filter",
											"value": "modified_at:gte:{{project_modified_at}},modified_at:lte:{{project_modified_at}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by updated_at",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects filtering by updated_at\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"",
											"        pm.expect(updated_at, \"updated_at\").to.be.eq(pm.collectionVariables.get(\"project_updated_at\"));",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&fields=id,project_name,updated_at&filter=updated_at:gte:{{project_updated_at}},updated_at:lte:{{project_updated_at}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "fields",
											"value": "id,project_name,updated_at"
										},
										{
											"key": "filter",
											"value": "updated_at:gte:{{project_updated_at}},updated_at:lte:{{project_updated_at}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by updated_at Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects filtering by updated_at\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"",
											"        pm.expect(updated_at, \"updated_at\").to.be.eq(pm.collectionVariables.get(\"project_updated_at\"));",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&fields=id,project_name,updated_at&filter=updated_at:gte:{{project_updated_at}},updated_at:lte:{{project_updated_at}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "fields",
											"value": "id,project_name,updated_at"
										},
										{
											"key": "filter",
											"value": "updated_at:gte:{{project_updated_at}},updated_at:lte:{{project_updated_at}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by delivered_at",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects filtering by delivered_at\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"",
											"        pm.expect(delivered_at, \"delivered_at\").to.be.eq(pm.collectionVariables.get(\"project_delivered_at\"));",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&fields=id,project_name,delivered_at&filter=delivered_at:gte:{{project_delivered_at}},delivered_at:lte:{{project_delivered_at}}",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "fields",
											"value": "id,project_name,delivered_at"
										},
										{
											"key": "filter",
											"value": "delivered_at:gte:{{project_delivered_at}},delivered_at:lte:{{project_delivered_at}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects : by user_project_status_id:in:[3]",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects filtering by user_project_status_id:in:[3]\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"",
											"        pm.expect(user_project_status_id, \"user_project_status_id\").to.be.eq(3);",
											"",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&fields=id,project_name,user_project_status_id&filter=user_project_status_id:in:[3]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "fields",
											"value": "id,project_name,user_project_status_id"
										},
										{
											"key": "filter",
											"value": "user_project_status_id:in:[3]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects by companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    jsonData.result.data.forEach( project => {",
											"",
											"        utils.schemaValidator(project, schemas.SalesProject, `project[id:${project.id}]`);",
											"",
											"        // pm.expect(project.roles.company_id[*], \"meta.size\").to.above(0);",
											"",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=32&filter=companies:in:[25967]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "32"
										},
										{
											"key": "filter",
											"value": "companies:in:[25967]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders filter by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const tenders = jsonData.result.data;",
											"",
											"    tenders.forEach((tender) => {",
											"",
											"        // Check if all fields are present in tender object and contr versa",
											"        requiredFields.salesTender.forEach((field) => {",
											"            pm.expect(tender, `tender[id:${tender.id}]`).have.property(field)",
											"        })",
											"        Object.keys(tender).forEach((field) => {",
											"            pm.expect(requiredFields.salesTender, `tender[id:${tender.id}]`).to.include(field)",
											"        })",
											"",
											"        // Check if all tender fields have correct type",
											"        utils.schemaValidator(tender, schemas.SalesTender, `tender[id:${tender.id}]`)",
											"    })",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders?offset=0&limit=50&filter=id:in:[157217,291726]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[157217,291726]"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT project",
					"item": [
						{
							"name": "client/projects/1 (Error 604. Project was not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.code, \"error.code\").to.eq(604);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"user_project_status_id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects/1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects/1 (Error 604. User not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.code, \"error.code\").to.eq(604);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 11111,\n  \"user_project_status_id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects/853616",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects",
										"853616"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects/1 (error -32602) status 888",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"error\");",
											"    pm.expect(jsonData.error, \"error\").to.have.property(\"code\");",
											"    pm.expect(jsonData.error.code, \"error\").to.eq(-32602);  ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 795,\n  \"user_project_status_id\": 888\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects/853616",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects",
										"853616"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects/79401 set staus 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_project_status_id\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects/79401",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects",
										"79401"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects check status 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(79401);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(user_project_status_id, \"user_project_status_id\").to.eq(2);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=50&filter=id:in:[79401],user_id:in:[{{user}}]&fields=id,user_id,user_project_status_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[79401],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,user_project_status_id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects/79401 set status 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"user_project_status_id\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects/79401",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects",
										"79401"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/projects check status 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(79401);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(user_project_status_id, \"user_project_status_id\").to.eq(3);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/projects?offset=0&limit=50&filter=id:in:[79401],user_id:in:[{{user}}]&fields=id,user_id,user_project_status_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[79401],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,user_project_status_id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT tender",
					"item": [
						{
							"name": "client/tenders/6449 (should be error) >> bug SMART-2330, 2532",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"error\");",
											"    pm.expect(jsonData.error, \"error\").to.have.property(\"code\");",
											"    pm.expect(jsonData.error.code, \"error\").to.eq(-32602);  ",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"user_tender_status_id\": 8888\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders/6449",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders",
										"6449"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders/6449 set status 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"user_tender_status_id\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders/6449",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders",
										"6449"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders check status 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(6449);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(user_tender_status_id, \"user_tender_status_id\").to.eq(2);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders?offset=0&limit=50&filter=id:in:[6449],user_id:in:[{{user}}]&fields=id,user_id,user_tender_status_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[6449],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,user_tender_status_id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders/6449 set status 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"user_tender_status_id\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders/6449",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders",
										"6449"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/tenders check status 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(6449);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(user_tender_status_id, \"user_tender_status_id\").to.eq(3);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/tenders?offset=0&limit=50&filter=id:in:[6449],user_id:in:[{{user}}]&fields=id,user_id,user_tender_status_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[6449],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,user_tender_status_id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT company",
					"item": [
						{
							"name": "client/companies/1 (Error 604. Company was not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"error\");",
											"    pm.expect(jsonData.error, \"error\").to.have.property(\"code\");",
											"    pm.expect(jsonData.error.code, \"error.code\").to.eq(604);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"company_folder\", pm.collectionVariables.get(\"company_folders\")[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"client_company_folder_id\": {{company_folder}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies/1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies/707 (Error 604. User not found) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error.code, \"error.code\").to.eq(604);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 11111,\n  \"client_company_folder_id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies/707",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies",
										"707"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies/707 (error -32602) status 888",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/updates response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"error\");",
											"    pm.expect(jsonData.error, \"error\").to.have.property(\"code\");",
											"    pm.expect(jsonData.error.code, \"error\").to.eq(604);  ",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"company_folder\", pm.collectionVariables.get(\"company_folders\")[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"client_company_folder_id\": 888\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies/707",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies",
										"707"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies/707 set status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"company_folder\", pm.collectionVariables.get(\"company_folders\")[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"client_company_folder_id\":  {{company_folder}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies/707",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies",
										"707"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies check status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(707);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(client_company_folder_id, \"client_company_folder_id\").to.eq(pm.collectionVariables.get(\"company_folder\"));",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies?offset=0&limit=50&filter=id:in:[707],user_id:in:[{{user}}]&fields=id,user_id,client_company_folder_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[707],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,client_company_folder_id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies/707 set status [-1] Prospects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"company_folder\", pm.collectionVariables.get(\"company_folders\")[1]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}},\n  \"client_company_folder_id\": -1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies/707",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies",
										"707"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/companies check status [-1] Prospects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(707);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"        pm.expect(client_company_folder_id, \"client_company_folder_id\").to.eq(-1);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/companies?offset=0&limit=50&filter=id:in:[707],user_id:in:[{{user}}]&fields=id,user_id,client_company_folder_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[707],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id,client_company_folder_id"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT contact",
					"item": [
						{
							"name": "client/contacts/1 (Error 604. User not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/contacts response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"error\");",
											"    pm.expect(jsonData.error, \"error\").to.have.property(\"code\");",
											"    pm.expect(jsonData.error.code, \"error.code\").to.eq(604);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 11111\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts/1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/contacts/1 add contact #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})",
											"",
											"// Skip next test until it will be fixed",
											"postman.setNextRequest(\"client/contacts check contact #1\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts/1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/contacts/1 add contact #1 (duble request) >> bug SMART-2334",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies/{id} response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result\").to.eq(true);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": {{user}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts/1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "client/contacts check contact #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /client/companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
											"    pm.expect(jsonData.result, \"result.data\").to.have.property(\"data\");",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.eq(1);",
											"        pm.expect(user_id, \"user_id\").to.eq(pm.collectionVariables.get(\"user\"));",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/client/contacts?offset=0&limit=50&filter=id:in:[1],user_id:in:[{{user}}]&fields=id,user_id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"client",
										"contacts"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[1],user_id:in:[{{user}}]"
										},
										{
											"key": "fields",
											"value": "id,user_id"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": " Organization token only"
		},
		{
			"name": "All Leads",
			"item": [
				{
					"name": "Schemas",
					"item": [
						{
							"name": "projects",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.eq(300);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    // To check offset with the next endpoint ",
											"    pm.collectionVariables.set(\"project50_id\", projects[49].id);",
											"    // To check filter by source_id ",
											"    pm.collectionVariables.set(\"project50_source_id\", projects[49].source_id);",
											"",
											"    projects.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.LeadsProject, `project[id:${project.id}]`)",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=0&limit=1000&cards=1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "cards",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "projects REMOVE ME",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.eq(300);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    // To check offset with the next endpoint ",
											"    pm.collectionVariables.set(\"project50_id\", projects[49].id);",
											"    // To check filter by source_id ",
											"    pm.collectionVariables.set(\"project50_source_id\", projects[49].source_id);",
											"",
											"    projects.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.LeadsProject, `project[id:${project.id}]`)",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=0&limit=1000&filter=materials:in:[42,43,48,89,162,273,275],country_id:in:[1]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "1000"
										},
										{
											"key": "filter",
											"value": "materials:in:[42,43,48,89,162,273,275],country_id:in:[1]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "projects REMOVE ME 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.eq(300);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    // To check offset with the next endpoint ",
											"    pm.collectionVariables.set(\"project50_id\", projects[49].id);",
											"    // To check filter by source_id ",
											"    pm.collectionVariables.set(\"project50_source_id\", projects[49].source_id);",
											"",
											"    projects.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.LeadsProject, `project[id:${project.id}]`)",
											"    })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=0&limit=10&filter=materials:in:[42,43,48,89,162,273,275],country_id:in:[1]&filter=categories:in:[29]&sort=id:a&fields=id,category_id,cat_dev_type",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "filter",
											"value": "materials:in:[42,43,48,89,162,273,275],country_id:in:[1]"
										},
										{
											"key": "filter",
											"value": "categories:in:[29]"
										},
										{
											"key": "sort",
											"value": "id:a"
										},
										{
											"key": "fields",
											"value": "id,category_id,cat_dev_type"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "projects (check offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.eq(1);",
											"",
											"    pm.expect(jsonData.result.data.length, \"result.data.length\").to.eq(1);",
											"    pm.expect(jsonData.result.data[0].id, \"result.data[0].id\").to.eq(pm.collectionVariables.get(\"project50_id\"));",
											"",
											"    pm.expect(Object.keys(jsonData.result.data[0]).length, \"Fields number\").to.be.eq(1);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=49&limit=1&fields=id",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "49"
										},
										{
											"key": "limit",
											"value": "1"
										},
										{
											"key": "fields",
											"value": "id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tenders",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /tenders response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    jsonData.result.data.forEach((tender) => {",
											"        utils.schemaValidator(tender, schemas.LeadsTender, `tender[id:${tender.id}]`)",
											"    })",
											"",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/tenders?offset=50&limit=50&filter=id:in:[1052022]&cards=1",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"tenders"
									],
									"query": [
										{
											"key": "offset",
											"value": "50"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "id:in:[1052022]"
										},
										{
											"key": "cards",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /companies response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.be.a('number');",
											"        pm.expect(source_id, \"source_id\").to.be.a('number');",
											"        pm.expect(version, \"version\").to.be.a('number');",
											"        pm.expect(name, \"name\").to.be.string;",
											"        pm.expect(org_nr, \"org_nr\").to.be.string;",
											"        pm.expect(par_id, \"par_id\").to.be.is;",
											"        if (par_id != null) pm.expect(par_id, \"par_id\").to.be.string;",
											"        pm.expect(cfar_id, \"cfar_id\").to.be.is;",
											"        if (cfar_id != null) pm.expect(cfar_id, \"cfar_id\").to.be.string;",
											"        pm.expect(company_nr, \"company_nr\").to.be.is;",
											"        if (company_nr != null) pm.expect(company_nr, \"company_nr\").to.be.string;",
											"        pm.expect(company_type_id, \"company_type_id\").to.be.a('number'); // - lookup company_types",
											"        pm.expect(country_id, \"country_id\").to.be.a('number'); // - endpoint /countries",
											"        pm.expect(region_id, \"region_id\").to.be.a('number'); // - endpoint /regions",
											"        pm.expect(pm.collectionVariables.get(\"region_ids\"), \"region_ids\").to.include(region_id);",
											"        pm.expect(district_id, \"district_id\").to.be.a('number'); // - endpoint /districts",
											"        pm.expect(city, \"city\").to.be.string;",
											"        pm.expect(postcode_text, \"postcode_text\").to.be.string;",
											"        pm.expect(street, \"street\").to.be.string;",
											"        pm.expect(street_number, \"street_number\").to.be.string;",
											"        pm.expect(location, \"location\").to.be.is;",
											"        if (location != null) {",
											"            pm.expect(location.lon, \"location.lon\").to.be.a('number');",
											"            pm.expect(location.lat, \"location.lat\").to.be.a('number');",
											"        }",
											"        pm.expect(addresses, \"addresses\").to.be.an('array');",
											"        for(var j=0; j<addresses.length; j++) with (addresses[j]) {",
											"            pm.expect(address_type_id, `addresses[${j}].address_type_id`).to.be.a('number');",
											"            pm.expect(use_in_roles, `addresses[${j}].use_in_roles`).to.be.a('boolean');",
											"            pm.expect(main, `addresses[${j}].main`).to.be.a('boolean');",
											"            pm.expect(city, `addresses[${j}].city`).to.be.string;",
											"            pm.expect(street, `addresses[${j}].street`).to.be.string;",
											"            pm.expect(street_number, `addresses[${j}].street_number`).to.be.string;",
											"            pm.expect(postcode_text, `addresses[${j}].postcode_text`).to.be.string;",
											"            pm.expect(country_id, `addresses[${j}].country_id`).to.be.a('number');",
											"            pm.expect(region_id, `addresses[${j}].region_id`).to.be.a('number');",
											"            pm.expect(district_id, `addresses[${j}].district_id`).to.be.a('number');",
											"            pm.expect(location, `addresses[${j}].location`).to.be.is;",
											"            if (location != null) {",
											"                pm.expect(location.lon, `addresses[${j}].location.lon`).to.be.a('number');",
											"                pm.expect(location.lat, `addresses[${j}].location.lat`).to.be.a('number');",
											"            }",
											"            pm.expect(Object.keys(jsonData.result.data[i].addresses[j]).length, \"Fields number of addresses\").to.be.eq(11);",
											"        }",
											"",
											"        pm.expect(communications, `company[${id}].communications`).to.be.an('array');",
											"        for(var j=0; j<communications.length; j++) {",
											"            schemas.communication(communications[j], `company[${id}].communications[${j}]`)",
											"        }",
											"",
											"        pm.expect(active_contacts, \"active_contacts\").to.be.an('array');",
											"        for(var j=0; j<active_contacts.length; j++) pm.expect(active_contacts[j], `active_contacts[${j}].location.lat`).to.be.a('number');",
											"",
											"        pm.expect(utils.checkValidDate(updated_at, \"updated_at\"), \"updated_at is not a date\").to.be.true;",
											"",
											"        pm.expect(updates, \"updates\").to.be.is;",
											"        pm.expect(updates, \"updates\").to.be.an('array');",
											"",
											"        for(var j=0; j<updates.length; j++) with (updates[j]) {",
											"            pm.expect(id, `updates[${j}].id`).to.be.a('number');",
											"            pm.expect(update_key, `updates[id:${id}].update_key`).to.be.a('string');",
											"            pm.expect(project_id, `updates[id:${id}].project_id`).to.be.is;",
											"            if (project_id != null) pm.expect(project_id, `updates[id:${id}].project_id`).to.be.a('number');",
											"            pm.expect(contact_id, `updates[id:${id}].contact_id`).to.be.is;",
											"            if (contact_id != null) pm.expect(contact_id, `updates[id:${id}].contact_id`).to.be.a('number');",
											"            pm.expect(tender_id, `updates[id:${id}].tender_id`).to.be.is;",
											"            if (tender_id != null) pm.expect(tender_id, `updates[id:${id}].tender_id`).to.be.a('number');",
											"            pm.expect(company_role_id, `updates[id:${id}].company_role_id`).to.be.is;",
											"            if (company_role_id != null) pm.expect(company_role_id, `updates[id:${id}].company_role_id`).to.be.a('number');",
											"            pm.expect(contact_role_id, `updates[id:${id}].contact_role_id`).to.be.is;",
											"            if (contact_role_id != null) pm.expect(contact_role_id, `updates[id:${id}].contact_role_id`).to.be.a('number');",
											"            pm.expect(utils.checkValidDate(updated_at, `updates[id:${id}].updated_at`), `updates[id:${id}].updated_at is not a date`).to.be.true;",
											"            pm.expect(replaced_company_role_name, `updates[id:${id}].replaced_company_role_name`).to.be.is;",
											"            if (replaced_company_role_name != null) pm.expect(replaced_company_role_name, `updates[id:${id}].replaced_company_role_name`).to.be.a('string');",
											"            pm.expect(replaced_contact_role_name, `updates[id:${id}].replaced_contact_role_name`).to.be.is;",
											"            if (replaced_contact_role_name != null) pm.expect(replaced_contact_role_name, `updates[id:${id}].replaced_contact_role_name`).to.be.a('string');",
											"            pm.expect(Object.keys(jsonData.result.data[i].updates[j]).length, `updates[id:${id}].length`).to.be.eq(10);",
											"        }",
											"",
											"        pm.expect(Object.keys(jsonData.result.data[i]).length, \"Fields number\").to.be.eq(22);",
											"",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/companies?offset=0&limit=5",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"companies"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "contacts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /contacts response schema\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    for(var i=0; i<jsonData.result.meta.size; i++) with (jsonData.result.data[i]) {",
											"        pm.expect(id, \"id\").to.be.a('number');",
											"        pm.expect(version, \"version\").to.be.a('number');",
											"        pm.expect(first_name, \"first_name\").to.be.string;",
											"        pm.expect(last_name, \"last_name\").to.be.string;",
											"        pm.expect(source_id, \"source_id\").to.be.a('number');",
											"",
											"        pm.expect(communications, `contact[${id}].communications[${i}]`).to.be.an('array');",
											"        for(var j=0; j<communications.length; j++) {",
											"            schemas.communication(communications[j], `contact[${id}].communications[${j}]`)",
											"        }",
											"",
											"        pm.expect(utils.checkValidDate(updated_at, \"updated_at\"), \"updated_at is not a date\").to.be.true;",
											"",
											"        pm.expect(updates, \"updates\").to.be.is;",
											"        pm.expect(updates, \"updates\").to.be.an('array');",
											"",
											"        for(var j=0; j<updates.length; j++) with (updates[j]) {",
											"            pm.expect(id, `updates[${j}].id`).to.be.a('number');",
											"            pm.expect(update_key, `updates[id:${id}].update_key`).to.be.a('string');",
											"            pm.expect(project_id, `updates[id:${id}].project_id`).to.be.is;",
											"            if (project_id != null) pm.expect(project_id, `updates[id:${id}].project_id`).to.be.a('number');",
											"            pm.expect(company_id, `updates[id:${id}].company_id`).to.be.is;",
											"            if (company_id != null) pm.expect(company_id, `updates[id:${id}].company_id`).to.be.a('number');",
											"            pm.expect(tender_id, `updates[id:${id}].tender_id`).to.be.is;",
											"            if (tender_id != null) pm.expect(tender_id, `updates[id:${id}].tender_id`).to.be.a('number');",
											"            pm.expect(company_role_id, `updates[id:${id}].company_role_id`).to.be.is;",
											"            if (company_role_id != null) pm.expect(company_role_id, `updates[id:${id}].company_role_id`).to.be.a('number');",
											"            pm.expect(contact_role_id, `updates[id:${id}].contact_role_id`).to.be.is;",
											"            if (contact_role_id != null) pm.expect(contact_role_id, `updates[id:${id}].contact_role_id`).to.be.a('number');",
											"            pm.expect(utils.checkValidDate(updated_at, `updates[id:${id}].updated_at`), `updates[id:${id}].updated_at is not a date`).to.be.true;",
											"            pm.expect(replaced_company_role_name, `updates[id:${id}].replaced_company_role_name`).to.be.is;",
											"            if (replaced_company_role_name != null) pm.expect(replaced_company_role_name, `updates[id:${id}].replaced_company_role_name`).to.be.a('string');",
											"            pm.expect(replaced_contact_role_name, `updates[id:${id}].replaced_contact_role_name`).to.be.is;",
											"            if (replaced_contact_role_name != null) pm.expect(replaced_contact_role_name, `updates[id:${id}].replaced_contact_role_name`).to.be.a('string');",
											"            pm.expect(Object.keys(jsonData.result.data[i].updates[j]).length, `updates[id:${id}].length`).to.be.eq(10);",
											"        }",
											"",
											"        pm.expect(Object.keys(jsonData.result.data[i]).length, \"Fields number\").to.be.eq(8);",
											"    }",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/contacts?offset=0&limit=10",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"contacts"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "project by source_id 2110223 (Czech)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.eq(1);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.eq(1);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    pm.expect(jsonData.result.data[0].id, \"result.data[0].id\").to.eq(pm.collectionVariables.get(\"project50_id\"));",
											"",
											"",
											"    // Check if all fields are present in project objects and contr versa",
											"    // projects.forEach((project) => {",
											"    //     utils.schemaValidator(project, schemas.LeadsProject, `project[id:${project.id}]`)",
											"    // })",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=0&limit=50&filter=source_id:in:[{{project50_source_id}}]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "source_id:in:[{{project50_source_id}}]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "project by companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test /projects response schema\", function () {",
											"",
											"    var jsonData = pm.response.json();",
											"",
											"    pm.expect(jsonData.result.data, \"result.data\").to.be.an('array');",
											"    pm.expect(jsonData.result.meta.total, \"meta.total\").to.above(0);",
											"    pm.expect(jsonData.result.meta.size, \"meta.size\").to.above(0);",
											"",
											"    const projects = jsonData.result.data;",
											"",
											"    projects.forEach((project) => {",
											"        utils.schemaValidator(project, schemas.LeadsProject, `project[id:${project.id}]`)",
											"    })",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://{{baseurl_api}}/v1/projects?offset=0&limit=50&filter=companies:in:[321608]",
									"protocol": "https",
									"host": [
										"{{baseurl_api}}"
									],
									"path": [
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "filter",
											"value": "companies:in:[321608]"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Restore",
			"item": [
				{
					"name": "auth with email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"token\", jsonData.result.opid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4ab3851f-b884-449d-8ea7-4c4758ce3a19",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{login}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{baseurl}}/api/v1/auth",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "/me/contacts/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test delete a contact\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData, \"body\").to.have.property(\"result\");",
									"    pm.expect(jsonData.result, \"result\").to.eq(true);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://{{baseurl}}/api/v1/me/contacts/1",
							"protocol": "https",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"v1",
								"me",
								"contacts",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"  checkNullableDate: function (assertDateString, comment) {",
					"    // pm.expect(assertDateString, comment).to.be.is;",
					"    if (assertDateString != null) {",
					"        return this.checkValidDate(assertDateString, comment)",
					"    }",
					"    return true;",
					"  },",
					"",
					"  checkValidDate: function(assertDateString, comment) {",
					"    pm.expect(assertDateString, comment).to.be.a('string');",
					"    var d = new Date(assertDateString);",
					"    if (Object.prototype.toString.call(d) === \"[object Date]\") {",
					"        if (isNaN(d.getTime())) {",
					"            return false;",
					"        }",
					"    } else {",
					"        return false;",
					"    }",
					"    return true;",
					"  },",
					"",
					"  schemaValidator: function(obj, schema, msg) {",
					"    // console.log(\"msg: \" + msg)",
					"    // console.log(obj)",
					"    // console.log(schema)",
					"",
					"    // All required (not optional) fields are present",
					"    Object.keys(schema).forEach((key) => {",
					"        if (!schema[key].includes(\"optional\")) {",
					"            pm.expect(obj, msg).have.property(key)",
					"        }",
					"    })",
					"",
					"    // Object does not contain extra fields",
					"    Object.keys(obj).forEach((key) => {",
					"        pm.expect(Object.keys(schema), msg).to.include(key)",
					"    })",
					"",
					"    // Object has right schema",
					"    Object.keys(obj).forEach((key) => {",
					"",
					"        // console.log(`${key}: ${schema[key]}`)",
					"        // console.log(`${obj[key]}: ${obj[key]}`)",
					"",
					"        var restrictions = schema[key].split(\":\");",
					"        var type = restrictions[0];",
					"        if ( !(restrictions.includes(\"nullable\") && obj[key] == null) ) {",
					"        // console.log(`${msg}.${key}: ${restrictions[0]}: ${obj[key]}`)",
					"            pm.expect(obj[key], `${msg}.${key}`).to.be.a(type);",
					"            switch (type) {",
					"            case 'object':",
					"                // console.log('object');",
					"                // console.log(obj[key]);",
					"                // console.log(restrictions);",
					"                this.schemaValidator(obj[key], schemas[restrictions[1]], `${msg}.${restrictions[1]}`);",
					"            break;",
					"            case 'array':",
					"                // console.log('array');",
					"                var elementType = restrictions[1]",
					"                if (typeof schemas[elementType] == 'undefined') { // Array of primitive elements",
					"                    // console.log(\"Primitive type: \" + elementType);",
					"                    obj[key].forEach(element => pm.expect(element, `${msg}.${key}`).to.be.a(elementType) );",
					"                } else { // Array of objects",
					"                    // console.log(\"Custom type: \" + elementType);",
					"                    // console.log(obj[key]);",
					"                    // console.log(schemas[restrictions[1]]);",
					"                    obj[key].forEach(element => this.schemaValidator(element, schemas[restrictions[1]], `${msg}.${restrictions[1]}`) );",
					"                }",
					"            break;",
					"            // default: console.log(\"!!!!!!!!\");",
					"            }",
					"        } else {",
					"        // console.log(`${msg}.${key}: ${obj[key]} — nullable:${restrictions.includes(\"nullable\")} — without checking`)",
					"        }",
					"    })",
					"",
					"  },",
					"",
					"  myFunc: function() {",
					"    return 'hello';",
					"  }",
					"};",
					"",
					"schemas = {",
					"",
					"    Item: {",
					"        id: \"number\",",
					"        name: \"string\"",
					"    },",
					"",
					"    Region: {",
					"        id: \"number\",",
					"        name: \"string\",",
					"        country_id: \"number\"",
					"    },",
					"",
					"    District: {",
					"        id: \"number\",",
					"        name: \"string\",",
					"        country_id: \"number\",",
					"        region_id: \"number\"",
					"    },",
					"",
					"    Lookups: {",
					"        version: \"number\",",
					"        language_id: \"number\",",
					"        items: \"array:Lookup\"",
					"    },",
					"",
					"    Lookup: {",
					"        lookup: \"string\",",
					"        items: \"array:ItemNode\"",
					"    },",
					"",
					"    ItemNode: {",
					"        id: \"number\",",
					"        name: \"string\",",
					"        items: \"array:ItemNode:optional\"",
					"    },",
					"",
					"    User: {",
					"        id: \"number\",",
					"        name: \"string:nullable\",",
					"        email: \"string\",",
					"        phone: \"string:nullable\",",
					"        position_id: \"number:nullable\",",
					"        license_id: \"number\",",
					"        pic: \"string:nullable\",",
					"        status: \"number\",",
					"        invite_status: \"number\",",
					"        modified_at: \"string\"",
					"    },",
					"",
					"    SalesProject: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        project_name: \"string:nullable\",",
					"        title: \"string:nullable\",",
					"        description: \"string:nullable\",",
					"        what_happens: \"string:nullable\",",
					"        property_designation: \"string:nullable\",",
					"        framework_agreement: \"boolean\",",
					"        buildings: \"number:nullable\",",
					"        apartments: \"number:nullable\",",
					"        floors: \"number:nullable\",",
					"        underground_floors: \"number:nullable\",",
					"        gross_area: \"number:nullable\",",
					"        construction_area: \"number:nullable\",",
					"        gross_volume: \"number:nullable\",",
					"        renovation_area: \"number:nullable\",",
					"        demolition_area: \"number:nullable\",",
					"        decontamination_area: \"number:nullable\",",
					"        usage_area: \"number:nullable\",",
					"        contract_type_id: \"number\",",
					"        uncertainty_id: \"number:nullable\",",
					"        ecocertified_type_id: \"number\",",
					"        stage_id: \"number\",",
					"        update_ended: \"string:nullable\",",
					"        country_id: \"number\",",
					"        city: \"string:nullable\", // 947517",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        postcode: \"number\",",
					"        postcode_text: \"string:nullable\", // 947517",
					"        street: \"string:nullable\",",
					"        street_number: \"string:nullable\",",
					"        location: \"object:Location\",",
					"        start_date: \"string:nullable\",",
					"        start_text: \"string:nullable\",",
					"        finish_date: \"string:nullable\",",
					"        finish_text: \"string:nullable\",",
					"        months: \"number:nullable\",",
					"        residence_forms: \"array:number\",",
					"        category_id: \"number\",",
					"        dev_type_id: \"number\",",
					"        source_id: \"number\",",
					"        geo_accuracy_id: \"number\",",
					"        start_date_accuracy_id: \"number\",",
					"        finish_date_accuracy_id: \"number\",",
					"        detailed_stage_id: \"number:nullable\",",
					"        crafts: \"array:number\",",
					"        updated_at: \"string\",",
					"        value: \"number:nullable\",",
					"        value_text: \"string:nullable\",",
					"        value_range: \"object:NumberRange:nullable\",",
					"        roles: \"array:Role\",",
					"        material_data: \"array:Material\",",
					"        cat_dev_type: \"array:CatDevType\",",
					"        updates: \"array:ProjectUpdate\",",
					"        delivered_at: \"string:nullable\",",
					"        user_project_status_id: \"number\",",
					"        user_id: \"number\",",
					"        modified_at: \"string\",",
					"        client_statuses: \"array:ProjectClientStatus\",",
					"        expected_tender_roles: \"array:number\",",
					"        assigned_tender_roles: \"array:number\",",
					"        publish_source_id: \"number:nullable\"",
					"    },",
					"",
					"    LeadsProject: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        project_name: \"string:nullable\",",
					"        title: \"string:nullable\",",
					"        description: \"string:nullable\",",
					"        what_happens: \"string:nullable\",",
					"        property_designation: \"string:nullable\",",
					"        framework_agreement: \"boolean\",",
					"        buildings: \"number:nullable\",",
					"        apartments: \"number:nullable\",",
					"        floors: \"number:nullable\",",
					"        underground_floors: \"number:nullable\",",
					"        gross_area: \"number:nullable\",",
					"        construction_area: \"number:nullable\",",
					"        gross_volume: \"number:nullable\",",
					"        renovation_area: \"number:nullable\",",
					"        demolition_area: \"number:nullable\",",
					"        decontamination_area: \"number:nullable\",",
					"        usage_area: \"number:nullable\",",
					"        contract_type_id: \"number\",",
					"        uncertainty_id: \"number:nullable\",",
					"        ecocertified_type_id: \"number\",",
					"        stage_id: \"number\",",
					"        update_ended: \"string:nullable\",",
					"        country_id: \"number\",",
					"        city: \"string:nullable\", // 947517",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        postcode: \"number\",",
					"        postcode_text: \"string:nullable\", // 947517 ",
					"        street: \"string:nullable\",",
					"        street_number: \"string:nullable\",",
					"        location: \"object:Location:nullable\", // stg 949123",
					"        start_date: \"string:nullable\",",
					"        start_text: \"string:nullable\",",
					"        finish_date: \"string:nullable\",",
					"        finish_text: \"string:nullable\",",
					"        months: \"number:nullable\",",
					"        residence_forms: \"array:number\",",
					"        category_id: \"number:nullable\", // 412046",
					"        dev_type_id: \"number:nullable\", // 412046",
					"        source_id: \"number\",",
					"        geo_accuracy_id: \"number\",",
					"        start_date_accuracy_id: \"number\",",
					"        finish_date_accuracy_id: \"number\",",
					"        detailed_stage_id: \"number:nullable\",",
					"        crafts: \"array:number\",",
					"        updated_at: \"string\",",
					"        value: \"number:nullable\",",
					"        value_text: \"string:nullable\",",
					"        value_range: \"object:NumberRange:nullable\",",
					"        roles: \"array:Role\",",
					"        material_data: \"array:Material\",",
					"        cat_dev_type: \"array:CatDevType\",",
					"        updates: \"array:ProjectUpdate\",",
					"        expected_tender_roles: \"array:number\",",
					"        assigned_tender_roles: \"array:number\",",
					"        publish_source_id: \"number:nullable\"",
					"    },",
					"",
					"    SalesTender: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        name: \"string\",",
					"        description: \"string:nullable\",",
					"        tender_subject_id: \"number\",",
					"        tender_type_id: \"number\",",
					"        tender_status_id: \"number\",",
					"        company_role_id: \"number\",",
					"        url: \"string:nullable\",",
					"        framework_agreement: \"boolean\",",
					"        project_id: \"number\",",
					"        company_id: \"number:nullable\",",
					"        contact_id: \"number:nullable\",",
					"        first_day_materials_text: \"string:nullable\",",
					"        last_day_application_text: \"string:nullable\",",
					"        prequalification_date_text: \"string:nullable\",",
					"        first_day_materials_range: \"object:DataRange\",",
					"        last_day_application_range: \"object:DataRange\",",
					"        prequalification_date_range: \"object:DataRange\",",
					"        country_id: \"number\",",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        city: \"string:nullable\", // tender[id:1004228].city: expected null to be a string",
					"        postcode: \"number\",",
					"        postcode_text: \"string:nullable\", // tender[id:1004228].postcode_text: expected null to be a string",
					"        street: \"string:nullable\",",
					"        street_number: \"string:nullable\",",
					"        location: \"object:Location:nullable\",",
					"        agreement_period: \"number:nullable\",",
					"        cat_dev_type: \"array:CatDevType\",",
					"        material_data: \"array:Material\",",
					"        category_id: \"number:nullable\",",
					"        dev_type_id: \"number:nullable\",",
					"        source_id: \"number\",",
					"        geo_accuracy_id: \"number\",",
					"        content_standard: \"string:nullable\",",
					"        content_ted: \"string:nullable\",",
					"        archived: \"number\",",
					"        updated_at: \"string:nullable\",",
					"        delivered_at: \"string:nullable\",",
					"        modified_at: \"string\",",
					"        user_tender_status_id: \"number\",",
					"        user_id: \"number\",",
					"        updates: \"array:TenderUpdate\",",
					"        client_statuses: \"array:TenderClientStatus\"",
					"    },",
					"",
					"    SalesTenderWithCard: {",
					"      id: \"number\",",
					"      version: \"number\",",
					"      name: \"string\",",
					"      description: \"string:nullable\",",
					"      tender_subject_id: \"number\",",
					"      tender_type_id: \"number\",",
					"      tender_status_id: \"number\",",
					"      company_role_id: \"number\",",
					"      url: \"string:nullable\",",
					"      framework_agreement: \"boolean\",",
					"      project_id: \"number\",",
					"      company_id: \"number:nullable\",",
					"      contact_id: \"number:nullable\",",
					"      first_day_materials_text: \"string:nullable\",",
					"      last_day_application_text: \"string:nullable\",",
					"      prequalification_date_text: \"string:nullable\",",
					"      first_day_materials_range: \"object:DataRange\",",
					"      last_day_application_range: \"object:DataRange\",",
					"      prequalification_date_range: \"object:DataRange\",",
					"      country_id: \"number\",",
					"      region_id: \"number\",",
					"      district_id: \"number\",",
					"      city: \"string:nullable\", // tender[id:1004228].city: expected null to be a string",
					"      postcode: \"number\",",
					"      postcode_text: \"string:nullable\", // tender[id:1004228].postcode_text: expected null to be a string",
					"      street: \"string:nullable\",",
					"      street_number: \"string:nullable\",",
					"      location: \"object:Location:nullable\",",
					"      agreement_period: \"number:nullable\",",
					"      cat_dev_type: \"array:CatDevType\",",
					"      material_data: \"array:Material\",",
					"      category_id: \"number:nullable\",",
					"      dev_type_id: \"number:nullable\",",
					"      source_id: \"number\",",
					"      geo_accuracy_id: \"number\",",
					"      content_standard: \"string:nullable\",",
					"      content_ted: \"string:nullable\",",
					"      archived: \"number\",",
					"      updated_at: \"string:nullable\",",
					"      delivered_at: \"string:nullable\",",
					"      modified_at: \"string\",",
					"      user_tender_status_id: \"number\",",
					"      user_id: \"number\",",
					"      updates: \"array:TenderUpdateWithCards\",",
					"      client_statuses: \"array:TenderClientStatus\",",
					"      company_role_card: \"object:Item\",",
					"      project_card: \"object:ProjectCard\",",
					"      company_card: \"object:CompanyCard\",",
					"      contact_card: \"object:ContactCard:optional\"",
					"    },",
					"",
					"    LeadsTender: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        name: \"string\",",
					"        description: \"string:nullable\",",
					"        tender_subject_id: \"number\",",
					"        tender_type_id: \"number\",",
					"        tender_status_id: \"number\",",
					"        company_role_id: \"number:nullable\",",
					"        url: \"string:nullable\",",
					"        framework_agreement: \"boolean\",",
					"        project_id: \"number\",",
					"        company_id: \"number:nullable\",",
					"        contact_id: \"number:nullable\",",
					"        first_day_materials_text: \"string:nullable\",",
					"        last_day_application_text: \"string:nullable\",",
					"        prequalification_date_text: \"string:nullable\",",
					"        first_day_materials_range: \"object:DataRange\",",
					"        last_day_application_range: \"object:DataRange\",",
					"        prequalification_date_range: \"object:DataRange\",",
					"        country_id: \"number\",",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        city: \"string:nullable\", // stg 1024202",
					"        postcode: \"number\",",
					"        postcode_text: \"string:nullable\", // stg 1032880",
					"        street: \"string:nullable\",",
					"        street_number: \"string:nullable\",",
					"        location: \"object:Location:nullable\",",
					"        agreement_period: \"number:nullable\",",
					"        cat_dev_type: \"array:CatDevType\",",
					"        material_data: \"array:Material\",",
					"        category_id: \"number:nullable\",",
					"        dev_type_id: \"number:nullable\",",
					"        source_id: \"number\",",
					"        geo_accuracy_id: \"number\",",
					"        content_standard: \"string:nullable\",",
					"        content_ted: \"string:nullable\",",
					"        archived: \"number\",",
					"        updated_at: \"string:nullable\",",
					"        updates: \"array:TenderUpdate\"",
					"    },",
					"",
					"    SalesCompany: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        name: \"string\",",
					"        org_nr: \"string\",",
					"        par_id: \"string:nullable\",",
					"        cfar_id: \"string:nullable\",",
					"        cfar_nr: \"string:nullable\",",
					"        company_nr: \"string:nullable\", // null: #414297, #417211, #414297",
					"        company_type_id: \"number\",",
					"        country_id: \"number\",",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        city: \"string\",",
					"        postcode_text: \"string:nullable\", // null: #417211",
					"        street: \"string:nullable\", // null: #1897",
					"        street_number: \"string:nullable\", // null: #1897",
					"        location: \"object:Location:nullable\",",
					"        active_contacts: \"array:number\",",
					"        source_id: \"number\",",
					"        updated_at: \"string\",",
					"        addresses: \"array:Adderess\",",
					"        communications: \"array:Communication\",",
					"        updates: \"array:CompanyUpdate\",",
					"        client_company_folder_id: \"number\",",
					"        delivered_at: \"string:nullable\", // null: #9323",
					"        user_id: \"number\",",
					"        modified_at: \"string\"",
					"    },",
					"",
					"    SalesCompanyWithCards: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        name: \"string\",",
					"        org_nr: \"string\",",
					"        par_id: \"string:nullable\",",
					"        cfar_id: \"string:nullable\",",
					"        cfar_nr: \"string:nullable\",",
					"        company_nr: \"string:nullable\", // null: #414297, #417211, #414297",
					"        company_type_id: \"number\",",
					"        country_id: \"number\",",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        city: \"string\",",
					"        postcode_text: \"string:nullable\", // null: #417211",
					"        street: \"string:nullable\", // null: #1897",
					"        street_number: \"string:nullable\", // null: #1897",
					"        location: \"object:Location:nullable\",",
					"        active_contacts: \"array:number\",",
					"        source_id: \"number\",",
					"        updated_at: \"string\",",
					"        addresses: \"array:Adderess\",",
					"        communications: \"array:Communication\",",
					"        updates: \"array:CompanyUpdateWithCards\",",
					"        client_company_folder_id: \"number\",",
					"        delivered_at: \"string:nullable\", // null: #9323",
					"        user_id: \"number\",",
					"        modified_at: \"string\"",
					"    },",
					"",
					"    SalesContact: {",
					"        id: \"number\",",
					"        version: \"number\",",
					"        first_name: \"string\",",
					"        last_name: \"string\",",
					"        communications: \"array:Communication\",",
					"        source_id: \"number\",",
					"        updated_at: \"string\",",
					"        updates: \"array:ContactUpdate\",",
					"        user_id: \"number\",",
					"        modified_at: \"string\"",
					"    },",
					"",
					"    Location: {",
					"        lon: \"number:nullable\",",
					"        lat: \"number:nullable\",",
					"    },",
					"",
					"    Adderess: {",
					"        address_type_id: \"number\",",
					"        use_in_roles: \"boolean\",",
					"        main: \"boolean\",",
					"        city: \"string\",",
					"        street: \"string:nullable\", // null: company #1897\"",
					"        street_number: \"string:nullable\", // null: company #1897",
					"        postcode_text: \"string:nullable\", // null: company #417211",
					"        country_id: \"number\",",
					"        region_id: \"number\",",
					"        district_id: \"number\",",
					"        location: \"object:Location:nullable\"",
					"    },",
					"",
					"    NumberRange: {",
					"        gte: \"number:nullable\",",
					"        lte: \"number:nullable\",",
					"    },",
					"",
					"    DataRange: {",
					"        gte: \"string:nullable\",",
					"        lte: \"string:nullable\",",
					"    },",
					"",
					"    Role: {",
					"        created_at: \"string\",",
					"        appointed_at: \"string\",",
					"        company_role_id: \"number\",",
					"        company_id: \"number\",",
					"        replacement_name: \"string:nullable\",",
					"        main: \"boolean\",",
					"        comment: \"string:nullable\",",
					"        contacts: \"array:Contact\"",
					"    },",
					"",
					"    Contact: {",
					"        contact_role_id: \"number:nullable\",",
					"        contact_id: \"number\",",
					"        replacement_name: \"string:nullable\"",
					"    },",
					"",
					"    Material: {",
					"        material_id: \"number\",",
					"        measurement_id: \"number:nullable\",",
					"        value: \"number:nullable\",",
					"        replacement_name: \"string:nullable\",",
					"        assignment_type_id: \"number:nullable\"",
					"    },",
					"    ",
					"    CatDevType: {",
					"        category_id: \"number\",",
					"        dev_type_id: \"number\",",
					"        main: \"boolean\",",
					"        measurement_id: \"number:nullable\",",
					"        value: \"number:nullable\",",
					"        replacement_name: \"string:nullable\",",
					"        assignment_type_id: \"number:nullable\",",
					"        priority: \"number\"",
					"    },",
					"    ",
					"    ProjectUpdate: {",
					"        id: \"number\",",
					"        update_key: \"string\",",
					"        company_id: \"number:nullable\",",
					"        contact_id: \"number:nullable\",",
					"        tender_id: \"number:nullable\",",
					"        company_role_id: \"number:nullable\",",
					"        contact_role_id: \"number:nullable\",",
					"        updated_at: \"string:nullable\", // stg project[id:463468]",
					"        replaced_company_role_name: \"string:nullable\",",
					"        replaced_contact_role_name: \"string:nullable\",",
					"        start_date: \"string:nullable\",",
					"        finish_date: \"string:nullable\"",
					"    },",
					"",
					"    TenderUpdate: {",
					"        id: \"number\",",
					"        update_key: \"string\",",
					"        company_id: \"number:nullable\",",
					"        contact_id: \"number:nullable\",",
					"        project_id: \"number:nullable\",",
					"        company_role_id: \"number:nullable\",",
					"        contact_role_id: \"number:nullable\",",
					"        updated_at: \"string:nullable\",",
					"        replaced_company_role_name: \"string:nullable\",",
					"        replaced_contact_role_name: \"string:nullable\",",
					"        start_date: \"string:nullable\",",
					"        finish_date: \"string:nullable\"",
					"    },",
					"",
					"    TenderUpdateWithCards: {",
					"      id: \"number\",",
					"      update_key: \"string\",",
					"      company_id: \"number:nullable\",",
					"      contact_id: \"number:nullable\",",
					"      project_id: \"number:nullable\",",
					"      company_role_id: \"number:nullable\",",
					"      contact_role_id: \"number:nullable\",",
					"      updated_at: \"string:nullable\",",
					"      replaced_company_role_name: \"string:nullable\",",
					"      replaced_contact_role_name: \"string:nullable\",",
					"      start_date: \"string:nullable\",",
					"      finish_date: \"string:nullable\",",
					"      project_card: \"object:ProjectCard:optional\",",
					"      company_role_card: \"object:Item:optional\",",
					"      contact_card: \"object:ContactCard:optional\"",
					"    },",
					"",
					"    CompanyUpdate: {",
					"        id: \"number\",",
					"        update_key: \"string\",",
					"        tender_id: \"number:nullable\",",
					"        contact_id: \"number:nullable\",",
					"        project_id: \"number:nullable\",",
					"        company_role_id: \"number:nullable\", // company[id:105162]",
					"        contact_role_id: \"number:nullable\",",
					"        updated_at: \"string\",",
					"        replaced_company_role_name: \"string:nullable\",",
					"        replaced_contact_role_name: \"string:nullable\"",
					"    },",
					"",
					"    CompanyUpdateWithCards: {",
					"      id: \"number\",",
					"      update_key: \"string\",",
					"      tender_id: \"number:nullable\",",
					"      contact_id: \"number:nullable\",",
					"      project_id: \"number:nullable\",",
					"      company_role_id: \"number:nullable\", // company[id:105162]",
					"      contact_role_id: \"number:nullable\",",
					"      updated_at: \"string\",",
					"      replaced_company_role_name: \"string:nullable\",",
					"      replaced_contact_role_name: \"string:nullable\",",
					"      project_card: \"object:ProjectCard:nullable\",",
					"      company_role_card: \"object:Item\",",
					"    },",
					"",
					"    ContactUpdate: {",
					"        id: \"number\",",
					"        update_key: \"string\",",
					"        tender_id: \"number:nullable\",",
					"        company_id: \"number:nullable\",",
					"        project_id: \"number:nullable\",",
					"        company_role_id: \"number:nullable\",",
					"        contact_role_id: \"number:nullable\",",
					"        updated_at: \"string\",",
					"        replaced_company_role_name: \"string:nullable\",",
					"        replaced_contact_role_name: \"string:nullable\"",
					"    },",
					"    ",
					"    ProjectClientStatus: {",
					"        user_id: \"number\",",
					"        user_project_status_id: \"number\"",
					"    },",
					"    ",
					"    TenderClientStatus: {",
					"        user_id: \"number\",",
					"        user_tender_status_id: \"number\"",
					"    },",
					"",
					"    RoleWithCards: {",
					"        created_at: \"string\",",
					"        appointed_at: \"string\",",
					"        company_role_id: \"number\",",
					"        company_id: \"number\",",
					"        replacement_name: \"string:nullable\",",
					"        main: \"boolean\",",
					"        comment: \"string:nullable\",",
					"        contacts: \"array:ContactWithCard\",",
					"        company_role_card: \"object:RoleCard\",",
					"        company_card: \"object:CompanyCard\"",
					"    },",
					"",
					"    ProjectCard: {",
					"        id: \"number\",",
					"        project_name: \"string\",",
					"        title: \"string\",",
					"    },",
					"",
					"    CompanyCard: {",
					"        id: \"number\",",
					"        name: \"string\",",
					"        communications: \"array:Communication\",",
					"        org_nr: \"string:nullable\",",
					"        company_nr: \"string:nullable\",",
					"        par_id: \"string:nullable\",",
					"        cfar_nr: \"string:nullable\"",
					"    },",
					"",
					"    RoleCard: {",
					"        id: \"number\",",
					"        name: \"string\"",
					"    },",
					"",
					"    Communication: {",
					"        communication_type_id: \"number\",",
					"        value: \"string\",",
					"        phone_data: \"object:PhoneData:nullable\"",
					"    },",
					"",
					"    PhoneData: {",
					"        number: \"string\",",
					"        calling_code: \"string\",",
					"        area_code: \"string\",",
					"        display_number: \"string\",",
					"        country_id: \"number\"",
					"    },",
					"",
					"    ContactWithCard: {",
					"        contact_role_id: \"number:nullable\",",
					"        contact_id: \"number\",",
					"        replacement_name: \"string:nullable\",",
					"        contact_role_card: \"object:RoleCard:optional\",",
					"        contact_card: \"object:ContactCard\"",
					"    },",
					"",
					"    ContactCard: {",
					"        id: \"number\",",
					"        first_name: \"string\",",
					"        last_name: \"string\",",
					"        communications: \"array:Communication\"",
					"    },",
					"",
					"    UserUpdates: {",
					"        \"id\": \"number\",",
					"        \"data\": \"object:UpdatesData\"",
					"    },",
					"",
					"    UpdatesData: {",
					"        projects: \"object:ProjectsUpdateStats\",",
					"        tenders: \"object:TendersUpdatesStats\",",
					"        companies: \"object:CompaniesUpdatesStats\"",
					"    },",
					"",
					"    ProjectsUpdateStats: {",
					"        updates: \"number\",",
					"        by_status: \"array:ProjectUpdateStats:optional\"",
					"    },",
					"",
					"    TendersUpdatesStats: {",
					"        updates: \"number\",",
					"        by_status: \"array:TenderUpdatesStats:optional\"",
					"    },",
					"",
					"    CompaniesUpdatesStats: {",
					"        updates: \"number\",",
					"        by_folder: \"array:CompanyUpdatesStats:optional\"",
					"    },",
					"",
					"    ProjectUpdateStats: {",
					"        user_project_status_id: \"number\",",
					"        updates: \"number\"",
					"    },",
					"",
					"    TenderUpdatesStats: {",
					"        user_tender_status_id: \"number\",",
					"        updates: \"number\"",
					"    },",
					"",
					"    CompanyUpdatesStats: {",
					"        client_company_folder_id: \"number\",",
					"        updates: \"number\"",
					"    },",
					"",
					"  myFunc: function() {",
					"    return 'hello';",
					"  }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "b8bc4428-557a-4f61-8f3c-1f1a1004eeee"
		},
		{
			"key": "country_ids",
			"value": [
				1,
				2,
				3,
				4,
				63,
				202
			]
		},
		{
			"key": "country_names",
			"value": [
				"Sweden",
				"Denmark",
				"Finland",
				"Norway",
				"Czech Republic (the)",
				"Slovakia"
			]
		},
		{
			"key": "region_ids",
			"value": [
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10,
				11,
				12,
				13,
				14,
				15,
				16,
				17,
				18,
				19,
				20,
				21,
				22,
				23,
				24,
				25,
				26,
				27,
				28,
				29,
				30,
				31,
				32,
				33,
				34,
				35,
				36,
				37,
				38,
				39,
				40,
				41,
				42,
				43,
				44,
				45,
				67,
				68,
				69,
				70,
				71,
				74,
				75,
				76,
				77,
				78,
				79,
				80,
				81,
				82,
				83,
				84,
				85,
				86,
				87,
				88,
				89,
				90,
				91,
				92,
				93,
				94,
				95,
				96,
				97,
				98,
				99,
				100,
				101,
				102
			]
		},
		{
			"key": "districts_num",
			"value": 1223
		},
		{
			"key": "company_folders",
			"value": [
				406,
				407
			]
		},
		{
			"key": "company_folder",
			"value": 407
		},
		{
			"key": "project_modified_at",
			"value": ""
		},
		{
			"key": "project_delivered_at",
			"value": ""
		},
		{
			"key": "project_updated_at",
			"value": ""
		},
		{
			"key": "users",
			"value": ""
		},
		{
			"key": "user",
			"value": ""
		},
		{
			"key": "env",
			"value": ""
		},
		{
			"key": "account_id0",
			"value": ""
		},
		{
			"key": "account_id1",
			"value": ""
		},
		{
			"key": "account_id2",
			"value": ""
		},
		{
			"key": "project50_id",
			"value": ""
		},
		{
			"key": "project50_source_id",
			"value": ""
		}
	]
}