{
	"info": {
		"_postman_id": "4eba7818-7814-4180-b66c-1f52e0b9f4e5",
		"name": "Smart services",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Imposter 8085",
			"item": [
				{
					"name": "Add Dictionary-service imposter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n    \"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\",\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                        \t\"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/jsonrpc/v1\",\n                        \"method\": \"POST\",\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        \"body\": {\n                          \"method\": \"get_dict\",\n\t\t\t\t\t\t  \"params\": {\n\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\"section\": \"login\",\n\t\t\t\t\t\t\t\"language_id\": -1\n\t\t\t\t\t\t  }\n                    \t}\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\": {\n\t\t\t\t\t\t\t  \"type\": \"vocabularies\",\n\t\t\t\t\t\t\t  \"section\": \"login\",\n\t\t\t\t\t\t\t  \"dict\": [ {\n\t\t\t\t\t\t\t\t    \"version\": 2222222222,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"email_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"forgot_password_text\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Forgot your password?\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"There is no user with this email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Contact the administrator\\nby email: admin@docu.com\\nor phone: 740 743 36 57\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Wrong password!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Get link sent to\\n{{ email }}\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"send_link_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Send link\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n        \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                        \t\"method\": \"POST\",\n\t                        \"headers\": {\n\t                            \"Content-Type\": \"application/json\"\n\t                        },\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"errors\",\n\t\t\t\t\t\t\t\t\t\"section\": \"login\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t        \"type\": \"errors\",\n\t\t\t\t\t\t        \"section\": \"login\",\n\t\t\t\t\t\t        \"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"system_error\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Something went wrong. Please, try again\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"token_expired\": {\n\t\t\t\t\t\t\t\t        \"text\": \"The link is out of date.\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"user_not_found\": {\n\t\t\t\t\t\t\t\t        \"text\": \"User not found\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n    \t\t\t\"equals\": {\n    \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                    \t\"method\": \"POST\",\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        \"body\": {\n                            \"method\": \"get_dict\",\n                            \"params\": {\n\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\"section\": \"login\",\n\t\t\t\t\t\t\t\t\"language_id\": 0\n                            }\n                        }\n            \t\t}\n            \t}\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t     \"error\": {\n\t\t\t\t\t\t        \"code\": 400,\n\t\t\t\t\t\t        \"message\": \"The model is not valid\",\n\t\t\t\t\t\t        \"data\": [\n\t\t\t\t\t\t            {\n\t\t\t\t\t\t                \"property_name\": \"language_id\",\n\t\t\t\t\t\t                \"attempted_value\": 0,\n\t\t\t\t\t\t                \"error_code\": \"402\"\n\t\t\t\t\t\t            }\n\t\t\t\t\t\t        ]\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n        \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                        \t\"method\": \"POST\",\n\t                        \"headers\": {\n\t                            \"Content-Type\": \"application/json\"\n\t                        },\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"errors\",\n\t\t\t\t\t\t\t\t\t\"section\": \"invite\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t        \"type\": \"errors\",\n\t\t\t\t\t\t        \"section\": \"invite\",\n\t\t\t\t\t\t        \"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t\t    \"system_error\": {\n\t\t\t\t\t\t\t\t\t      \"text\": \"Something went wrong. Please, try again\"\n\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n        \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                        \t\"method\": \"POST\",\n\t                        \"headers\": {\n\t                            \"Content-Type\": \"application/json\"\n\t                        },\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\t\"section\": \"login\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\"section\": \"login\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"email_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"forgot_password_text\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Forgot your password?\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"There is no user with this email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Contact the administrator\\nby email: admin@docu.com\\nor phone: 740 743 36 57\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Wrong password!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Get link sent to\\n{{ email }}\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"send_link_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Send link\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n        \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                        \t\"method\": \"POST\",\n\t                        \"headers\": {\n\t                            \"Content-Type\": \"application/json\"\n\t                        },\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\t\"section\": \"invite\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": null\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\"section\": \"invite\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 11111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Welcome!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"form_subtitle\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"name_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"First & Last Name\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Create password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"next_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Next\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"weak_password\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Weak password. Password must be 8+ characters\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"strong_password\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Strong password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n        \t\t\t\t\"path\": \"/jsonrpc/v1\",\n                        \t\"method\": \"POST\",\n\t                        \"headers\": {\n\t                            \"Content-Type\": \"application/json\"\n\t                        },\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"lookups\",\n\t\t\t\t\t\t\t\t\t\"section\": \"client\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": null\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"lookups\",\n\t\t\t\t\t\t\t\t\"section\": \"client\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 11111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": [\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"development_types\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"New construction\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Demolition\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"Extention\"\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"categories\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"Apartment buildings\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 4,\n\t\t\t\t\t\t\t\t                \"name\": \"Attic\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 5,\n\t\t\t\t\t\t\t\t                \"name\": \"Homes for the aged\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 6,\n\t\t\t\t\t\t\t\t                \"name\": \"Military Installation\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Business Premise\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 7,\n\t\t\t\t\t\t\t\t                \"name\": \"Business center\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 8,\n\t\t\t\t\t\t\t\t                \"name\": \"Car showroom\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 9,\n\t\t\t\t\t\t\t\t                \"name\": \"Convention center\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"Hotels and Restaurants\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 10,\n\t\t\t\t\t\t\t\t                \"name\": \"Hostel\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 12,\n\t\t\t\t\t\t\t\t                \"name\": \"Hotel\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"menu\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"Dashboard\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Leads\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"All Projects\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 4,\n\t\t\t\t\t\t\t\t            \"name\": \"All Tenders\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 5,\n\t\t\t\t\t\t\t\t            \"name\": \"All Companies\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 6,\n\t\t\t\t\t\t\t\t            \"name\": \"All Contacts\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 7,\n\t\t\t\t\t\t\t\t            \"name\": \"Sales/CRM\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 8,\n\t\t\t\t\t\t\t\t            \"name\": \"My Projects\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 9,\n\t\t\t\t\t\t\t\t            \"name\": \"My Companies\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 10,\n\t\t\t\t\t\t\t\t            \"name\": \"My Contacts\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 11,\n\t\t\t\t\t\t\t\t            \"name\": \"Administration\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 12,\n\t\t\t\t\t\t\t\t            \"name\": \"Company Profile\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 13,\n\t\t\t\t\t\t\t\t            \"name\": \"License Management\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 14,\n\t\t\t\t\t\t\t\t            \"name\": \"Subscription Plan\"\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/jsonrpc/v1\",\n                        \"method\": \"POST\",\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        \"body\": {\n                            \"method\": \"get_dict_versions\"\n                        }\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n                            \"jsonrpc\": \"2.0\",\n                            \"id\": \"request_id\",\n                            \"result\": {\n\t\t\t\t\t\t        \"errors\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"lookups\": {\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"vocabularies\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"global\": 1556181435,\n\t\t\t\t\t\t            \"leads_projects\": 1556181435,\n\t\t\t\t\t\t            \"leads_companies\": 1556181435,\n\t\t\t\t\t\t            \"sales_myprojects\": 1556181435\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n                        }\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"responses\": [\n                {\n                    \"is\": {\n                    \t\"body\": {\n\t                    \t\"jsonrpc\": \"2.0\",\n\t                    \t\"error\": {\n\t                    \t\t\"code\": 400,\n\t                    \t\t\"message\": \"Invalid params / No suitable predicate (for imposter)\"\n\t                    \t}, \"id\": \"request_id\"\n\t                    }\n\t                },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Auth-service Imposter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 8085,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"and\": [\n            {\n              \"equals\": {\n                \"path\": \"/test\",\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"Content-Type\": \"application/json\"\n                }\n              }\n            },\n            {\n              \"contains\": {\n                \"body\": {\n                  \"message\": \"ping\"\n                }\n              }\n            }\n          ]\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"id\": \"request_id\",\n              \"message\": \"pong\"\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"init_user\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": true\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    \n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"patch_user\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": true\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    \n    {\n      \"predicates\": [\n        { \"equals\":\n          {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"patch_user\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": true\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    \n    {\n      \"predicates\": [\n        { \"equals\":\n          {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"delete_user\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": true\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    \n    {\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"error\": {\n                \"code\": -32604,\n                \"message\": \"No suitable predicate\"\n              }, \"id\": \"request_id\"\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "DateTime imposter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 8085,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/utc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"utc_the_month_before\": \"\",\n              \"utc_the_day_before\": \"\",\n              \"utc_before\": \"\",\n              \"utc_now\": \"\",\n              \"utc_after\": \"\",\n              \"utc_the_day_after\": \"\",\n              \"utc_the_month_after\": \"\"\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { var now = new Date(); config.response.body.utc_now = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 1); config.response.body.utc_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 2); config.response.body.utc_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 48); config.response.body.utc_the_day_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 96); config.response.body.utc_the_day_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 750); config.response.body.utc_the_month_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 1500); config.response.body.utc_the_month_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z')}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "health check imposter :5001/hc",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 5001,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"and\": [\n            {\n              \"equals\": {\n                \"path\": \"/test\",\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"Content-Type\": \"application/json\"\n                }\n              }\n            },\n            {\n              \"contains\": {\n                \"body\": {\n                  \"message\": \"ping\"\n                }\n              }\n            }\n          ]\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"id\": \"request_id\",\n              \"message\": \"pong\"\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/hc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"status\": \"Healthy\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/utc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"utc_before\": \"\",\n              \"utc_now\": \"\",\n              \"utc_after\": \"\"\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { var now = new Date(); config.response.body.utc_now = now.toISOString(); now.setHours(now.getHours() - 2); config.response.body.utc_before = now.toISOString(); now.setHours(now.getHours() + 4); config.response.body.utc_after = now.toISOString()}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/5001\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "get imposter 8085",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:2525/imposters/8085",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters",
								"8085"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove imposter",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:2525/imposters/5001",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters",
								"5001"
							]
						},
						"description": "curl -X DELETE http://localhost:2525/imposters/8085"
					},
					"response": []
				},
				{
					"name": "get_dict_versions Dictionaries",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": 900,\n    \"method\": \"get_dict_versions\",\n    \"params\": {}\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_dict Dictionary",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": 0,\n  \"params\": {\n    \"type\": \"vocabularies\",\n    \"section\": \"login\",\n    \"language_id\": -1\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":1,\"message\":\"ping\"}"
						},
						"url": {
							"raw": "http://localhost:8085/test",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_settings (CRM imposter)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_settings\",\n  \"id\": \"912\",\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user (CRM imposter)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user\",\n  \"id\": \"912\",\n  \"params\": {\n        \"user_id\": 23\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/utc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8085/utc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"utc"
							]
						}
					},
					"response": []
				},
				{
					"name": "/wrong_utc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8085/wrong_utc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"wrong_utc"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:2525/imposters",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 8085,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"and\": [\n            {\n              \"equals\": {\n                \"path\": \"/test\",\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"Content-Type\": \"application/json\"\n                }\n              }\n            },\n            {\n              \"contains\": {\n                \"body\": {\n                  \"message\": \"ping\"\n                }\n              }\n            }\n          ]\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"id\": \"request_id\",\n              \"message\": \"pong\"\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_user\",\n              \"params\": {\n\t\t\t\t\"user_id\": 2\n\t\t\t  }\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n\t\t\t\t  \"data\": {\n\t\t\t\t    \"id\": 2,\n\t\t\t\t    \"email\": \"autotest-sharp@july.agency\",\n\t\t\t\t    \"name\": \"Vasja Pupkin\",\n\t\t\t\t    \"phone\": \"0501111111\",\n\t\t\t\t    \"client_id\": 2,\n\t\t\t\t    \"language_id\": 2,\n\t\t\t\t    \"license_id\": 2,\n\t\t\t\t    \"currency_id\": 1,\n\t\t\t\t    \"geo_division_id\": 1,\n\t\t\t\t    \"department_id\": 1,\n\t\t\t\t    \"position_id\": 1,\n\t\t\t\t    \"pic\": \"none\",\n\t\t\t\t    \"updates_notif_mode\": \"{object/req/schema(notif_mode)}\",\n\t\t\t\t    \"updates_notif_gateways\": [1,2],\n\t\t\t\t    \"status\": 3,\n\t\t\t\t    \"timezone\": \"{string/valid(TimeZoneInfo Class zone identifier)}\"\n\t\t\t\t  }\n\t\t\t\t}\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_user\",\n              \"params\": {\n\t\t\t\t\"user_id\": 5\n\t\t\t  }\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"error\": {\n\t\t\t\t  \"code\": 601,\n\t\t\t\t  \"message\": \"User not found\"\n\t\t\t\t}\n            }\n          },\n          \"_behaviors\": {\n            \"copy\": [{\n              \"from\": \"body\",\n              \"into\": \"request_id\",\n              \"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n            }]\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:2525/imposters/8086",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:2525/imposters/8085",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters",
								"8085"
							]
						}
					},
					"response": []
				},
				{
					"name": "https://postman-echo.com/get",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:6379",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"User ID is 1\"] = jsonData.userId === 789;",
									"tests[\"Post ID is 101\"] = jsonData.id === 101;",
									"tests[\"Body matches string\"] = responseBody.has(\"Content of my first POST request!\");",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"port\": 4545,\n\t\"protocol\": \"http\",\n\t\"stubs\": [{\n\t\t\"predicates\": [{\n\t\t\t\"and\": [{\n\t\t\t\t\n\t\t\t\t\"equals\": {\n\t\t\t\t\t\"path\": \"/test\",\n\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\t\n\t\t\t{\n\t\t\t\t\"contains\": {\"body\": {\"message\": \"ping\"}}\n\t\t\t}\n\t\t\t]\n\t\t\t}],\n\t\t\t\"responses\": [\n\t\t\t\t{ \"is\": {\"body\": {\"message\": \"pong\"}}}\n\t\t\t]\n\t\t},\n\n\t\t{\n\t\t\"predicates\": [{\n\t\t\t\"and\": [{\n\t\t\t\t\n\t\t\t\t\"equals\": {\n\t\t\t\t\t\"path\": \"/json-rpc-endpoint\",\n\t\t\t\t\t\"method\": \"POST\",\n\t\t\t\t\t\"headers\": {\"Content-Type\": \"application/json\"}\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"contains\": {\"body\": {\n    \t\t\t\t\"method\": \"get_dict_versions\"\n\t\t\t\t}}\n\t\t\t}\n\t\t\t]\n\t\t\t}],\n\t\t\t\"responses\": [\n\t\t\t\t{ \"is\": {\n\t\t\t\t\t\"headers\": {\n\t\t\t\t\t    \"Content-Type\": \"application/json\"\n\t\t\t\t\t},\n\t\t\t\t\t\"body\": {\n\t\t\t\t\t\t\"jsonrpc\": \"2.0\",\n    \t\t\t\t\t\"result\": {\n    \t\t\t\t\t\t\"dict_versions\": \"1.1.1\"\n    \t\t\t\t\t},\n    \t\t\t\t\t\"id\": \"0\"\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"responses\": [\n\t\t\t\t{ \"is\": {\"statusCode\": 402}}\n\t\t\t]\n\t\t}\n\t\t\n\t\t\n\t]\n}"
						},
						"url": {
							"raw": "http://localhost:6379",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "6379"
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ProxyCache Service :5001",
			"item": [
				{
					"name": "Dictionary service imposter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n    \"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\"\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                        \t\"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_dict\",\n\t\t\t\t\t\t  \"params\": {\n\t\t\t\t\t\t    \"language_id\": -1\n\t\t\t\t\t\t  }\n                    \t}\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\": {\n\t\t\t\t\t\t\t  \"type\": \"vocabularies\",\n\t\t\t\t\t\t\t  \"section\": \"login\",\n\t\t\t\t\t\t\t  \"dict\": [ {\n\t\t\t\t\t\t\t\t    \"version\": 2222222222,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"email_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"forgot_password_text\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Forgot your password?\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"There is no user with this email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Contact the administrator\\nby email: admin@docu.com\\nor phone: 740 743 36 57\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Wrong password!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Get link sent to\\n{{ email }}\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"send_link_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Send link\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n                \"body\": {\n                    \"method\": \"get_dict\",\n                    \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"errors\",\n\t\t\t\t\t\t\t\t\t\"section\": \"login\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t        \"type\": \"errors\",\n\t\t\t\t\t\t        \"section\": \"login\",\n\t\t\t\t\t\t        \"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"system_error\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Something went wrong. Please, try again\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"token_expired\": {\n\t\t\t\t\t\t\t\t        \"text\": \"The link is out of date.\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"user_not_found\": {\n\t\t\t\t\t\t\t\t        \"text\": \"User not found\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n                \"body\": {\n                    \"method\": \"get_dict\",\n                    \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"errors\",\n\t\t\t\t\t\t\t\t\t\"section\": \"invite\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t        \"type\": \"errors\",\n\t\t\t\t\t\t        \"section\": \"invite\",\n\t\t\t\t\t\t        \"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t\t    \"system_error\": {\n\t\t\t\t\t\t\t\t\t      \"text\": \"Something went wrong. Please, try again\"\n\t\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\t\"section\": \"login\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\"section\": \"login\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 1111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"email_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"forgot_password_text\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Forgot your password?\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"There is no user with this email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Contact the administrator\\nby email: admin@docu.com\\nor phone: 740 743 36 57\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Wrong password!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Get link sent to\\n{{ email }}\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"send_link_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Send link\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\t\"section\": \"invite\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": null\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\t\"section\": \"invite\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 11111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Welcome!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"form_subtitle\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"name_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"First & Last Name\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Create password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"next_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Next\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"weak_password\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Weak password. Password must be 8+ characters\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"strong_password\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Strong password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\t\"predicates\": [ {\n        \t\t\"and\": [ {\n        \t\t\t\"equals\": {\n\t                        \"body\": {\n\t                            \"method\": \"get_dict\",\n\t                            \"params\": {\n\t\t\t\t\t\t\t\t\t\"type\": \"lookups\",\n\t\t\t\t\t\t\t\t\t\"section\": \"client\"\n\t                            }\n\t                        }\n                \t\t}\n                \t},\n                \t{\t\"or\": [ {\n\t                \t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": 1\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"exists\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": false\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t},\n                \t\t{\n                \t\t\t\"equals\": {\n\t                \t\t\t\"body\": {\n\t                \t\t\t\t\"params\": {\n\t\t\t\t\t\t\t\t\t\t\"language_id\": null\n\t\t                            }\n\t\t                        }\n\t                \t\t}\n                \t\t}\n                \t\t]\n                \t}\n                \t]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t    \"result\": {\n\t\t\t\t\t\t\t\t\"type\": \"lookups\",\n\t\t\t\t\t\t\t\t\"section\": \"client\",\n\t\t\t\t\t\t\t\t\"dict\": {\n\t\t\t\t\t\t\t\t    \"version\": 11111111111,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": [\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"development_types\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"New construction\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Demolition\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"Extention\"\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"categories\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"Apartment buildings\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 4,\n\t\t\t\t\t\t\t\t                \"name\": \"Attic\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 5,\n\t\t\t\t\t\t\t\t                \"name\": \"Homes for the aged\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 6,\n\t\t\t\t\t\t\t\t                \"name\": \"Military Installation\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Business Premise\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 7,\n\t\t\t\t\t\t\t\t                \"name\": \"Business center\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 8,\n\t\t\t\t\t\t\t\t                \"name\": \"Car showroom\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 9,\n\t\t\t\t\t\t\t\t                \"name\": \"Convention center\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"Hotels and Restaurants\",\n\t\t\t\t\t\t\t\t            \"items\": [\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 10,\n\t\t\t\t\t\t\t\t                \"name\": \"Hostel\"\n\t\t\t\t\t\t\t\t              },\n\t\t\t\t\t\t\t\t              {\n\t\t\t\t\t\t\t\t                \"id\": 12,\n\t\t\t\t\t\t\t\t                \"name\": \"Hotel\"\n\t\t\t\t\t\t\t\t              }\n\t\t\t\t\t\t\t\t            ]\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      {\n\t\t\t\t\t\t\t\t        \"lookup\": \"menu\",\n\t\t\t\t\t\t\t\t        \"items\": [\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 1,\n\t\t\t\t\t\t\t\t            \"name\": \"Dashboard\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 2,\n\t\t\t\t\t\t\t\t            \"name\": \"Leads\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 3,\n\t\t\t\t\t\t\t\t            \"name\": \"All Projects\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 4,\n\t\t\t\t\t\t\t\t            \"name\": \"All Tenders\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 5,\n\t\t\t\t\t\t\t\t            \"name\": \"All Companies\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 6,\n\t\t\t\t\t\t\t\t            \"name\": \"All Contacts\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 7,\n\t\t\t\t\t\t\t\t            \"name\": \"Sales/CRM\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 8,\n\t\t\t\t\t\t\t\t            \"name\": \"My Projects\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 9,\n\t\t\t\t\t\t\t\t            \"name\": \"My Companies\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 10,\n\t\t\t\t\t\t\t\t            \"name\": \"My Contacts\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 11,\n\t\t\t\t\t\t\t\t            \"name\": \"Administration\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 12,\n\t\t\t\t\t\t\t\t            \"name\": \"Company Profile\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 13,\n\t\t\t\t\t\t\t\t            \"name\": \"License Management\"\n\t\t\t\t\t\t\t\t          },\n\t\t\t\t\t\t\t\t          {\n\t\t\t\t\t\t\t\t            \"id\": 14,\n\t\t\t\t\t\t\t\t            \"name\": \"Subscription Plan\"\n\t\t\t\t\t\t\t\t          }\n\t\t\t\t\t\t\t\t        ]\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t    ]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"body\": {\n                            \"method\": \"get_dict_versions\"\n                        }\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n                            \"jsonrpc\": \"2.0\",\n                            \"id\": \"request_id\",\n                            \"result\": {\n\t\t\t\t\t\t        \"errors\": {\n\t\t\t\t\t\t            \"login\": 1111111111,\n\t\t\t\t\t\t            \"invite\": 1111111111,\n\t\t\t\t\t\t            \"user_init\": 1111111111,\n\t\t\t\t\t\t            \"client_init\": 1111111111,\n\t\t\t\t\t\t            \"client\": 1111111111,\n\t\t\t\t\t\t            \"admin\": 1111111111\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"lookups\": {\n\t\t\t\t\t\t            \"client\": 1111111111,\n\t\t\t\t\t\t            \"support\": 1111111111,\n\t\t\t\t\t\t            \"admin\": 1111111111\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"vocabularies\": {\n\t\t\t\t\t\t            \"login\": 1111111111,\n\t\t\t\t\t\t            \"invite\": 1111111111,\n\t\t\t\t\t\t            \"user_init\": 1111111111,\n\t\t\t\t\t\t            \"client_init\": 1111111111,\n\t\t\t\t\t\t            \"global\": 1111111111,\n\t\t\t\t\t\t            \"leads_projects\": 1111111111,\n\t\t\t\t\t\t            \"leads_companies\": 1111111111,\n\t\t\t\t\t\t            \"sales_myprojects\": 1111111111\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n                        }\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        },\n        {\n            \"responses\": [\n                {\n                    \"is\": {\n                    \t\"body\": {\n\t                    \t\"jsonrpc\": \"2.0\",\n\t                    \t\"error\": {\n\t                    \t\t\"code\": -32602,\n\t                    \t\t\"message\": \"Invalid params / No suitable predicate (for imposter)\"\n\t                    \t}, \"id\": \"request_id\"\n\t                    }\n\t                },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_dict_version",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"911\",\n    \"method\": \"get_dict_versions\"\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_dict_versions\",\n    \"id\": \"{int/req}\",\n    \"params\": null\n}"
					},
					"response": []
				},
				{
					"name": "get_dict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.type).to.eql(\"vocabularies\");",
									"});",
									"",
									"pm.test(\"Body matches string '1556181435'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1556181435\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"912\",\n  \"params\": {\n    \"type\": \"vocabularies\",\n    \"section\": \"login\",\n    \"language_id\": null\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"type\": \"{string/req/enum(errors,lookups,vocabularies)}\",\n    \"section\": \"{string/req}\",\n    \"language_id\": \"{int}\"\n  }\n}"
					},
					"response": [
						{
							"name": "get_dict",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"912\",\n  \"params\": {\n    \"type\": \"vocabularies\",\n    \"section\": \"login\",\n    \"language_id\": \"123\"\n  }\n}"
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 31 Jul 2019 17:13:21 GMT"
								},
								{
									"key": "Server",
									"value": "Kestrel"
								},
								{
									"key": "Content-Length",
									"value": "0"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Gateway",
			"item": [
				{
					"name": "Imposter 8085",
					"item": [
						{
							"name": "Add imposter :8085",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n\t\"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\",\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                            \"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n                        \"copy\": [\n                            {\n                                \"from\": \"body\",\n                                \"into\": \"request_id\",\n                                \"using\": {\n                                    \"method\": \"jsonpath\",\n                                    \"selector\": \"$..id\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/.well-known/openid-configuration/jwks\"\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/jwk-set+json; charset=UTF-8\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t  \"keys\": [\n\t\t\t\t\t\t    {\n\t\t\t\t\t\t      \"kty\": \"RSA\",\n\t\t\t\t\t\t      \"e\": \"AQAB\",\n\t\t\t\t\t\t      \"use\": \"sig\",\n\t\t\t\t\t\t      \"kid\": \"NTAxZmMxNDMyZDg3MTU1ZGM0MzEzODJhZWI4NDNlZDU1OGFkNjFiMQ\",\n\t\t\t\t\t\t      \"alg\": \"RS256\",\n\t\t\t\t\t\t      \"n\": \"luZFdW1ynitztkWLC6xKegbRWxky-5P0p4ShYEOkHs30QI2VCuR6Qo4Bz5rTgLBrky03W1GAVrZxuvKRGj9V9-PmjdGtau4CTXu9pLLcqnruaczoSdvBYA3lS9a7zgFU0-s6kMl2EhB-rk7gXluEep7lIOenzfl2f6IoTKa2fVgVd3YKiSGsyL4tztS70vmmX121qm0sTJdKWP4HxXyqK9neolXI9fYyHOYILVNZ69z_73OOVhkh_mvTmWZLM7GM6sApmyLX6OXUp8z0pkY-vT_9-zRxxQs7GurC4_C1nK3rI_0ySUgGEafO1atNjYmlFN-M3tZX6nEcA6g94IavyQ\"\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t  ]\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        },\n\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/.well-known/openid-configuration\",\n                        \"method\": \"GET\"\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"issuer\": \"http://mountebank:8085\",\n\t\t\t\t\t\t    \"jwks_uri\": \"http://mountebank:8085/.well-known/openid-configuration/jwks\",\n\t\t\t\t\t\t    \"authorization_endpoint\": \"http://mountebank:8085/connect/authorize\",\n\t\t\t\t\t\t    \"token_endpoint\": \"http://mountebank:8085/connect/token\",\n\t\t\t\t\t\t    \"userinfo_endpoint\": \"http://mountebank:8085/connect/userinfo\",\n\t\t\t\t\t\t    \"end_session_endpoint\": \"http://mountebank:8085/connect/endsession\",\n\t\t\t\t\t\t    \"check_session_iframe\": \"http://mountebank:8085/connect/checksession\",\n\t\t\t\t\t\t    \"revocation_endpoint\": \"http://mountebank:8085/connect/revocation\",\n\t\t\t\t\t\t    \"introspection_endpoint\": \"http://mountebank:8085/connect/introspect\",\n\t\t\t\t\t\t    \"device_authorization_endpoint\": \"http://mountebank:8085/connect/deviceauthorization\",\n\t\t\t\t\t\t    \"frontchannel_logout_supported\": true,\n\t\t\t\t\t\t    \"frontchannel_logout_session_supported\": true,\n\t\t\t\t\t\t    \"backchannel_logout_supported\": true,\n\t\t\t\t\t\t    \"backchannel_logout_session_supported\": true,\n\t\t\t\t\t\t    \"scopes_supported\": [\n\t\t\t\t\t\t        \"openid\",\n\t\t\t\t\t\t        \"profile\",\n\t\t\t\t\t\t        \"microservice\",\n\t\t\t\t\t\t        \"offline_access\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"claims_supported\": [\n\t\t\t\t\t\t        \"sub\",\n\t\t\t\t\t\t        \"name\",\n\t\t\t\t\t\t        \"family_name\",\n\t\t\t\t\t\t        \"given_name\",\n\t\t\t\t\t\t        \"middle_name\",\n\t\t\t\t\t\t        \"nickname\",\n\t\t\t\t\t\t        \"preferred_username\",\n\t\t\t\t\t\t        \"profile\",\n\t\t\t\t\t\t        \"picture\",\n\t\t\t\t\t\t        \"website\",\n\t\t\t\t\t\t        \"gender\",\n\t\t\t\t\t\t        \"birthdate\",\n\t\t\t\t\t\t        \"zoneinfo\",\n\t\t\t\t\t\t        \"locale\",\n\t\t\t\t\t\t        \"updated_at\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"grant_types_supported\": [\n\t\t\t\t\t\t        \"authorization_code\",\n\t\t\t\t\t\t        \"client_credentials\",\n\t\t\t\t\t\t        \"refresh_token\",\n\t\t\t\t\t\t        \"implicit\",\n\t\t\t\t\t\t        \"password\",\n\t\t\t\t\t\t        \"urn:ietf:params:oauth:grant-type:device_code\",\n\t\t\t\t\t\t        \"passwordless_token\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"response_types_supported\": [\n\t\t\t\t\t\t        \"code\",\n\t\t\t\t\t\t        \"token\",\n\t\t\t\t\t\t        \"id_token\",\n\t\t\t\t\t\t        \"id_token token\",\n\t\t\t\t\t\t        \"code id_token\",\n\t\t\t\t\t\t        \"code token\",\n\t\t\t\t\t\t        \"code id_token token\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"response_modes_supported\": [\n\t\t\t\t\t\t        \"form_post\",\n\t\t\t\t\t\t        \"query\",\n\t\t\t\t\t\t        \"fragment\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"token_endpoint_auth_methods_supported\": [\n\t\t\t\t\t\t        \"client_secret_basic\",\n\t\t\t\t\t\t        \"client_secret_post\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"subject_types_supported\": [\n\t\t\t\t\t\t        \"public\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"id_token_signing_alg_values_supported\": [\n\t\t\t\t\t\t        \"RS256\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"code_challenge_methods_supported\": [\n\t\t\t\t\t\t        \"plain\",\n\t\t\t\t\t\t        \"S256\"\n\t\t\t\t\t\t    ]\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        },\n\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"body\": {\n                        \t\"grant_type\": \"password\"\n                        }\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t  \"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjA2OWM3Y2Q1MDJkYWVkMTk0OGE2MzdiNTY1ZGJiODllIiwidHlwIjoiSldUIn0.eyJuYmYiOjE1Njc1MTU1NTAsImV4cCI6MTU2NzUxNTYxMCwiaXNzIjoiaHR0cDovL3NoYXJwLmF1dGg6NTAwMCIsImF1ZCI6WyJodHRwOi8vc2hhcnAuYXV0aDo1MDAwL3Jlc291cmNlcyIsImFwaTEiXSwiY2xpZW50X2lkIjoiZ2F0ZXdheSIsInN1YiI6IjEiLCJhdXRoX3RpbWUiOjE1Njc1MTU1MzIsImlkcCI6ImxvY2FsIiwidHlwZSI6InVzciIsInVzZXJfaWQiOjEsInVzZXJfc3RhdHVzIjoxLCJlbWFpbCI6ImFkbWluQGRvY3Uuc2UiLCJjbGllbnRfYWN0aXZhdGVkIjp0cnVlLCJsYW5ndWFnZV9pZCI6MSwibGljZW5zZV9pZCI6MSwiY3VycmVuY3lfaWQiOjEsImNvbXBvbmVudHMiOiIxLDIsMyIsInZlcnNpb25zOnVzZXIiOjEyMzQ1Njc4OTAsInZlcnNpb25zOmNsaWVudCI6MTIzNDU2Nzg5MCwidmVyc2lvbnM6bGljZW5zZSI6MTIzNDU2Nzg5MCwidmVyc2lvbnM6cGFja2FnZSI6MTIzNDU2Nzg5MCwic2NvcGUiOlsib3BlbmlkIiwicHJvZmlsZSIsImFwaTEiLCJvZmZsaW5lX2FjY2VzcyJdLCJhbXIiOlsicGFzc3dvcmQiXX0.B1QChKiSgdLl-Slgt71jyY6X6Hl4LFRKZuuxqlzyr-AFn7RxsYipEVQ9hTSjA04p8pm-ITY1lBQ5PHzpxsklETmkP6i9RNvtcK0CaKQ7qhGvEiiUJAPGkPwlqfy6pAQeq5_Lo0agdrtIkwlVGlWOqPp1-hrPgsjAoAr6klkby-BPa02oHz2CXswhDkCg7Betf4_YCjzAMjWaSxxdwfrDk9jWOlUM-V2_p4sqzYoiLGxXZgFEcT6fK4uBNQ8NHzpxfpf7LjsQYp4vZoKziuMajhbyAR41gdOISK_HFjcM2blhIqboZpGb5WgJ8HcJ7ZCpw2b13Ey3IBLIIRNsMdzO4w\",\n\t\t\t\t\t\t  \"expires_in\": 60,\n\t\t\t\t\t\t  \"token_type\": \"Bearer\",\n\t\t\t\t\t\t  \"refresh_token\": \"2a04d2aecd9b5e54e8ee40a8c0b5b0567b66e18ef3031bcad88a859fa4c13095\"\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                \t\"and\": [\n                \t\t{ \"equals\": {\n\t                        \"path\": \"/connect/token\",\n\t                        \"method\": \"POST\"\n\t                    }\n\t                    },\n\t                    { \"or\": [{\n\t                    \t\"contains\": {\n\t                    \t\t\"body\": \"grant_type=password\"\n\t                    \t}},\n\t                       \t{\n                       \t\t\"contains\": {\n                    \t\t\t\"body\": \"grant_type=refresh_token\"\n\t                    \t}}\n\t                    ]\n\t                    }\n\t                ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n                        \t\"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjA2OWM3Y2Q1MDJkYWVkMTk0OGE2MzdiNTY1ZGJiODllIiwidHlwIjoiSldUIn0.eyJuYmYiOjE1NjE1Mzk4MTIsImV4cCI6MTU2MTUzOTg3MiwiaXNzIjoiaHR0cDovL3NoYXJwLmF1dGg6NTAwMCIsImF1ZCI6WyJodHRwOi8vc2hhcnAuYXV0aDo1MDAwL3Jlc291cmNlcyIsIm1pY3Jvc2VydmljZSJdLCJjbGllbnRfaWQiOiJzcnYiLCJzdWIiOiIxIiwiYXV0aF90aW1lIjoxNTYxNTM5ODEyLCJpZHAiOiJsb2NhbCIsInNoYXJwX2F0dHJzIjoiW3tcImF0dHJpYnV0ZVwiOlwidHlwZVwiLFwidHlwZVwiOntcIk5hbWVcIjpcInN0cmluZ1wiLFwiSWRcIjoyfSxcInZhbHVlXCI6XCJ1c3JcIixcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19LHtcImF0dHJpYnV0ZVwiOlwiaWRcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJudW1lcmljXCIsXCJJZFwiOjF9LFwidmFsdWVcIjoxLFwic291cmNlXCI6e1wiTmFtZVwiOlwiU1VCSkVDVFwiLFwiSWRcIjoxfX0se1wiYXR0cmlidXRlXCI6XCJlbWFpbFwiLFwidHlwZVwiOntcIk5hbWVcIjpcInN0cmluZ1wiLFwiSWRcIjoyfSxcInZhbHVlXCI6XCJpbml0QGRvY3Uuc2VcIixcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19LHtcImF0dHJpYnV0ZVwiOlwiY2xpZW50SWRcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJudW1lcmljXCIsXCJJZFwiOjF9LFwidmFsdWVcIjoxLFwic291cmNlXCI6e1wiTmFtZVwiOlwiU1VCSkVDVFwiLFwiSWRcIjoxfX0se1wiYXR0cmlidXRlXCI6XCJsaWNlbnNlSWRcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJudW1lcmljXCIsXCJJZFwiOjF9LFwidmFsdWVcIjoxLFwic291cmNlXCI6e1wiTmFtZVwiOlwiU1VCSkVDVFwiLFwiSWRcIjoxfX0se1wiYXR0cmlidXRlXCI6XCJsYW5ndWFnZUlkXCIsXCJ0eXBlXCI6e1wiTmFtZVwiOlwibnVtZXJpY1wiLFwiSWRcIjoxfSxcInZhbHVlXCI6MSxcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19LHtcImF0dHJpYnV0ZVwiOlwiY3VycmVuY3lJZFwiLFwidHlwZVwiOntcIk5hbWVcIjpcIm51bWVyaWNcIixcIklkXCI6MX0sXCJ2YWx1ZVwiOjEsXCJzb3VyY2VcIjp7XCJOYW1lXCI6XCJTVUJKRUNUXCIsXCJJZFwiOjF9fSx7XCJhdHRyaWJ1dGVcIjpcImNvbXBvbmVudHNcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJhcnJheVwiLFwiSWRcIjo2fSxcInZhbHVlXCI6W10sXCJzb3VyY2VcIjp7XCJOYW1lXCI6XCJTVUJKRUNUXCIsXCJJZFwiOjF9fSx7XCJhdHRyaWJ1dGVcIjpcInZlcnNpb25Vc2VyXCIsXCJ0eXBlXCI6e1wiTmFtZVwiOlwidGltZXN0YW1wXCIsXCJJZFwiOjR9LFwidmFsdWVcIjoxNTYxNTM1OTAzLFwic291cmNlXCI6e1wiTmFtZVwiOlwiU1VCSkVDVFwiLFwiSWRcIjoxfX0se1wiYXR0cmlidXRlXCI6XCJ2ZXJzaW9uQ2xpZW50XCIsXCJ0eXBlXCI6e1wiTmFtZVwiOlwidGltZXN0YW1wXCIsXCJJZFwiOjR9LFwidmFsdWVcIjoxNTYxNTM1Nzc0LFwic291cmNlXCI6e1wiTmFtZVwiOlwiU1VCSkVDVFwiLFwiSWRcIjoxfX0se1wiYXR0cmlidXRlXCI6XCJ2ZXJzaW9uTGljZW5zZVwiLFwidHlwZVwiOntcIk5hbWVcIjpcInRpbWVzdGFtcFwiLFwiSWRcIjo0fSxcInZhbHVlXCI6MTU2MTM5NTg5NSxcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19XSIsInNjb3BlIjpbIm1pY3Jvc2VydmljZSIsIm9mZmxpbmVfYWNjZXNzIl0sImFtciI6WyJwYXNzd29yZCJdfQ.RaGUPk8oE4sdgHaLLrGoGr13VJtLnCYas9jZxA0PSPkbS3FJRPQ0sf8ipXl9l78jFZ4JSlEbNCjfiAhRq2TUMj1GoYQPXCklAe0AsQ7QBN59GlLuZdmRjGxOvMIHuZFT1iDY_OJT11-h6ey3cX4Vq9HEQQXLEIq2leH-pFfiK0O1tkFtvs0caPWS6447uoAJr9Qc9aWs2xOlTP9dp1qc48Q2omoaCfmv140c8KCU5fvs2P7ft6ByWZQ8UJtTVCd1PmYmWZyTUgPMZYUXavubCpGNCUfhvkdgOBzx0Ur5xICisO__-VsEmKOp1mX0aIMY9XvDHMYND5ZFLNasisZ7WA\",\n\t\t\t\t\t\t    \"expires_in\": 60,\n\t\t\t\t\t\t    \"token_type\": \"Bearer\",\n\t\t\t\t\t\t    \"refresh_token\": \"9bebae42f82618b8b295e4ec0f19e07a7599f94153c3509389bb0a81c1b98e64\"\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                \t\"and\": [\n                \t\t{ \"equals\": {\n\t                        \"path\": \"/connect/token\",\n\t                        \"method\": \"POST\"\n\t                    }\n\t                    },\n\t                    { \"contains\": {\n\t                    \t\"body\": \"grant_type=client_credentials\"\n\t                    }\n\t                    }\n\t                ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t\t\"access_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjA2OWM3Y2Q1MDJkYWVkMTk0OGE2MzdiNTY1ZGJiODllIiwidHlwIjoiSldUIn0.eyJuYmYiOjE1NjE1NDE3ODQsImV4cCI6MTU2MTU0MTg0NCwiaXNzIjoiaHR0cDovL3NoYXJwLmF1dGg6NTAwMCIsImF1ZCI6WyJodHRwOi8vc2hhcnAuYXV0aDo1MDAwL3Jlc291cmNlcyIsIm1pY3Jvc2VydmljZSJdLCJjbGllbnRfaWQiOiJzcnYiLCJzaGFycF9hdHRycyI6Ilt7XCJhdHRyaWJ1dGVcIjpcInR5cGVcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJzdHJpbmdcIixcIklkXCI6Mn0sXCJ2YWx1ZVwiOlwic3J2XCIsXCJzb3VyY2VcIjp7XCJOYW1lXCI6XCJTVUJKRUNUXCIsXCJJZFwiOjF9fSx7XCJhdHRyaWJ1dGVcIjpcImNsaWVudF9pZFwiLFwidHlwZVwiOntcIk5hbWVcIjpcInN0cmluZ1wiLFwiSWRcIjoyfSxcInZhbHVlXCI6XCJzcnZcIixcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19LHtcImF0dHJpYnV0ZVwiOlwiY2xpZW50X25hbWVcIixcInR5cGVcIjp7XCJOYW1lXCI6XCJzdHJpbmdcIixcIklkXCI6Mn0sXCJ2YWx1ZVwiOlwiVXNlciBjbGllbnRcIixcInNvdXJjZVwiOntcIk5hbWVcIjpcIlNVQkpFQ1RcIixcIklkXCI6MX19XSIsInNjb3BlIjpbIm1pY3Jvc2VydmljZSJdfQ.gOPnJEKmRHoSATGxDkFGFaoy8zACQMjjtU4u3MmlSHIshsvTCgsBbmbYHhTJLVg0XL_1u_IHdS1kCbwRkZuroUIeSS3Bg3tI8hzvET1fwkADmvTq-Stpy27NFa5gvg1p4bg1qKBtieUtrxw0V-ka_MCanuonTM6fBhsXQCTSzkQx1jFqQbsmuPqYCjIY95QE9DKdUmfqVvZ144XqTqy4UWvV-78Wwg_WWR_0vWT9En4kMRmVjOxIqOO9s0KWUfITHe7owmo6K0kSbiq31M9sXsdxu6IFFMnQ1sbgk9IxOy-LrfmUXisCEQNGzi9Z1ZEEMjmFcCZgoiEV6WhEqVvJhg\",\n\t\t\t\t\t\t    \"expires_in\": 60,\n\t\t\t\t\t\t    \"token_type\": \"Bearer\"\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/jsonrpc/v1\",\n                        \"method\": \"POST\",\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        \"body\": {\n                          \"method\": \"get_dict\",\n\t\t\t\t\t\t  \"params\": {\n\t\t\t\t\t\t\t\"type\": \"vocabularies\",\n\t\t\t\t\t\t\t\"section\": \"login\",\n\t\t\t\t\t\t\t\"language_id\": 1\n\t\t\t\t\t\t  }\n                    \t}\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\": {\n\t\t\t\t\t\t\t  \"type\": \"vocabularies\",\n\t\t\t\t\t\t\t  \"section\": \"login\",\n\t\t\t\t\t\t\t  \"dict\": [ {\n\t\t\t\t\t\t\t\t    \"version\": 2222222222,\n\t\t\t\t\t\t\t\t    \"language_id\": 1,\n\t\t\t\t\t\t\t\t    \"items\": {\n\t\t\t\t\t\t\t\t      \"form_title\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"email_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"password_placeholder\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Password\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"forgot_password_text\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Forgot your password?\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"login_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Login\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"There is no user with this email\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_email_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Contact the administrator\\nby email: admin@docu.com\\nor phone: 740 743 36 57\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_alert\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Wrong password!\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"wrong_password_hint\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Get link sent to\\n{{ email }}\"\n\t\t\t\t\t\t\t\t      },\n\t\t\t\t\t\t\t\t      \"send_link_button\": {\n\t\t\t\t\t\t\t\t        \"text\": \"Send link\"\n\t\t\t\t\t\t\t\t      }\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n                \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n                    }\n                }\n            ]\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:2525/imposters",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "2525",
									"path": [
										"imposters"
									]
								}
							},
							"response": []
						},
						{
							"name": "All services imposter :8085",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n\t\"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\",\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                            \"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n                        \"copy\": [\n                            {\n                                \"from\": \"body\",\n                                \"into\": \"request_id\",\n                                \"using\": {\n                                    \"method\": \"jsonpath\",\n                                    \"selector\": \"$..id\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        \"body\": {\n                            \"method\": \"get_dict_versions\"\n                        }\n                    }\n                }\n            ],\n            \"responses\": [\n\t        \t{\n\t        \t\t\"is\": {\n\t                \t\"headers\": {\n\t\t                    \"Content-Type\": \"application/json\",\n\t\t                    \"Accept\": \"application/json\"\n\t\t\t            },\n\t\t\t            \"body\": {\n\t\t\t\t            \"jsonrpc\": \"2.0\",\n\t\t                    \"id\": \"request_id\",\n\t\t                    \"result\": {\n\t\t\t\t\t\t        \"errors\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"lookups\": {\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"vocabularies\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"global\": 1556181435,\n\t\t\t\t\t\t            \"leads_projects\": 1556181435,\n\t\t\t\t\t\t            \"leads_companies\": 1556181435,\n\t\t\t\t\t\t            \"sales_myprojects\": 1556181435\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t            }\n\t            \t},\n\t\t            \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n\t\t        \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n\t        \t\t}\n\t        \t}\n            ]\n        },\n        \n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"body\": {\n                    \t}\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\":  {\n\t\t\t\t\t\t\t\t\"request_body\": { }\n\t\t\t\t\t\t\t}\n\t                    }\n\t                },\n                    \"_behaviors\": {\n\t\t\t            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.response.body.result.request_body = JSON.parse(config.request.body); }\"\n                    }\n            \t}\n            ]\n        },\n        \n        {\n            \"predicates\": [\n                {\n                  \"or\": [{\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"body\": {\n                          \"method\": \"get_client_users\",\n\t\t\t\t\t\t  \"params\": {\n\t\t\t\t\t\t\t\"client_id\": 16,\n\t\t\t\t\t\t\t\"query\": {\n\t\t\t\t\t\t\t    \"filter\": {\n\t\t\t\t\t\t\t\t  \"id\": {\n\t\t\t\t\t\t\t\t    \"in\": [\"1\",\"2\"]\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  }\n\n                    \t}\n                    }},{\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"body\": {\n                          \"method\": \"get_client_users\",\n\t\t\t\t\t\t  \"params\": {\n\t\t\t\t\t\t\t\"client_id\": 16,\n\t\t\t\t\t\t\t\"query\": {\n\t\t\t\t\t\t\t    \"filter\": {\n\t\t\t\t\t\t\t\t  \"id\": {\n\t\t\t\t\t\t\t\t    \"in\": [1,2]\n\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t  }\n\n                    \t}\n                    }}\n                  ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\":  {\n\t\t\t\t\t\t\t  \"data\": [ ],\n\t\t\t\t\t\t\t  \"meta\": { }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n                    }\n                }\n            ]\n        },\n        \n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"method\": \"POST\",\n                        \"body\": {\n                        \t\"method\": \"generate_token\",\n\t\t\t\t\t\t\t\"params\": {\n\t\t\t\t\t\t\t  \"data\": {\n\t\t\t\t\t\t\t\t\"email\": \"aaaaa@docu.se\",\n\t\t\t\t\t\t\t\t\"id\": 2,\n\t\t\t\t\t\t\t\t\"token_type\":3\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t}\n\n                    \t}\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"result\": {\n\t\t\t\t\t\t\t  \"id\": 2,\n\t\t\t\t\t\t\t  \"token\": \"token_token_token\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n                    }\n                }\n            ]\n        },\n        \n        {\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"jsonrpc\": \"2.0\",\n\t\t\t\t\t\t    \"id\": \"request_id\",\n\t\t\t\t\t\t\t\"error\": {\n\t\t\t\t\t\t\t\t\"code\":500,\n\t\t\t\t\t\t\t\t\"message\": \"No matches with any imposter predicate.\",\n\t\t\t\t\t\t\t\t\"data\": {\n\t\t\t\t\t\t\t\t\t\"request\":{}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    },\n                    \"_behaviors\": {\n\t\t\t            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.response.body.error.data.request = JSON.parse(config.request.body);}\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:2525/imposters",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "2525",
									"path": [
										"imposters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add discovery endpoint imposter",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\",\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                            \"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n                        \"copy\": [\n                            {\n                                \"from\": \"body\",\n                                \"into\": \"request_id\",\n                                \"using\": {\n                                    \"method\": \"jsonpath\",\n                                    \"selector\": \"$..id\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/.well-known/openid-configuration\",\n                        \"method\": \"GET\"\n                    }\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"headers\": {\n                            \"Content-Type\": \"application/json\",\n                            \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n\t\t\t\t\t\t    \"issuer\": \"http://sharp.auth:5000\",\n\t\t\t\t\t\t    \"jwks_uri\": \"http://sharp.auth:5000/.well-known/openid-configuration/jwks\",\n\t\t\t\t\t\t    \"authorization_endpoint\": \"http://sharp.auth:5000/connect/authorize\",\n\t\t\t\t\t\t    \"token_endpoint\": \"http://sharp.auth:5000/connect/token\",\n\t\t\t\t\t\t    \"userinfo_endpoint\": \"http://sharp.auth:5000/connect/userinfo\",\n\t\t\t\t\t\t    \"end_session_endpoint\": \"http://sharp.auth:5000/connect/endsession\",\n\t\t\t\t\t\t    \"check_session_iframe\": \"http://sharp.auth:5000/connect/checksession\",\n\t\t\t\t\t\t    \"revocation_endpoint\": \"http://sharp.auth:5000/connect/revocation\",\n\t\t\t\t\t\t    \"introspection_endpoint\": \"http://sharp.auth:5000/connect/introspect\",\n\t\t\t\t\t\t    \"device_authorization_endpoint\": \"http://sharp.auth:5000/connect/deviceauthorization\",\n\t\t\t\t\t\t    \"frontchannel_logout_supported\": true,\n\t\t\t\t\t\t    \"frontchannel_logout_session_supported\": true,\n\t\t\t\t\t\t    \"backchannel_logout_supported\": true,\n\t\t\t\t\t\t    \"backchannel_logout_session_supported\": true,\n\t\t\t\t\t\t    \"scopes_supported\": [\n\t\t\t\t\t\t        \"openid\",\n\t\t\t\t\t\t        \"profile\",\n\t\t\t\t\t\t        \"microservice\",\n\t\t\t\t\t\t        \"offline_access\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"claims_supported\": [\n\t\t\t\t\t\t        \"sub\",\n\t\t\t\t\t\t        \"name\",\n\t\t\t\t\t\t        \"family_name\",\n\t\t\t\t\t\t        \"given_name\",\n\t\t\t\t\t\t        \"middle_name\",\n\t\t\t\t\t\t        \"nickname\",\n\t\t\t\t\t\t        \"preferred_username\",\n\t\t\t\t\t\t        \"profile\",\n\t\t\t\t\t\t        \"picture\",\n\t\t\t\t\t\t        \"website\",\n\t\t\t\t\t\t        \"gender\",\n\t\t\t\t\t\t        \"birthdate\",\n\t\t\t\t\t\t        \"zoneinfo\",\n\t\t\t\t\t\t        \"locale\",\n\t\t\t\t\t\t        \"updated_at\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"grant_types_supported\": [\n\t\t\t\t\t\t        \"authorization_code\",\n\t\t\t\t\t\t        \"client_credentials\",\n\t\t\t\t\t\t        \"refresh_token\",\n\t\t\t\t\t\t        \"implicit\",\n\t\t\t\t\t\t        \"password\",\n\t\t\t\t\t\t        \"urn:ietf:params:oauth:grant-type:device_code\",\n\t\t\t\t\t\t        \"passwordless_token\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"response_types_supported\": [\n\t\t\t\t\t\t        \"code\",\n\t\t\t\t\t\t        \"token\",\n\t\t\t\t\t\t        \"id_token\",\n\t\t\t\t\t\t        \"id_token token\",\n\t\t\t\t\t\t        \"code id_token\",\n\t\t\t\t\t\t        \"code token\",\n\t\t\t\t\t\t        \"code id_token token\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"response_modes_supported\": [\n\t\t\t\t\t\t        \"form_post\",\n\t\t\t\t\t\t        \"query\",\n\t\t\t\t\t\t        \"fragment\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"token_endpoint_auth_methods_supported\": [\n\t\t\t\t\t\t        \"client_secret_basic\",\n\t\t\t\t\t\t        \"client_secret_post\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"subject_types_supported\": [\n\t\t\t\t\t\t        \"public\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"id_token_signing_alg_values_supported\": [\n\t\t\t\t\t\t        \"RS256\"\n\t\t\t\t\t\t    ],\n\t\t\t\t\t\t    \"code_challenge_methods_supported\": [\n\t\t\t\t\t\t        \"plain\",\n\t\t\t\t\t\t        \"S256\"\n\t\t\t\t\t\t    ]\n\t\t\t\t\t\t}\n                    }\n                }\n            ]\n        }\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:2525/imposters",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "2525",
									"path": [
										"imposters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Imposter to try repeat",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 7810,\n    \"numberOfRequests\": 0,\n\t\"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n        {\n            \"predicates\": [\n                {\n                    \"and\": [\n                        {\n                            \"equals\": {\n                                \"path\": \"/test\",\n                                \"method\": \"POST\",\n                                \"headers\": {\n                                    \"Content-Type\": \"application/json\"\n                                }\n                            }\n                        },\n                        {\n                            \"contains\": {\n                                \"body\": {\n                                    \"message\": \"ping\"\n                                }\n                            }\n                        }\n                    ]\n                }\n            ],\n            \"responses\": [\n                {\n                    \"is\": {\n                        \"body\": {\n                            \"id\": \"request_id\",\n                            \"message\": \"pong\"\n                        }\n                    },\n                    \"_behaviors\": {\n                        \"copy\": [\n                            {\n                                \"from\": \"body\",\n                                \"into\": \"request_id\",\n                                \"using\": {\n                                    \"method\": \"jsonpath\",\n                                    \"selector\": \"$..id\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            ]\n        },\n\n        {\n            \"predicates\": [\n                {\n                    \"equals\": {\n                        \"path\": \"/jsonrpc/v1\",\n                        \"method\": \"POST\",\n                        \"body\": {\n                            \"method\": \"get_dict_versions\"\n                        }\n                    }\n                }\n            ],\n\t\t    \"responses\": [\n\t\t        {\n\t\t          \"is\": { },\n\t\t          \"_behaviors\": {\n\t\t            \"repeat\": 5\n\t               }\n\t\t        },\n\t        \t{\n\t        \t\t\"is\": {\n\t                \t\"headers\": {\n\t\t                    \"Content-Type\": \"application/json\",\n\t\t                    \"Accept\": \"application/json\"\n\t\t\t                },\n\t\t\t            \"body\": {\n\t\t\t\t            \"jsonrpc\": \"2.0\",\n\t\t                    \"id\": \"request_id\",\n\t\t                    \"result\": {\n\t\t\t\t\t\t        \"errors\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"lookups\": {\n\t\t\t\t\t\t            \"client\": 1556181435,\n\t\t\t\t\t\t            \"admin\": 1556181435\n\t\t\t\t\t\t        },\n\t\t\t\t\t\t        \"vocabularies\": {\n\t\t\t\t\t\t            \"login\": 1556181435,\n\t\t\t\t\t\t            \"global\": 1556181435,\n\t\t\t\t\t\t            \"leads_projects\": 1556181435,\n\t\t\t\t\t\t            \"leads_companies\": 1556181435,\n\t\t\t\t\t\t            \"sales_myprojects\": 1556181435\n\t\t\t\t\t\t        }\n\t\t\t\t\t\t    }\n\t\t\t            }\n\t            \t},\n\t\t            \"_behaviors\": {\n\t\t\t            \"copy\": [{\n\t\t\t                \"from\": \"body\",\n\t\t\t                \"into\": \"request_id\",\n\t\t        \t\t\t\"using\": { \"method\": \"jsonpath\", \"selector\": \"$..id\" }\n\t\t\t            }]\n\t        \t\t}\n\t        \t}\n\t    \t]\n\t\t}\n    ],\n    \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/7810\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "http://localhost:2525/imposters",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "2525",
									"path": [
										"imposters"
									]
								}
							},
							"response": []
						},
						{
							"name": "try repeat :7810",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:7810/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "7810",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Routes",
					"item": [
						{
							"name": "generate_token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"email\": \"aaaaa@docu.se\",\n\t\"id\": 2,\n\t\"token_type\": 3\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/token",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_dict",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/dict/?type=vocabularies&section=login&language_id=-1\t",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"dict",
										""
									],
									"query": [
										{
											"key": "type",
											"value": "vocabularies"
										},
										{
											"key": "section",
											"value": "login"
										},
										{
											"key": "language_id",
											"value": "-1\t"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?offset=0&limit=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (q to search)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?q=foo",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "q",
											"value": "foo"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (sort d)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?sort=price:d",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "sort",
											"value": "price:d"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (sort a)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?sort=name:a",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "sort",
											"value": "name:a"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (sort c)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?sort=license_id:c:[1,5,6,3,7]",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "sort",
											"value": "license_id:c:[1,5,6,3,7]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (all sorts together)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?offset=0&limit=10&sort=price:a,name:d,license_id:c:[1,5,6,3,4]",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "sort",
											"value": "price:a,name:d,license_id:c:[1,5,6,3,4]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (to check no match with predicate)",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"id\": 910,\n    \"method\": \"get_project_list\",\n    \"params\": {\"query\": \"query\"}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8085/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8085",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (fields)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?fields=name,email,22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "fields",
											"value": "name,email,22"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_project_list (filter)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/projects?filter=price:gte:100,price:lte:200,category_id:in:[10,11,12],adm_unit:eq:5,material_id:all:[4,6]",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"projects"
									],
									"query": [
										{
											"key": "filter",
											"value": "price:gte:100,price:lte:200,category_id:in:[10,11,12],adm_unit:eq:5,material_id:all:[4,6]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user_settings",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/me/settings",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"me",
										"settings"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_client",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_client_lookups",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/3/lookups",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"3",
										"lookups"
									]
								}
							},
							"response": []
						},
						{
							"name": "get_client_users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/16/users?filter=id:in:[1,2]",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"16",
										"users"
									],
									"query": [
										{
											"key": "filter",
											"value": "id:in:[1,2]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "init_user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Ivan\",\n  \"password\": \"ghbdtn\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/users/4/init",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"users",
										"4",
										"init"
									]
								}
							},
							"response": []
						},
						{
							"name": "activate_user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Length",
										"value": "0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/users/5/activate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"users",
										"5",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "activate_client",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Length",
										"type": "text",
										"value": "0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/6/activate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"6",
										"activate"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_user",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"new name\",\n  \"phone\": \"new phone\",\n  \"position_id\": 61,\n  \"geo_division_id\": 62,\n  \"department_id\": 63,\n  \"updates_notif_mode\": {\n\t\"sending_mode\": 1,\n\t\"day_of_week\": 2,\n\t\"time\": \"15:18:07\",\n\t\"datetime\": \"2019-08-22T16:47:13.8345147\"\n  },\n  \"updates_notif_gateways\": [1, 2, 3],\n  \"language_id\": 1,\n  \"currency_id\": 2,\n  \"pic\": null,\n  \"status\": 3,\n  \"timezone\": \"EET\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/users/7",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"users",
										"7"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_client",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"package_id\": 2,\n  \"organization_id\": 3,\n  \"history\": 4,\n  \"activated\": true,\n  \"activated_at\": \"2019-08-22T16:47:13.8345147\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/8",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"8"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_client_position",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/9/positions/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"9",
										"positions",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_client_department",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/10/departments/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"10",
										"departments",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_client_geo_division",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/11/geo_divisions/3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"11",
										"geo_divisions",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_position",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new_position\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/9/positions",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"9",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_department",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new_client_department\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/10/departments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"10",
										"departments"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_geo_division",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new_client_geo_division\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/11/geo_divisions",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"11",
										"geo_divisions"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_company_folder",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"new_client_company_folder\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/12/company_folders",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"12",
										"company_folders"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_company_role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"company_role_id\": 5\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/13/company_roles",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"13",
										"company_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_partner_company_role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"company_role_id\": 6\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/14/partner_company_roles",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"14",
										"partner_company_roles"
									]
								}
							},
							"response": []
						},
						{
							"name": "post_client_contact",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contact_type_id\": 7,\n\t\"value\": \"+380501111111\"\n}"
								},
								"url": {
									"raw": "http://localhost:8082/api/v1/clients/15/contacts",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"clients",
										"15",
										"contacts"
									]
								}
							},
							"response": []
						},
						{
							"name": "generate_token",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "http://localhost:8082/api/v1/client/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"api",
										"v1",
										"client",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Discovery Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:8082/.well-known/openid-configuration",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								".well-known",
								"openid-configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "token endpoint (grant_type=password)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ghbdtn",
									"type": "text"
								},
								{
									"key": "username",
									"value": "Vasja",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8085/connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "token endpoint (grant_type=client_credentials)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8085/connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "token endpoint (grant_type=password)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "http://localhost:8085/connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "validate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "4f0395c0-cd00-4184-aa9f-073a07d88429",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \t\"component\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/validate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "cdd81bc2-2d23-425f-9bd2-894a5230cc65",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \t\"component\": 1\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/me/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"me",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "idmp",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \t\"component\": \"aaaa\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/idmp",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"idmp"
							]
						}
					},
					"response": []
				},
				{
					"name": "timezones",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/timezones",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"timezones"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token (client_credentials)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "secret",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://demo.identityserver.io/connect/token",
							"protocol": "https",
							"host": [
								"demo",
								"identityserver",
								"io"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token (client_credentials) Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_id",
									"value": "1",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "secret",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ghbdtn",
									"type": "text"
								},
								{
									"key": "username",
									"value": "Vasja",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"autotest-smart-bugp@july.agency\",\n    \"password\": \"ghbdtn\"\n}"
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/auth",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserService",
			"item": [
				{
					"name": "Imposter for Userservice",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n          \"protocol\": \"http\",\n          \"port\": 8085,\n          \"numberOfRequests\": 0,\n          \"recordRequests\": true,\n          \"requests\": [],\n          \"stubs\": [\n              {\n                  \"predicates\": [\n                      {\n                          \"and\": [\n                              {\n                                  \"equals\": {\n                                      \"path\": \"/test\",\n                                      \"method\": \"POST\",\n                                      \"headers\": {\n                                          \"Content-Type\": \"application/json\"\n                                      }\n                                  }\n                              },\n                              {\n                                  \"contains\": {\n                                      \"body\": {\n                                          \"message\": \"ping\"\n                                      }\n                                  }\n                              }\n                          ]\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"body\": {\n                                \"id\": \"request_id\",\n                                  \"message\": \"pong\"\n                              }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id;}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_menu_list\"\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                      \"meta\": {\n                        \"offset\": 0,\n                        \"size\": 16,\n                        \"total\": 16\n                      },\n                      \"data\": [{\n                          \"id\": 1,\n                          \"name\": \"Dashboard\",\n                          \"menu_type\": 1,\n                          \"component\": \"dashboard\",\n                          \"icon\": \"dashboard\",\n                          \"priority\": 1,\n                          \"parent_id\": null,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"Dashboard\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 2,\n                          \"name\": \"Leads\",\n                          \"menu_type\": 1,\n                          \"component\": null,\n                          \"icon\": \"flag\",\n                          \"priority\": 2,\n                          \"parent_id\": null,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"Leads\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 5,\n                          \"name\": \"All Companies\",\n                          \"menu_type\": 1,\n                          \"component\": \"all_companies\",\n                          \"icon\": null,\n                          \"priority\": 5,\n                          \"parent_id\": 2,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"All Companies\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 6,\n                          \"name\": \"All Contacts\",\n                          \"menu_type\": 1,\n                          \"component\": \"all_contacts\",\n                          \"icon\": null,\n                          \"priority\": 6,\n                          \"parent_id\": 2,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"All Contacts\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 7,\n                          \"name\": \"Sales & CRM\",\n                          \"menu_type\": 1,\n                          \"component\": null,\n                          \"icon\": \"suitcase\",\n                          \"priority\": 7,\n                          \"parent_id\": null,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"Sales & CRM\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 8,\n                          \"name\": \"My Projects\",\n                          \"menu_type\": 1,\n                          \"component\": \"user_projects\",\n                          \"icon\": null,\n                          \"priority\": 8,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Projects\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 9,\n                          \"name\": \"My Tenders\",\n                          \"menu_type\": 1,\n                          \"component\": \"user_tenders\",\n                          \"icon\": null,\n                          \"priority\": 9,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Tenders\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 10,\n                          \"name\": \"My Companies\",\n                          \"menu_type\": 3,\n                          \"component\": \"user_companies\",\n                          \"icon\": null,\n                          \"priority\": 10,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Companies\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 11,\n                          \"name\": \"My Contacts\",\n                          \"menu_type\": 1,\n                          \"component\": \"user_contacts\",\n                          \"icon\": null,\n                          \"priority\": 11,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Contacts\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 15,\n                          \"name\": \"My Activities\",\n                          \"menu_type\": 1,\n                          \"component\": \"user_activities\",\n                          \"icon\": null,\n                          \"priority\": 15,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Activities\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 16,\n                          \"name\": \"My Notes\",\n                          \"menu_type\": 1,\n                          \"component\": \"user_notes\",\n                          \"icon\": null,\n                          \"priority\": 16,\n                          \"parent_id\": 7,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"My Notes\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 12,\n                          \"name\": \"Administration\",\n                          \"menu_type\": 1,\n                          \"component\": null,\n                          \"icon\": \"users\",\n                          \"priority\": 12,\n                          \"parent_id\": null,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"Administration\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 13,\n                          \"name\": \"Company Profile\",\n                          \"menu_type\": 1,\n                          \"component\": \"company_profile\",\n                          \"icon\": null,\n                          \"priority\": 13,\n                          \"parent_id\": 12,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"Company Profile\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        },\n                        {\n                          \"id\": 14,\n                          \"name\": \"License Management\",\n                          \"menu_type\": 1,\n                          \"component\": \"license_management\",\n                          \"icon\": null,\n                          \"priority\": 14,\n                          \"parent_id\": 12,\n                          \"translations\": [{\n                              \"language_id\": 1,\n                              \"name\": \"License Management\"\n                            },\n                            {\n                              \"language_id\": 2,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 3,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 4,\n                              \"name\": \"\"\n                            },\n                            {\n                              \"language_id\": 5,\n                              \"name\": \"\"\n                            }\n                          ]\n                        }\n                      ]\n                    }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_menu_list() was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_user\",\n                                \"params\": {\n                      \"user_id\": 2\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"error\": {\n                          \"code\": 604,\n                        \"message\": \"User not found\"\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:2) was yanked with error code 604');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_user\",\n                                \"params\": {\n                      \"user_id\": 8\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                  {\n                    \"is\": {\n                      \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"Accept\": \"application/json\"\n                      },\n                      \"body\": {\n                        \"jsonrpc\": \"2.0\",\n                        \"id\": \"request_id\",\n                        \"result\": {\n                          \"data\": {\n                            \"id\": 8,\n                            \"email\": \"init1@docu.se\",\n                            \"name\": \"Helen Treslow 1\",\n                            \"phone\": \"0340-506000\",\n                            \"client_id\": 1,\n                            \"language_id\": 2,\n                            \"license_id\": 2,\n                            \"currency_id\": 2,\n                            \"geo_division_id\": 2,\n                            \"department_id\": 2,\n                            \"position_id\": null,\n                            \"pic\": null,\n                            \"updates_notif_mode\": {\"sending_mode\":2,\"day_of_week\":null,\"time\":\"10:00\",\"datetime\":null},\n                            \"updates_notif_gateways\": [\n                              1\n                            ],\n                            \"status\": 2,\n                            \"timezone\": \"Europe/Oslo\",\n                            \"expire_at\": \"2029-10-01T10:00:00Z\",\n                            \"activated\": 1\n                          }\n                        }\n                      }\n                    },    \n                    \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:8) was yanked');}\"\n                      }\n                    }\n                  ]\n                },\n                {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_user\",\n                                \"params\": {\n                      \"user_id\": 33\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"data\": {\n                            \"id\": 33,\n                            \"email\": \"init33@docu.se\",\n                            \"name\": \"Helen33 Treslow\",\n                            \"phone\": \"0340-506033\",\n                            \"client_id\": 1,\n                            \"language_id\": 1,\n                            \"license_id\": 1,\n                            \"currency_id\": 1,\n                            \"geo_division_id\": 1,\n                            \"department_id\": 1,\n                            \"position_id\": 2,\n                            \"pic\": \"weer123456t=\",\n                            \"updates_notif_mode\": {\"sending_mode\":2,\"day_of_week\":null,\"time\":\"10:00\",\"datetime\":null},\n                            \"updates_notif_gateways\": [ 1 ],\n                            \"status\": 3,\n                            \"timezone\": \"Europe/Oslo\",\n                            \"expire_at\": \"2029-10-01T10:00:00Z\",\n                            \"activated\": 1\n                          }\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:33) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                \"predicates\": [\n                    {\n                        \"equals\": {\n                            \"body\": {\n                              \"method\": \"get_user\",\n                              \"params\": {\n                    \"user_id\": 9\n                  }\n                          }\n                        }\n                    }\n                ],\n                \"responses\": [\n                    {\n                        \"is\": {\n                            \"headers\": {\n                                \"Content-Type\": \"application/json\",\n                                \"Accept\": \"application/json\"\n                            },\n                            \"body\": {\n                    \"jsonrpc\": \"2.0\",\n                    \"id\": \"request_id\",\n                  \"result\": {\n                        \"data\": {\n                          \"id\": 9,\n                          \"email\": \"user9@docu.se\",\n                          \"name\": \"Without client in Clients table\",\n                          \"phone\": \"0340-506033\",\n                          \"client_id\": 22,\n                          \"language_id\": 1,\n                          \"license_id\": 1,\n                          \"currency_id\": 1,\n                          \"geo_division_id\": 1,\n                          \"department_id\": 1,\n                          \"position_id\": 2,\n                          \"pic\": \"weer123456t=\",\n                          \"updates_notif_mode\": {\"sending_mode\":2,\"day_of_week\":null,\"time\":\"10:00\",\"datetime\":null},\n                          \"updates_notif_gateways\": [ 1 ],\n                          \"status\": 3,\n                          \"timezone\": \"Europe/Oslo\",\n                          \"expire_at\": \"2029-10-01T10:00:00Z\",\n                          \"activated\": 1\n                        }\n                    }\n                }\n                        },\n                        \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:9) was yanked');}\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"predicates\": [\n                    {\n                      \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_client_context\",\n                          \"params\": {\n                              \"client_id\": 22\n                          }\n                        }\n                      }\n                    }\n                ],\n                \"responses\": [\n                  {\n                    \"is\": {\n                      \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"Accept\": \"application/json\"\n                      },\n                      \"body\": {\n                        \"jsonrpc\": \"2.0\",\n                        \"id\": \"request_id\",\n                        \"result\": {\n                          \"client_context\": {\n                            \"id\": 22,\n                            \"name\": \"I am not in User service\",\n                            \"constant_filters\": [\n                              {\n                              \"administrative_units\": [],\n                              \"categories\": [],\n                              \"development_types\": [],\n                              \"stages\": [],\n                              \"company_roles\": [],\n                              \"materials\": [],\n                              \"countries\": [],\n                              \"project_types\": [],\n                              \"tender_roles\": [],\n                              \"value_min\": 0,\n                              \"value_max\": 0,\n                              \"currency_id\": 1,\n                              \"start_date\": \"2021-10-18\"\n                              }\n                            ],\n                            \"client_company_folders\": [\n                              {\n                                \"id\": 1,\n                                \"name\": \"Prospects\",\n                                \"client_company_folder_type_id\": 1\n                              }\n                            ],\n                            \"history_start_date\": \"2020-10-22T22:22:22Z\",\n                            \"activated\": 1,\n                            \"package_id\": 5,\n                            \"client_roles\": [],\n                            \"country_id\": 1,\n                            \"base_url\": \"some.baseurl_1\",\n                            \"support_name\": \"Support Name Client #22\",\n                            \"support_email\": \"support-email-1@docu.se\",\n                            \"support_phone\": \"+380506543210\",\n                            \"package_expire_at\": \"2028-10-01T05:00:00Z\",\n                            \"client_daughters\": [1,2,3]\n                          }\n                        }\n                      }\n                    },\n                    \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:22) was yanked');}\"\n                    }\n                  }\n                ]\n              },\n              {\n                \"predicates\": [\n                    {\n                        \"equals\": {\n                            \"body\": {\n                              \"method\": \"get_user\",\n                              \"params\": {\n                                \"user_id\": 10\n                                }\n                            }\n                        }\n                    }\n                ],\n                \"responses\": [\n                    {\n                        \"is\": {\n                            \"headers\": {\n                                \"Content-Type\": \"application/json\",\n                                \"Accept\": \"application/json\"\n                            },\n                            \"body\": {\n                    \"jsonrpc\": \"2.0\",\n                    \"id\": \"request_id\",\n                  \"result\": {\n                        \"data\": {\n                          \"id\": 10,\n                          \"email\": \"user10@docu.se\",\n                          \"name\": \"Without client in Clients table and the clientnot exists\",\n                          \"phone\": \"0340-506033\",\n                          \"client_id\": 23,\n                          \"language_id\": 1,\n                          \"license_id\": 1,\n                          \"currency_id\": 1,\n                          \"geo_division_id\": 1,\n                          \"department_id\": 1,\n                          \"position_id\": 2,\n                          \"pic\": \"weer123456t=\",\n                          \"updates_notif_mode\": {\"sending_mode\":2,\"day_of_week\":null,\"time\":\"10:00\",\"datetime\":null},\n                          \"updates_notif_gateways\": [ 1 ],\n                          \"status\": 3,\n                          \"timezone\": \"Europe/Oslo\",\n                          \"expire_at\": \"2029-10-01T10:00:00Z\",\n                          \"activated\": 1\n                        }\n                    }\n                }\n                        },\n                        \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:10) was yanked');}\"\n                        }\n                    }\n                ]\n            },\n            {\n                \"predicates\": [\n                    {\n                      \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_client_context\",\n                          \"params\": {\n                              \"client_id\": 23\n                          }\n                        }\n                      }\n                    }\n                ],\n                \"responses\": [\n                  {\n                    \"is\": {\n                      \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"Accept\": \"application/json\"\n                      },\n                      \"body\": {\n                        \"jsonrpc\": \"2.0\",\n                        \"id\": \"request_id\",\n                        \"error\": {\n                          \"code\": 604,\n                          \"message\": \"Client not found\"\n                        }\n                      }\n                    },\n                    \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:23) was yanked with error 604 Client not found');}\"\n                    }\n                  }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_client_context\",\n                                \"params\": {\n                                \"client_id\": 3\n                              }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                    {\n                      \"is\": {\n                        \"headers\": {\n                          \"Content-Type\": \"application/json\",\n                          \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n                          \"jsonrpc\": \"2.0\",\n                          \"id\": \"request_id\",\n                          \"error\": {\n                            \"code\": 604,\n                            \"message\": \"Client not found\"\n                          }\n                        }\n                      },\n                      \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:3) was yanked with error code 604 Client not found');}\"\n                      }\n                    }\n                  ]\n                },\n                {\n                  \"predicates\": [\n                    {\n                      \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_client_context\",\n                          \"params\": {\n                            \"client_id\": 1\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"client_context\": {\n                          \"id\": 1,\n                          \"name\": \"DOCU_NEW\",\n                          \"constant_filters\": [\n                            {\n                              \"administrative_units\": [],\n                              \"categories\": [],\n                              \"development_types\": [],\n                              \"stages\": [],\n                              \"company_roles\": [],\n                              \"materials\": [],\n                              \"countries\": [],\n                              \"project_types\": [],\n                              \"tender_roles\": [],\n                              \"value_min\": 0,\n                              \"value_max\": 0,\n                              \"currency_id\": 1,\n                              \"start_date\": \"2020-10-18\"\n                            }\n                          ],\n                          \"client_company_folders\": [\n                              {\n                                  \"id\": 1,\n                                  \"name\": \"Prospects\",\n                                  \"client_company_folder_type_id\": 1\n                              }\n                          ],\n                          \"history_start_date\": \"2018-10-01T05:00:00Z\",\n                          \"activated\": 1,\n                          \"package_id\": 5,\n                          \"client_roles\": [],\n                          \"country_id\": 1,\n                          \"base_url\": \"some.baseurl_1\",\n                          \"support_name\": \"Support Name Client #1\",\n                          \"support_email\": \"support-email-1@docu.se\",\n                          \"support_phone\": \"+380506543210\",\n                          \"package_expire_at\": \"2028-10-01T05:00:00Z\"\n                          }\n                      }\n                  }\n                },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:1) was yanked');}\"\n                      }\n                  }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_client_context\",\n                                \"params\": {\n                      \"client_id\": 44\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                      \"client_context\": {\n                        \"id\": 44,\n                        \"name\": \"DOCU_NEW_44\",\n                        \"constant_filters\": [\n                          {\n                            \"administrative_units\": [ 1 ],\n                            \"categories\": [],\n                            \"development_types\": [],\n                            \"stages\": [],\n                            \"company_roles\": [],\n                            \"materials\": [],\n                            \"countries\": [],\n                            \"project_types\": [],\n                            \"tender_roles\": [],\n                            \"value_min\": 0,\n                            \"value_max\": 0,\n                            \"currency_id\": 1,\n                            \"start_date\": \"2020-10-18\"\n                          }\n                        ],\n                        \"client_company_folders\": [\n                          {\n                            \"id\": 1,\n                            \"name\": \"Prospects\",\n                            \"client_company_folder_type_id\": 1\n                          }\n                        ],\n                        \"history_start_date\": \"2018-10-01T05:44:44Z\",\n                        \"activated\": 1,\n                        \"package_id\": 5,\n                        \"client_roles\": [{\"id\":1,\"client_role_type_id\":1,\"company_role_id\":35},{\"id\":2,\"client_role_type_id\":1,\"company_role_id\":116},{\"id\":3,\"client_role_type_id\":2,\"company_role_id\":29},{\"id\":4,\"client_role_type_id\":2,\"company_role_id\":74},{\"id\":5,\"client_role_type_id\":2,\"company_role_id\":75},{\"id\":6,\"client_role_type_id\":2,\"company_role_id\":76},{\"id\":7,\"client_role_type_id\":2,\"company_role_id\":77},{\"id\":8,\"client_role_type_id\":2,\"company_role_id\":122}],\n                        \"base_url\": \"some.baseurl44\",\n                        \"support_name\": \"Support Name Client #44\",\n                        \"support_email\": \"support-email-44@docu.se\",\n                        \"support_phone\": \"+380506543210\",\n                        \"package_expire_at\": \"2028-10-01T05:00:00Z\"\n                        }\n                      }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:44) was yanked');}\"\n                  }\n                }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                        \"equals\": {\n                            \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                                    \"client_id\": null,\n                                    \"user_id\": null,\n                                    \"license_id\": null,\n                                    \"package_id\": 3,\n                                    \"acc_setting_type\": 5,\n                                    \"api_client_id\": null\n                                }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 5,\n                          \"modules\": [ 5 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:5, package_id:3) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                        \"equals\": {\n                            \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                                    \"client_id\": null,\n                                    \"user_id\": null,\n                                    \"license_id\": 1,\n                                    \"package_id\": null,\n                                    \"acc_setting_type\": 1,\n                                    \"api_client_id\": null\n                                }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 1,\n                          \"modules\": [ 1, 2, 3 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:1, license_id:1) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                            \"body\": {\n                            \"method\": \"get_modules\",\n                                \"params\": {\n                                    \"client_id\": 1,\n                                    \"user_id\": null,\n                                    \"license_id\": null,\n                                    \"package_id\": null,\n                                    \"acc_setting_type\": 2,\n                                    \"api_client_id\": null\n                                }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 2,\n                          \"modules\": [ 4 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:2, client_id:1) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": 2,\n                    \"user_id\": null,\n                    \"license_id\": 2,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 3,\n                                    \"api_client_id\": null\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 3,\n                          \"modules\": [ 7 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:3, client_id:2, license_id:2) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": 1,\n                    \"user_id\": 1,\n                    \"license_id\": 2,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 4,\n                                    \"api_client_id\": null\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 4,\n                          \"modules\": [ 3, 4 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:3, client_id:1, user_id:1, license_id:2) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": null,\n                    \"user_id\": 8,\n                    \"license_id\": null,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 6,\n                                    \"api_client_id\": null\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 6,\n                          \"modules\": [ ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:6, user_id:8) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_module_components\",\n                                \"params\": {\n                    \"module_id\": 5\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"error\": {\n                          \"code\": 604,\n                        \"message\": \"Module not found\"\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_module_components(module_id:5) was yanked with error 604 Module not found');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_module_components\",\n                                \"params\": {\n                    \"module_id\": 4\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"module_id\": 4,\n                          \"components\": [\n                              \"advanced_search\"\n                          ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_module_components(module_id:4) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n      \n              {\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"error\": {\n                      \"code\":500,\n                      \"message\": \"No matches with any imposter predicate.\",\n                      \"data\": {\n                        \"request\":{}\n                      }\n                    }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.response.body.error.data.request = JSON.parse(config.request.body);}\"\n                          }\n                      }\n                  ]\n              }\n          ],\n          \"_links\": {\n              \"self\": {\n                  \"href\": \"http://localhost:2525/imposters/8085\"\n              }\n          }\n      }"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_menu_list (for Dictionaries)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_menu_list\",\n  \"id\": 911,\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "http://localhost:8085/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_payload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_payload\",\n  \"id\": \"911\",\n  \"params\": {\n          \"user_id\": 1,\n          \"force\": false\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "validate_login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"validate_login\",\n  \"id\": \"911\",\n  \"params\": { \"user_id\" : \"44\"}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_settings",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_settings\",\n  \"id\": \"915\",\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_constant_filters (to remove)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_constant_filter\",\n  \"id\": \"911\",\n  \"params\": {}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_profile",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_profile\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"client_id\": 1\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_user (from Account)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_user\",\n  \"id\": \"911\",\n  \"params\": {\n\t\"user_id\": \"7\",\n\t\"patch\": [{\n\t\t\"value\": \"new name\",\n\t\t\"path\": \"name\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": \"new phone\",\n\t\t\"path\": \"phone\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 61,\n\t\t\"path\": \"position_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 62,\n\t\t\"path\": \"geo_division_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 63,\n\t\t\"path\": \"department_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": {\n\t\t\t\"sending_mode\": 1,\n\t\t\t\"day_of_week\": 2,\n\t\t\t\"time\": \"15:18:07\",\n\t\t\t\"datetime\": \"2019-08-22T16:47:13.8345147\"\n\t\t},\n\t\t\"path\": \"updates_notif_mode\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": [1, 2, 3],\n\t\t\"path\": \"updates_notif_gateways\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 1,\n\t\t\"path\": \"language_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 2,\n\t\t\"path\": \"currency_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": null,\n\t\t\"path\": \"pic\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": 3,\n\t\t\"path\": \"status\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": \"EET\",\n\t\t\"path\": \"timezone\",\n\t\t\"op\": \"replace\"\n\t}]\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_user\",\n  \"id\": \"911\",\n  \"params\": {\n\t\"user_id\": 1,\n\t\"patch\": [{\n\t\t\"value\": \"2\",\n\t\t\"path\": \"language_id\",\n\t\t\"op\": \"replace\"\n\t}, {\n\t\t\"value\": \"2\",\n\t\t\"path\": \"currency_id\",\n\t\t\"op\": \"replace\"\n\t}]\n}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_user (only name and status fields)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_user\",\n  \"id\": \"915\",\n  \"params\": {\n\t\"user_id\": \"2\",\n\t\"patch\": [{\n\t\t\"value\": \"1234\",\n\t\t\"path\": \"name\",\n\t\t\"op\": \"replace\"\n\t},{\n\t\t\"value\": 2,\n\t\t\"path\": \"status\",\n\t\t\"op\": \"replace\"\n\t}]\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_user (only pic field)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_user\",\n  \"id\": \"915\",\n  \"params\": {\n\t\"user_id\": \"2\",\n\t\"patch\": [{\n\t\t\"value\": \"null\",\n\t\t\"path\": \"pic\",\n\t\t\"op\": \"replace\"\n\t}]\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_client (with -32603)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_client\",\n  \"id\": \"911\",\n  \"params\": {\n\t\"client_id\": 1,\n\t\"patch\": [{\n\t\t\"value\": \"LEVS-2\",\n\t\t\"path\": \"name\",\n\t\t\"op\": \"replace\"\n\t}]\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_api_client_payload",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_api_client_payload\",\n  \"id\": \"912\",\n  \"params\": {\n    \"ac_id\": 5,\n    \"force\": false\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "sql",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/utils/users/sql",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"utils",
								"users",
								"sql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Schema Registry API",
			"item": [
				{
					"name": "/schemas/ids/{int: id}",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/schemas/ids/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"schemas",
								"ids",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subjects",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.schemaregistry.v1+json, application/vnd.schemaregistry+json, application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8081/subjects",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subjects"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subjects/.../versions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/subjects/notification-value/versions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subjects",
								"notification-value",
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "/subjects Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8081/subjects/event.notifications.email.sent-value",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8081",
							"path": [
								"subjects",
								"event.notifications.email.sent-value"
							]
						}
					},
					"response": []
				}
			],
			"description": "https://docs.confluent.io/current/schema-registry/develop/api.html"
		},
		{
			"name": "Account service",
			"item": [
				{
					"name": "init_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"init_user\",\n  \"id\": \"912\",\n\t\"params\":{\n\t\t\"data\": {\n\t\t  \"user_id\": 31,\n\t\t  \"name\": \"Vasja111111\",\n\t\t  \"password\": \"ghbdtn\"\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "activate_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"activate_user\",\n  \"id\": \"912\",\n\t\"params\":{\n\t\t\"data\": {\n\t\t  \"user_id\": 4\n\t\t}\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user\",\n  \"id\": \"911\",\n  \"params\": {\n\t  \"user_id\": 2\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_list\",\n  \"id\": \"9103\",\n  \"params\": {\n          \"query\": {\n              \"filter\": {\n                \"client_id\": {\n                    \"eq\": 1\n                }\n              },\n       \t    \"sort\": {\n      \t      \"name\": {\n      \t        \"order\": \"d\"\n      \t      }\n      \t    }\n           },\n          \"suspended\": 0\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_list\",\n  \"id\": \"911\",\n  \"params\": {\n          \"query\": { }\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_by_source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_by_source\",\n  \"id\": \"911\",\n  \"params\": {\n\t  \"source_type_id\": 6,\n\t  \"source_id\": 5\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client\",\n  \"id\": \"9111\",\n  \"params\": {\n\t  \"client_id\": 4\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_by_source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_by_source\",\n  \"id\": \"911\",\n  \"params\": {\n\t  \"source_type_id\": 6,\n\t  \"source_id\": 633\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_modules\",\n  \"id\": \"930\",\n  \"params\": {\n\t\"client_id\": 2,\n\t\"user_id\": null,\n\t\"license_id\": 2,\n\t\"package_id\": null,\n\t\"acc_setting_type\": 3\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_module_components",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_module_components\",\n  \"id\": \"932\",\n  \"params\": {\n\t  \"module_id\": 4\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_user\",\n  \"id\": \"925\",\n  \"params\": {\n\t\"user_id\": 32\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "unsuspend_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_user\",\n  \"id\": \"925\",\n  \"params\": {\n\t\"user_id\": 32\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_user (605 User already exists)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_user\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"data\": {\n\t    \"client_id\": 1,\n\t    \"email\": \"init@docu.se\",\n\t    \"license_id\": 1\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_user (607 Suspended user)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_user\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"data\": {\n\t    \"client_id\": 1,\n\t    \"email\": \"new.user@docu.se\",\n\t    \"license_id\": 2\n\t  }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_user (300 Not enough licenses)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_user\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"data\": {\n\t    \"client_id\": 1,\n\t    \"email\": \"init1@docu.se\",\n\t    \"license_id\": 1\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_user\",\n  \"id\": \"928\",\n  \"params\": {\n  \t\"data\": {\n\t    \"client_id\": 1,\n\t    \"email\": \"new.user@docu.se\",\n\t    \"license_id\": 1\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client\",\n  \"id\": \"92892\",\n  \"params\": {\n  \t\"data\": {\n            \"client\": {\n              \"name\": \"SMART33\",\n              \"organization_id\": 5,\n              \"package_id\": 4,\n              \"history\": 4,\n              \"history_start_date\": \"2018-08-01T05:00:00Z\",\n              \"package_expire_at\": \"2022-03-03T05:00:03Z\",\n              \"support_name\": \"SMART\",\n              \"support_email\": \"autotest-smart22@july.agency\",\n              \"support_phone\": \"+380501111111\",\n              \"country_id\": 1,\n              \"send_from\": {\n                \"email\": \"autotest-smart@july.agency\",\n                \"name\": \"VasjaPupkin\"\n              },\n              \"base_url\": \"smart-dev.byggfakta.se\"\n            },\n            \"filters\": {\n              \"administrative_unit_ids\": [503,763,504,505,494,495,496,497,498,499,491,764,756,757,758,759,760,485,486,761,487,766,488,767,489,490,768,769,506,507,508,770,509,510,771,762,511,500,501,502,492,493,765],\n              \"category_ids\": [107,117,114,105,121,227,122,120,208,239,251,126,112,104,111,101,110,100,123,113,209,103,124,210,118,211,108,116,279,102,125,127,106,119,280,99,109,212,115],\n              \"development_type_ids\": [4,5],\n              \"stage_ids\": [4,5],\n              \"company_role_ids\": [4,5],\n              \"material_ids\": [4,5],\n              \"country_ids\": [4,5]\n            },\n            \"company_folders\": [\n              {\n                \"name\": \"Clients\",\n                \"client_company_folder_type_id\": 2\n              },\n              {\n                \"name\": \"Competitors\",\n                \"client_company_folder_type_id\": 2\n              }\n            ],\n            \"roles\": [\n              {\n                \"company_role_id\": 38,\n                \"client_role_type_id\": 2\n              },\n              {\n                \"company_role_id\": 37,\n                \"client_role_type_id\": 3\n              }\n            ],\n            \"geo_divisions\": [ ],\n            \"departments\": [ ]\n          }\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "put_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_client\",\n  \"id\": \"92892\",\n  \"params\": {\n  \t\"data\": {\n      \"client_id\": 3,\n      \"client\": {\n        \"name\": \"SMART33\",\n        \"organization_id\": 5,\n        \"package_id\": 4,\n        \"history\": 4,\n        \"history_start_date\": \"2018-08-01T05:00:00Z\",\n        \"package_expire_at\": \"2022-03-03T05:00:03Z\",\n        \"support_name\": \"SMART\",\n        \"support_email\": \"autotest-smart22@july.agency\",\n        \"support_phone\": \"+380501111111\",\n        \"country_id\": 1,\n        \"send_from\": {\n          \"email\": \"autotest-smart@july.agency\",\n          \"name\": \"VasjaPupkin\"\n        },\n        \"base_url\": \"smart-dev.byggfakta.se\"\n      },\n      \"filters\": {\n        \"administrative_unit_ids\": [503,763,504,505,494,495,496,497,498,499,491,764,756,757,758,759,760,485,486,761,487,766,488,767,489,490,768,769,506,507,508,770,509,510,771,762,511,500,501,502,492,493,765],\n        \"category_ids\": [107,117,114,105,121,227,122,120,208,239,251,126,112,104,111,101,110,100,123,113,209,103,124,210,118,211,108,116,279,102,125,127,106,119,280,99,109,212,115],\n        \"development_type_ids\": [4,5],\n        \"stage_ids\": [4,5],\n        \"company_role_ids\": [4,5],\n        \"material_ids\": [4,5],\n        \"country_ids\": [4,5]\n      },\n      \"company_folders\": [\n        {\n          \"name\": \"Clients\",\n          \"client_company_folder_type_id\": 2\n        },\n        {\n          \"name\": \"Competitors\",\n          \"client_company_folder_type_id\": 2\n        }\n      ],\n      \"roles\": [\n        {\n          \"company_role_id\": 38,\n          \"client_role_type_id\": 2\n        },\n        {\n          \"company_role_id\": 37,\n          \"client_role_type_id\": 3\n        }\n      ],\n      \"geo_divisions\": [ ],\n      \"departments\": [ ]\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client (minimum data)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client\",\n  \"id\": \"9283\",\n  \"params\": {\n  \t\"data\": {\n            \"client\": {\n              \"name\": \"SMART-MIN3\",\n              \"organization_id\": 4,\n              \"package_id\": 4,\n              \"history\": 4,\n              \"country_id\": 1,\n              \"send_from\": {\n                \"email\": \"autotest-smart@july.agency\",\n                \"name\": \"VasjaPupkin\"\n              },\n              \"base_url\": \"smart-dev.byggfakta.se\"\n            },\n            \"filters\": {\n              \"administrative_unit_ids\": [],\n              \"category_ids\": [],\n              \"development_type_ids\": [],\n              \"stage_ids\": [],\n              \"company_role_ids\": [],\n              \"material_ids\": [],\n              \"country_ids\": []\n          },\n            \"company_folders\": [\n              {\n                \"name\": \"Clients\",\n                \"client_company_folder_type_id\": 2\n              }\n            ],\n            \"roles\": [ ],\n            \"geo_divisions\": [ ],\n            \"departments\": [ ]\n          }\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client_position",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client_position\",\n  \"id\": \"919\",\n  \"params\": {\n          \"data\": {\n      \t    \"client_id\": 3,\n      \t    \"name\": \"BuildeR\"\n      \t  }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client_contact",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client_contact\",\n  \"id\": \"919\",\n  \"params\": {\n  \t\"data\": {\n      \t    \"client_id\": 1,\n      \t    \"contact_type_id\": 3,\n            \"value\": \"a1a1a1a1a1a1a1a@gmail.com\"\n      \t  }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client_department",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client_department\",\n  \"id\": \"919\",\n  \"params\": {\n  \t\"data\": {\n\t  \"client_id\": 2,\n\t  \"name\": \"Marketing\"\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client_geo_division",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client_geo_division\",\n  \"id\": \"919\",\n  \"params\": {\n  \t\"data\": {\n\t  \"client_id\": 1,\n\t  \"name\": \"Stockholm\"\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_client_company_folder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_client_company_folder\",\n  \"id\": \"919\",\n  \"params\": {\n  \t\"data\": {\n\t  \"client_id\": 1,\n\t  \"name\": \"Prospects\"\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send_user_invite",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"send_user_invite\",\n  \"id\": \"9128\",\n  \"params\": {\n  \t\"data\": {\n\t  \"user_id\": 4\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_client_company_folder",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_client_company_folder\",\n  \"id\": \"919\",\n  \"params\": {\n\t  \"client_id\": 2,\n\t  \"company_folder_id\": 3\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_lookups",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_lookups\",\n  \"id\": \"919\",\n  \"params\": {\n     \"client_id\": 3\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_context",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_lookups\",\n  \"id\": \"919\",\n  \"params\": {\n     \"client_id\": 2\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_info",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_info\",\n  \"id\": \"919\",\n  \"params\": {\n\t  \"client_id\": 2\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_api_client_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_api_client_list\",\n  \"id\": \"919\",\n  \"params\": {\n          \"query\": {\"search\": \"2\" }\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_api_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_api_client\",\n  \"id\": \"919\",\n  \"params\": {\n        \"ac_id\": 2\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_api_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_api_client\",\n  \"id\": \"131\",\n  \"params\": {\n      \"data\": {\n          \"name\": \"New Name 1\",\n          \"client_id\": 1,\n          \"license_id\": 3,\n          \"activated\": 0,\n          \"access_type_id\": 1,\n          \"language_id\": 1,\n          \"currency_id\": 1,\n          \"user_id\": 1,\n          \"expire_at\": \"2021-07-08T01:01:05.406Z\"\n      }\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "put_api_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_api_client\",\n  \"id\": \"92890\",\n  \"params\": {\n      \"data\" : {\n        \"ac_id\": 1,\n        \"name\": \"New Name 1\",\n        \"client_id\": 2,\n        \"api_client_id\": \"d99a64a8-cb3a-4135-9032-5aae35aef801\",\n        \"license_id\": 1,\n        \"activated\": 1,\n        \"user_id\": null,\n        \"currency_id\": null,\n        \"language_id\": null,\n        \"access_type_id\": 3\n      }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_api_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_api_client\",\n  \"id\": \"1911\",\n  \"params\": {\n\t\"ac_id\": 2,\n\t\"patch\": [{\n      \t\t\"value\": \"New Name 2\",\n      \t\t\"path\": \"name\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": 2,\n      \t\t\"path\": \"client_id\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": 2,\n      \t\t\"path\": \"license_id\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": \"2022-07-08T02:01:05.406Z\",\n      \t\t\"path\": \"expire_at\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": 0,\n      \t\t\"path\": \"activated\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": null,\n      \t\t\"path\": \"user_id\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": null,\n      \t\t\"path\": \"currency_id\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": null,\n      \t\t\"path\": \"language_id\",\n      \t\t\"op\": \"replace\"\n      \t},\n        {\n      \t\t\"value\": 2,\n      \t\t\"path\": \"access_type_id\",\n      \t\t\"op\": \"replace\"\n      \t}\n      ]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_api_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_api_client\",\n  \"id\": \"925\",\n  \"params\": {\n\t\"ac_id\": 2\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_folders",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_folders\",\n  \"id\": \"919\",\n  \"params\": { }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook_list (filter 1)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook_list\",\n  \"id\": \"919\",\n  \"params\": {\n      \"query\": {\n        \"filter\": {\n            \"activated\": {\"eq\": 1},\n            \"id\": {\"in\": [1,2,3]},\n            \"client_id\": {\"in\": [1]},\n            \"webhook_version_id\": {\"in\": [1]},\n            \"webhook_event_type\": {\"in\": [1]}\n        },\n        \"sort\": {\n            \"modified_at\": {\n            \"order\": \"d\"\n            }\n        }\n    },\n        \"limit\": 100,\n        \"offset\": 0\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook_list (filter 2)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook_list\",\n  \"id\": \"919\",\n  \"params\": {\n    \"query\": {\n        \"filter\": {\n            \"blocked\": {\"eq\": 0}\n        },\n        \"sort\": {\n            \"description\": {\n            \"order\": \"a\"\n            }\n        }\n    },\n    \"limit\": 100,\n    \"offset\": 0\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook_list (empty query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook_list\",\n  \"id\": \"9192\",\n  \"params\": {\n      \"query\": {\n            \"filter\": {\n              \"blocked\": {\"eq\": 0}\n            },\n            \"sort\": {\n              \"modified_at\": {\n                \"order\": \"a\"\n              }\n            }\n          },\n          \"limit\": 100,\n          \"offset\": 0\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook\",\n  \"id\": \"9194\",\n  \"params\": {\n    \"webhook_id\": 5\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook_versions",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook_versions\",\n  \"id\": \"9195\",\n  \"params\": {\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_webhook_secret_key",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"update_webhook_secret_key\",\n  \"id\": \"9194\",\n  \"params\": {\n      \"data\": {\n\n    \"webhook_id\": 5}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_webhook",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_webhook\",\n  \"id\": \"913\",\n  \"params\": {\n          \"data\": {\n            \"client_id\": 2,\n            \"client_name\": \"Client Name\",\n            \"endpoint_url\": \"https://smart-dev.byggefakta.dk\",\n            \"description\": \"Posted webhook\",\n            \"webhook_version_id\": 1,\n            \"activated\": 1,\n            \"blocked\": 1,\n            \"blocked_notification_email\": \"autotest-smart-support@july.agency\",\n            \"webhook_events\": [\n              {\n                \"webhook_event_type\": 6\n              }\n            ]\n          }\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "put_webhook",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_webhook\",\n  \"id\": \"9116\",\n  \"params\": {\n          \"data\": {\n            \"webhook_id\": 5,\n            \"client_id\": 2,\n            \"endpoint_url\": \"https://smart-dev.byggfakta.se\",\n            \"description\": \"PUTted webhook\",\n            \"webhook_version_id\": 1,\n            \"activated\": 1,\n            \"blocked\": 1,\n            \"blocked_notification_email\": \"autotest-smart@july.agency\",\n            \"webhook_events\": [\n              {\n                \"webhook_event_type\": 4\n              }\n            ]\n          }\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_webhook",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_webhook\",\n  \"id\": \"9116\",\n  \"params\": {\n          \"webhook_id\": 6,\n          \"patch\": [{\n            \"value\": 1,\n            \"path\": \"activated\",\n            \"op\": \"replace\"\n          },{\n            \"value\": 1,\n            \"path\": \"blocked\",\n            \"op\": \"replace\"\n          }]\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_webhook",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_webhook\",\n  \"id\": \"9193\",\n  \"params\": {\n    \"webhook_id\": 5\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_lookups Copy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_context\",\n  \"id\": \"929\",\n  \"params\": {\n\t  \"client_id\": 1\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_client_users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_client_users\",\n  \"id\": \"924\",\n  \"params\": {\n\t  \"client_id\": 1,\n\t  \"query\": {\n\t  }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Imposter of Auth and Users servises for Account",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n          \"protocol\": \"http\",\n          \"port\": 8085,\n          \"numberOfRequests\": 0,\n          \"recordRequests\": true,\n          \"requests\": [],\n          \"stubs\": [\n            {\n              \"predicates\": [\n                {\n                  \"and\": [\n                    {\n                      \"equals\": {\n                        \"path\": \"/test\",\n                        \"method\": \"POST\",\n                        \"headers\": {\n                          \"Content-Type\": \"application/json\"\n                        }\n                      }\n                    },\n                    {\n                      \"contains\": {\n                        \"body\": {\n                          \"message\": \"ping\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"body\": {\n                      \"id\": \"request_id\",\n                      \"message\": \"pong\"\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id;}\"\n                  }\n                }\n              ]\n            },\n            {\n              \"predicates\": [\n                {\n                  \"equals\": {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"init_user\",\n                      \"params\": {\n                \"id\": 4\n                }\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('init_user(id:4) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n            {\n              \"predicates\": [\n                {\n                  \"equals\": {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"init_user\",\n                      \"params\": {\n                \"id\": 3\n                }\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('init_user(id:3) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n            {\n              \"predicates\": [\n                {\n                  \"equals\": {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"init_user\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('init_user() was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"patch_user\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('patch_user() was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"patch_client\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('patch_client() was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"delete_user\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('delete_user() was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_dummy\",\n                      \"params\": {\"email\": \"new.user@docu.se\"}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\"id\": 33}\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_dummy(email:new.user@docu.se) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_dummy\",\n                      \"params\": {\"email\": \"autotest-smart-user32@july.agency\"}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\"id\": 32}\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_dummy(email:autotest-smart-user32@july.agency) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_dummy\",\n                      \"params\": {\"email\": \"autotest-smart-user31@july.agency\"}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\"id\": 31}\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_dummy(email:autotest-smart-user31@july.agency) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n\n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_dummy\",\n                      \"params\": {\"email\": \"autotest-smart-user34@july.agency\"}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\"id\": 34}\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_dummy(email:autotest-smart-user34@july.agency) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_dummy\",\n                      \"params\": {\"email\": \"error605@docu.se\"}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"error\": {\n                        \"code\": 605,\n                        \"message\": \"Already Exists\"\n                      }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_dummy(email:error605@docu.se) was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"suspend_user\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info(config.request.body); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"unsuspend_user\",\n                      \"params\": {\"data\": {\"id\": 3}}\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info(config.request.body); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"unsuspend_user\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info(config.request.body); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"generate_token\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\"id\": \"user_id\"}\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.response.body.result.id = JSON.parse(config.request.body).params.data.id;config.logger.info(config.request.body); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_api_client\",\n                      \"id\": \"130\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\n                          \"id\": 1,\n                          \"api_client_id\": \"44f0c085-f92f-4848-988f-ee7792444967\"\n                          }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_api_client was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_api_client\",\n                      \"id\": \"131\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\n                          \"id\": 2,\n                          \"api_client_id\": \"0843b01f-dfdc-4d40-a837-c4a1e5f0601c\"\n                        }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_api_client was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"add_api_client\",\n                      \"id\": \"132\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": {\n                          \"id\": 3,\n                          \"api_client_id\": \"d99a64a8-cb3a-4135-9032-5aae35aef801\"\n                        }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('add_api_client was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"delete_api_client\",\n                      \"id\": \"140\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"error\": {\n                        \"code\": 500,\n                        \"message\": \"Auth service is broken\"\n                      }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('delete_api_client was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"predicates\": [\n                { \"equals\":\n                  {\n                    \"path\": \"/jsonrpc/v1\",\n                    \"method\": \"POST\",\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"method\": \"delete_api_client\",\n                      \"id\": \"141\"\n                    }\n                  }\n                }\n              ],\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"headers\": {\n                      \"Content-Type\": \"application/json\",\n                      \"Accept\": \"application/json\"\n                    },\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                      \"result\": true\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('delete_api_client was yanked'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            },\n        \n            {\n              \"responses\": [\n                {\n                  \"is\": {\n                    \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"error\": {\n                        \"code\": -32603,\n                        \"message\": \"No suitable predicate\"\n                      }, \"id\": \"request_id\"\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('No suitable predicate'); config.logger.info('json-rpc id: ' + config.response.body.id);}\"\n                  }\n                }\n              ]\n            }\n          ],\n          \"_links\": {\n            \"self\": {\n              \"href\": \"http://localhost:2525/imposters/8085\"\n            }\n          }\n        }"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "patch_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_user\",\n  \"id\": \"9111\",\n  \"params\": {\n        \t\"user_id\": 2,\n        \t\"patch\": [{\n        \t\t\"value\": \"Chuck Norris\",\n        \t\t\"path\": \"name\",\n        \t\t\"op\": \"replace\"\n        \t},{\n        \t\t\"value\": \"sdjhfbg89012\",\n        \t\t\"path\": \"pic\",\n        \t\t\"op\": \"replace\"\n        \t},{\n        \t\t\"value\": {\n              \"sending_mode\": 3,\n              \"day_of_week\": 2,\n              \"time\": \"09:30\",\n              \"datetime\": null\n            },\n        \t\t\"path\": \"updates_notif_mode\",\n        \t\t\"op\": \"replace\"\n        \t},{\n        \t\t\"value\": [1, 2, 3],\n        \t\t\"path\": \"updates_notif_gateways\",\n        \t\t\"op\": \"replace\"\n        \t}]\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_client\",\n  \"id\": \"911\",\n  \"params\": {\n\t\"client_id\": 3,\n\t\"patch\": [{\n      \t\t\"value\": 2,\n      \t\t\"path\": \"organization_id\",\n      \t\t\"op\": \"replace\"\n      \t},{\n      \t\t\"value\": 2,\n      \t\t\"path\": \"package_id\",\n      \t\t\"op\": \"replace\"\n      \t},{\n      \t\t\"value\": 2,\n      \t\t\"path\": \"history\",\n      \t\t\"op\": \"replace\"\n      \t},{\n      \t\t\"value\": 1,\n      \t\t\"path\": \"activated\",\n      \t\t\"op\": \"replace\"\n      \t},{\n      \t\t\"value\": \"someBase64String\",\n      \t\t\"path\": \"pic\",\n      \t\t\"op\": \"replace\"\n      \t}]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_client (package_expired_at)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_client\",\n  \"id\": \"911\",\n  \"params\": {\n\t\"client_id\": 5,\n\t\"patch\": [{\n      \t\t\"value\": \"2019-03-03T03:00:03Z\",\n      \t\t\"path\": \"package_expire_at\",\n      \t\t\"op\": \"replace\"\n      \t}]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "import_client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"import_client\",\n  \"id\": \"11113\",\n  \"params\": {\n          \"data\": {\n            \"client\": {\n              \"name\": \"Updated Client\",\n              \"organization_id\": 123,\n              \"package_id\": 5,\n              \"activated\": 1,\n              \"activated_at\": \"2019-03-03T03:00:03Z\",\n              \"history\": 2,\n              \"history_start_date\": \"2019-03-03T03:00:03Z\",\n              \"package_registered_at\": \"2019-03-03T03:00:03Z\",\n              \"package_expire_at\": \"2022-03-03T03:00:03Z\",\n              \"source_type_id\": 6,\n              \"source_id\": 123,\n              \"country_id\": \"1\",\n              \"base_url\": \"smart-dev.byggfakta.se\",\n              \"send_from\": {\n                \"email\": \"info@byggfakta.se\",\n                \"name\": \"Smart\"\n              }\n            },\n            \"filters\": [\n              {\n                \"administrative_unit_ids\": [ 1, 2, 3 ],\n                \"category_ids\": [ 1, 2, 3 ],\n                \"development_type_ids\": [ 1, 2, 3 ],\n                \"stage_ids\": [ 1, 2, 3 ],\n                \"company_role_ids\": [ 1, 2, 3 ],\n                \"material_ids\": [ 1, 2, 3 ],\n                \"country_ids\": [ 1, 2, 3 ],\n                \"planning_stage_ids\": [ 4, 5 ],\n                \"project_type_ids\": [],\n                \"tender_role_ids\": [],\n                \"value_min\": 0,\n                \"value_max\": 0,\n                \"currency_id\": 1,\n                \"start_date\": \"2022-03-03T03:00:03Z\"\n              }\n            ],\n            \"company_folders\": [\n              {\n                \"name\": \"Folder 1\",\n                \"client_company_folder_type_id\": 2\n              }\n            ],\n            \"roles\": [\n              {\n                \"company_role_id\": 12,\n                \"client_role_type_id\": 1\n              }\n            ],\n            \"geo_divisions\": [\n              {\n                \"name\": \"Hudiksvall\"\n              }\n            ],\n            \"departments\": [\n              {\n                \"name\": \"Menagement\"\n              },\n              {\n                \"name\": \"Marketing\"\n              }\n            ],\n            \"users\": [\n              {\n                \"email\": \"autotest-smart-user31@july.agency\",\n                \"name\": \"Imported User3\",\n                \"phone\": \"+38050111111\",\n                \"license_id\": 2,\n                \"language_id\": 2,\n                \"currency_id\": 1,\n                \"updates_notif_mode\": {\n                  \"sending_mode\": 4,\n                  \"datetime\": \"2020-05-05T05:00:05Z\"\n                },\n                \"updates_notif_gateways\": [1],\n                \"timezone\" : \"Europe/Stockholm\",\n                \"source_id\": 124\n              }\n            ]\n          }\n        }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "import_client (error 605)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"import_client\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"data\": {\n\t    \"client\": {\n\t      \"name\": \"Updated Client\",\n\t      \"organization_id\": 123,\n\t      \"package_id\": 5,\n\t      \"activated\": 1,\n\t      \"activated_at\": \"2019-03-03T03:00:03Z\",\n\t      \"history\": 2,\n\t      \"history_start_date\": \"2019-03-03T03:00:03Z\",\n\t      \"package_registered_at\": \"2019-03-03T03:00:03Z\",\n\t      \"package_expire_at\": \"2022-03-03T03:00:03Z\",\n\t      \"source_type_id\": 5,\n\t      \"source_id\": 734,\n\t      \"support_name\": \"Imported Vasja\",\n\t      \"support_email\": \"autotest-smart-imported-client-error605@july.agency\",\n\t      \"support_phone\": \"+380501234567\",\n\t      \"country_id\": \"1\",\n\t      \"send_from\": {\n\t\t    \"email\": \"info@byggfakta.se\",\n\t\t    \"name\": \"Smart\"\n\t\t  },\n\t      \"base_url\": \"smart-dev.byggfakta.se\"\n\t    },\n\t    \"filters\": {\n\t      \"administrative_unit_ids\": [1,2,3],\n\t      \"category_ids\": [1,2,3],\n\t      \"development_type_ids\": [1,2,3],\n\t      \"stage_ids\": [1,2,3],\n\t      \"company_role_ids\": [1,2,3],\n\t      \"material_ids\": [1,2,3],\n\t      \"country_ids\": [1,2,3]\n\t    },\n\t    \"company_folders\": [\n\t      {\n\t        \"name\": \"Folder 1\",\n\t        \"client_company_folder_type_id\": 2\n\t      }\n\t    ],\n\t    \"roles\": [\n\t      {\n\t        \"company_role_id\": 12,\n\t        \"client_role_type_id\": 1\n\t      }\n\t    ],\n\t    \"geo_divisions\": [\n\t      {\n\t        \"name\": \"Hudiksvall\"\n\t      }\n\t    ],\n\t    \"departments\": [\n\t      {\n\t        \"name\": \"Menagement\"\n\t      },\n\t      {\n\t        \"name\": \"Marketing\"\n\t      }\n\t    ],\n\t    \"users\": [\n    \t  {\n            \"email\": \"error605@docu.se\",\n            \"name\": \"Imported User2\",\n            \"phone\": \"+38050111111\",\n            \"license_id\": 2,\n            \"language_id\": 2,\n            \"currency_id\": 1,\n            \"updates_notif_mode\": {\n                  \"sending_mode\": 3,\n                  \"day_of_week\": 5,\n                  \"time\": \"10:15\"\n            },\n            \"updates_notif_gateways\": [1],\n            \"timezone\" : \"Europe/Stockholm\",\n            \"source_id\": 123\n          }\n\t    ]\n\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "import_client (without any users)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"import_client\",\n  \"id\": \"911\",\n  \"params\": {\n  \t\"data\": {\n            \"client\": {\n              \"name\": \"Updated Client\",\n              \"organization_id\": 123,\n              \"package_id\": 5,\n              \"activated\": 1,\n              \"activated_at\": \"2019-03-03T03:00:03Z\",\n              \"history\": 2,\n              \"history_start_date\": \"2019-03-03T03:00:03Z\",\n              \"package_registered_at\": \"2019-03-03T03:00:03Z\",\n              \"package_expire_at\": \"2022-03-03T03:00:03Z\",\n              \"source_type_id\": 6,\n              \"source_id\": 123,\n              \"country_id\": \"1\",\n              \"base_url\": \"smart-dev.byggfakta.se\",\n              \"send_from\": {\n                \"email\": \"info@byggfakta.se\",\n                \"name\": \"Smart\"\n              }\n            },\n            \"filters\": {\n              \"administrative_unit_ids\": [1,2,3],\n              \"category_ids\": [1,2,3],\n              \"development_type_ids\": [1,2,3],\n              \"stage_ids\": [1,2,3],\n              \"company_role_ids\": [1,2,3],\n              \"material_ids\": [1,2,3],\n              \"country_ids\": [1,2,3]\n            },\n            \"company_folders\": [\n              {\n                \"name\": \"Folder 1\",\n                \"client_company_folder_type_id\": 2\n              }\n            ],\n            \"roles\": [\n              {\n                \"company_role_id\": 12,\n                \"client_role_type_id\": 1\n              }\n            ],\n            \"geo_divisions\": [\n              {\n                \"name\": \"Hudiksvall\"\n              }\n            ],\n            \"departments\": [\n              {\n                \"name\": \"Menagement\"\n              },\n              {\n                \"name\": \"Marketing\"\n              }\n            ],\n            \"users\": [ ]\n          }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WebhookSender",
			"item": [
				{
					"name": "Imposter for WebhookSender",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n          \"protocol\": \"http\",\n          \"port\": 8085,\n          \"numberOfRequests\": 0,\n          \"recordRequests\": true,\n          \"requests\": [],\n          \"stubs\": [\n            {\n                \"predicates\": [\n                    {\n                      \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_client\",\n                          \"params\": {\n                              \"client_id\": 222\n                          }\n                        }\n                      }\n                    }\n                ],\n                \"responses\": [\n                  {\n                    \"is\": {\n                      \"headers\": {\n                        \"Content-Type\": \"application/json\",\n                        \"Accept\": \"application/json\"\n                      },\n                      \"body\": {\n                        \"jsonrpc\": \"2.0\",\n                        \"id\": \"request_id\",\n                        \"error\": {\n                          \"code\": 604,\n                          \"message\": \"Client not found\"\n                        }\n                      }\n                    },\n                    \"_behaviors\": {\n                      \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:222) was yanked with error 604 Client not found');}\"\n                    }\n                  }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_client_context\",\n                                \"params\": {\n                                \"client_id\": 3\n                              }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                    {\n                      \"is\": {\n                        \"headers\": {\n                          \"Content-Type\": \"application/json\",\n                          \"Accept\": \"application/json\"\n                        },\n                        \"body\": {\n                          \"jsonrpc\": \"2.0\",\n                          \"id\": \"request_id\",\n                          \"error\": {\n                            \"code\": 604,\n                            \"message\": \"Client not found\"\n                          }\n                        }\n                      },\n                      \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:3) was yanked with error code 604');}\"\n                      }\n                    }\n                  ]\n                },\n                {\n                  \"predicates\": [\n                    {\n                      \"equals\": {\n                        \"body\": {\n                          \"method\": \"get_client_context\",\n                          \"params\": {\n                            \"client_id\": 1\n                          }\n                        }\n                      }\n                    }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"client_context\": {\n                          \"id\": 1,\n                          \"name\": \"DOCU_NEW\",\n                          \"constant_filters\": [\n                            {\n                              \"administrative_units\": [],\n                              \"categories\": [],\n                              \"development_types\": [],\n                              \"stages\": [],\n                              \"company_roles\": [],\n                              \"materials\": [],\n                              \"countries\": [],\n                              \"project_types\": [],\n                              \"tender_roles\": [],\n                              \"value_min\": 0,\n                              \"value_max\": 0,\n                              \"currency_id\": 1,\n                              \"start_date\": \"2020-10-18\"\n                            }\n                          ],\n                          \"client_company_folders\": [\n                              {\n                                  \"id\": 1,\n                                  \"name\": \"Prospects\",\n                                  \"client_company_folder_type_id\": 1\n                              }\n                          ],\n                          \"history_start_date\": \"2018-10-01T05:00:00Z\",\n                          \"activated\": 1,\n                          \"package_id\": 5,\n                          \"client_roles\": [],\n                          \"country_id\": 1,\n                          \"base_url\": \"some.baseurl_1\",\n                          \"support_name\": \"Support Name Client #1\",\n                          \"support_email\": \"support-email-1@docu.se\",\n                          \"support_phone\": \"+380506543210\",\n                          \"package_expire_at\": \"2028-10-01T05:00:00Z\"\n                          }\n                      }\n                  }\n                },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:1) was yanked');}\"\n                      }\n                  }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_client_context\",\n                                \"params\": {\n                      \"client_id\": 44\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                      \"client_context\": {\n                        \"id\": 44,\n                        \"name\": \"DOCU_NEW_44\",\n                        \"constant_filters\": [\n                          {\n                            \"administrative_units\": [ 1 ],\n                            \"categories\": [],\n                            \"development_types\": [],\n                            \"stages\": [],\n                            \"company_roles\": [],\n                            \"materials\": [],\n                            \"countries\": [],\n                            \"project_types\": [],\n                            \"tender_roles\": [],\n                            \"value_min\": 0,\n                            \"value_max\": 0,\n                            \"currency_id\": 1,\n                            \"start_date\": \"2020-10-18\"\n                          }\n                        ],\n                        \"client_company_folders\": [\n                          {\n                            \"id\": 1,\n                            \"name\": \"Prospects\",\n                            \"client_company_folder_type_id\": 1\n                          }\n                        ],\n                        \"history_start_date\": \"2018-10-01T05:44:44Z\",\n                        \"activated\": 1,\n                        \"package_id\": 5,\n                        \"client_roles\": [{\"id\":1,\"client_role_type_id\":1,\"company_role_id\":35},{\"id\":2,\"client_role_type_id\":1,\"company_role_id\":116},{\"id\":3,\"client_role_type_id\":2,\"company_role_id\":29},{\"id\":4,\"client_role_type_id\":2,\"company_role_id\":74},{\"id\":5,\"client_role_type_id\":2,\"company_role_id\":75},{\"id\":6,\"client_role_type_id\":2,\"company_role_id\":76},{\"id\":7,\"client_role_type_id\":2,\"company_role_id\":77},{\"id\":8,\"client_role_type_id\":2,\"company_role_id\":122}],\n                        \"base_url\": \"some.baseurl44\",\n                        \"support_name\": \"Support Name Client #44\",\n                        \"support_email\": \"support-email-44@docu.se\",\n                        \"support_phone\": \"+380506543210\",\n                        \"package_expire_at\": \"2028-10-01T05:00:00Z\"\n                        }\n                      }\n                    }\n                  },\n                  \"_behaviors\": {\n                    \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_client_context(client_id:44) was yanked');}\"\n                  }\n                }\n                ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": null,\n                    \"user_id\": null,\n                    \"license_id\": null,\n                    \"package_id\": 3,\n                    \"acc_setting_type\": 5\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 5,\n                          \"modules\": [ 5 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:5, package_id:3) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": null,\n                    \"user_id\": null,\n                    \"license_id\": 1,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 1\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 1,\n                          \"modules\": [ 1, 2, 3 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:1, license_id:1) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": 1,\n                    \"user_id\": null,\n                    \"license_id\": null,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 2\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 2,\n                          \"modules\": [ 4 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:2, client_id:1) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": 2,\n                    \"user_id\": null,\n                    \"license_id\": 2,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 3\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 3,\n                          \"modules\": [ 7 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:3, client_id:2, license_id:2) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": 1,\n                    \"user_id\": 1,\n                    \"license_id\": 2,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 4\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 4,\n                          \"modules\": [ 3, 4 ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:3, client_id:1, user_id:1, license_id:2) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_modules\",\n                                \"params\": {\n                    \"client_id\": null,\n                    \"user_id\": 8,\n                    \"license_id\": null,\n                    \"package_id\": null,\n                    \"acc_setting_type\": 6\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"acc_setting_type\": 6,\n                          \"modules\": [ ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_modules(acc_setting_type:6, user_id:8) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_module_components\",\n                                \"params\": {\n                    \"module_id\": 5\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"error\": {\n                          \"code\": 604,\n                        \"message\": \"Module does not found\"\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_module_components(module_id:5) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n              {\n                  \"predicates\": [\n                      {\n                          \"equals\": {\n                              \"body\": {\n                                \"method\": \"get_module_components\",\n                                \"params\": {\n                    \"module_id\": 4\n                    }\n                            }\n                          }\n                      }\n                  ],\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"result\": {\n                          \"module_id\": 4,\n                          \"components\": [\n                              \"advanced_search\"\n                          ]\n                      }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_module_components(module_id:4) was yanked');}\"\n                          }\n                      }\n                  ]\n              },\n      \n              {\n                  \"responses\": [\n                      {\n                          \"is\": {\n                              \"headers\": {\n                                  \"Content-Type\": \"application/json\",\n                                  \"Accept\": \"application/json\"\n                              },\n                              \"body\": {\n                      \"jsonrpc\": \"2.0\",\n                      \"id\": \"request_id\",\n                    \"error\": {\n                      \"code\":500,\n                      \"message\": \"No matches with any imposter predicate.\",\n                      \"data\": {\n                        \"request\":{}\n                      }\n                    }\n                  }\n                          },\n                          \"_behaviors\": {\n                        \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.response.body.error.data.request = JSON.parse(config.request.body);}\"\n                          }\n                      }\n                  ]\n              }\n          ],\n          \"_links\": {\n              \"self\": {\n                  \"href\": \"http://localhost:2525/imposters/8085\"\n              }\n          }\n      }"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhook_queue",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhook_queue\",\n  \"id\": \"9191\",\n  \"params\": {\n      \"webhook_queue_id\": 1\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_webhookqueue_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_webhookqueue_list\",\n  \"id\": \"919\",\n  \"params\": {\n      \"query\": {}\n   }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Dictionary",
			"item": [
				{
					"name": "get_dict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.type).to.eql(\"vocabularies\");",
									"});",
									"",
									"pm.test(\"Body matches string '1556181435'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1556181435\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"912\",\n  \"params\": {\n    \"type\": \"lookups\",\n    \"section\": \"test\",\n    \"language_id\": 1\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1",
								""
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"type\": \"{string/req/enum(errors,lookups,vocabularies)}\",\n    \"section\": \"{string/req}\",\n    \"language_id\": \"{int}\"\n  }\n}"
					},
					"response": []
				},
				{
					"name": "get_company_role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.type).to.eql(\"vocabularies\");",
									"});",
									"",
									"pm.test(\"Body matches string '1556181435'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1556181435\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_company_role\",\n  \"id\": \"912\",\n  \"params\": {\n    \"company_role_id\": 1\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1",
								""
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"type\": \"{string/req/enum(errors,lookups,vocabularies)}\",\n    \"section\": \"{string/req}\",\n    \"language_id\": \"{int}\"\n  }\n}"
					},
					"response": []
				},
				{
					"name": "api/dictionaries/company_roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.result.type).to.eql(\"vocabularies\");",
									"});",
									"",
									"pm.test(\"Body matches string '1556181435'\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"1556181435\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:8080/api/dictionaries/company_roles",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"dictionaries",
								"company_roles"
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_dict\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"type\": \"{string/req/enum(errors,lookups,vocabularies)}\",\n    \"section\": \"{string/req}\",\n    \"language_id\": \"{int}\"\n  }\n}"
					},
					"response": []
				},
				{
					"name": "get_dict_version",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_dict_versions\",\n    \"id\": \"911\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1",
								""
							]
						},
						"description": "POST /json-rpc-endpoint HTTP/1.1\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"get_dict_versions\",\n    \"id\": \"{int/req}\",\n    \"params\": null\n}"
					},
					"response": []
				},
				{
					"name": "section_update_trigger",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"section_update_trigger\",\n  \"id\": \"912\",\n  \"params\": {\n    \"type\": \"vocabularies\",\n    \"section\": \"login\"\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "menu_update_trigger",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"menu_update_trigger\",\n  \"id\": \"912\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_menu_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_menu_list\",\n  \"id\": \"912\"\n}"
						},
						"url": {
							"raw": "http://localhost:8080/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CRM service",
			"item": [
				{
					"name": "Custom fields",
					"item": [
						{
							"name": "post_custom_field",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_custom_field\",\n  \"id\": \"9116\",\n  \"params\": {\n    \"data\": {\n        \"name\": \"Age 6\",\n        \"custom_fieldset_id\": 2,\n        \"custom_field_type_id\": 9,\n        \"formula_name\": \"Volume\",\n        \"priority\": 1\n  \t}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_custom_field_list",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_custom_field_list\",\n  \"id\": \"912\",\n  \"params\": {\n      \"query\": {\n    \t\"filter\": {\n    \t}\n      }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "put_custom_field",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_custom_field\",\n  \"id\": \"9130\",\n  \"params\": {\n  \t\"data\": {\n\t\t\"id\": 1,\n        \"name\": \"Age 1\",\n        \"custom_fieldset_id\": 1,\n        \"custom_field_type_id\": 9,\n        \"formula_name\": \"1234\",\n        \"priority\": 1\n\t  }\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_custom_field",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_custom_field\",\n  \"id\": \"914\",\n  \"params\": {\n    \"custom_field_id\": 1\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_custom_field name",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_custom_field\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"custom_field_id\": 1,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"name\",\n                \"value\": \"Age 1 PATCHED\"\n            }\n        ]\n\t}\n}"
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "post_custom_fieldset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_custom_fieldset\",\n  \"id\": \"916\",\n  \"params\": {\n    \"data\": {\n        \"client_id\": 9,\n        \"entity_type_id\": 1,\n        \"name\": \"Age\",\n        \"priority\": 1\n  \t}\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_custom_fieldset_list",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_custom_fieldset_list\",\n  \"id\": \"917\",\n  \"params\": {\n      \"query\": {\n    \t\"filter\": {\n    \t}\n      }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "put_custom_fieldset ???",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_custom_fieldset\",\n  \"id\": \"918\",\n  \"params\": {\n  \t\"data\": {\n\t\t\"id\": 1,\n\t\t\"client_id\": 9,\n        \"entity_type_id\": 1,\n        \"name\": \"Age\",\n        \"priority\": 1\n\t  }\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_custom_fieldset",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_custom_fieldset\",\n  \"id\": \"919\",\n  \"params\": {\n    \"custom_fieldset_id\": 1\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_custom_fieldset name",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_custom_fieldset\",\n  \"id\": \"920\",\n  \"params\": {\n  \t\"custom_fieldset_id\": 1,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"name\",\n                \"value\": \"Age PATCHED\"\n            }\n        ]\n\t}\n}"
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_custom_fieldset all fields",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_custom_fieldset\",\n  \"id\": \"921\",\n  \"params\": {\n  \t\"custom_fieldset_id\": 1,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"name\",\n                \"value\": \"Age\"\n            },\n                        {\n                \"op\": \"replace\",\n                \"path\": \"client_id\",\n                \"value\": 10\n            },\n                        {\n                \"op\": \"replace\",\n                \"path\": \"entity_type_id\",\n                \"value\": 2\n            },\n                        {\n                \"op\": \"replace\",\n                \"path\": \"priority\",\n                \"value\": 2\n            }\n        ]\n\t}\n}"
								},
								"url": {
									"raw": "http://localhost:8082/jsonrpc/v1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8082",
									"path": [
										"jsonrpc",
										"v1"
									],
									"query": [
										{
											"key": "",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_note",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note\",\n  \"id\": \"912\",\n  \"params\": {\n  \t\"note_id\": 19\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_tag",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_tag\",\n  \"id\": \"912\",\n  \"params\": {\n  \t\"tag_id\": 1\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_tag_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_tag_list\",\n  \"id\": \"912\",\n  \"params\": {\n          \"query\": {\n           }\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"jsonrpc\": \"2.0\",\n\t\"method\": \"get_activity\",\n\t\"id\": \"4912\",\n\t\"params\": {\n\t\t\"utc_offset\": \"+01:00\",\n\t\t\"activity_id\":36\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_search\",\n  \"id\": \"912\",\n  \"params\": {\n    \"search_id\": 25\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_search_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_search_list\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_search_list (with pagination)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_search_list\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n  \t\t\"offset\": 1,\n\t\t\"limit\": 2\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_search_list (with filtering by list_type_id)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_search_list\",\n  \"id\": \"915\",\n  \"params\": {\n          \"query\": {\n            \"filter\": {\n              \"list_type_id\": {\n                \"eq\": 3\n      \t      }\n            },\n            \"sort\": {\n      \t      \"modified_at\": {\n      \t        \"order\": \"d\"\n      \t      }\n      \t    }\n          }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_fieldset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_fieldset\",\n  \"id\": \"912\",\n  \"params\": {\n    \"list_type_id\": 6\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "put_fieldset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_fieldset\",\n  \"id\": \"916\",\n  \"params\": {\n  \t\"data\": {\n\t\t\"list_type_id\": 6,\n\t\t\"fieldset\": [\n\t\t\t\"12345\",\n\t\t\t\"23456\"\n\t\t]\n\t  }\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get_entities_with_notes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_entities_with_notes\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n \t    \"filter\": {\n\t  \t\t\"entity_type_id\": {\n\t  \t\t\t\"eq\": 3\n\t  \t\t},\n\t  \t\t\"user_id\": {\n\t  \t\t\t\"eq\": 3\n\t  \t\t},\n\t  \t\t\"entity_id\": {\n\t  \t\t\t\"in\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 25]\n\t  \t\t}\n \t    }\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_entities_with_notes (with empty query)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_entities_with_notes\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n \t    \"filter\": {\n\t  \t\t\"entity_type_id\": {\n\t  \t\t\t\"eq\": 3\n\t  \t\t},\n\t  \t\t\"entity_id\": {\n\t  \t\t\t\"not_all\": [4, 10, 25, 40]\n\t  \t\t}\n \t    }\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_entities_with_activities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_entities_with_activities\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n \t    \"filter\": {\n\t  \t\t\"entity_type_id\": {\n\t  \t\t\t\"eq\": 1\n\t  \t\t},\n\t  \t\t\"entity_id\": {\n\t  \t\t\t\"in\": [4, 9, 7]\n\t  \t\t}\n \t    }\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_list (no filter)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note_list\",\n  \"id\": \"915\",\n  \"params\": {\n          \"query\": {\n       \t    \"sort\": {\n      \t      \"modified_at\": {\n      \t        \"order\": \"d\"\n      \t      }\n      \t    },\n            \"offset\": 1,\n            \"limit\": 2\n        \t}\n        }\n  \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_list (with pagination)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note_list\",\n  \"id\": \"915\",\n  \"params\": {\n          \"query\": {\n            \"filter\": {\n              \"private\": {\n      \t    \t\t\"eq\": 1\n      \t      }\n      \t    },\n       \t    \"sort\": {\n      \t      \"modified_at\": {\n      \t        \"order\": \"d\"\n      \t      }\n      \t    },\n        \t\t\"offset\": 0,\n        \t\t\"limit\": 2\n        \t}\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_list (with filtering by private and with pagination)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note_list\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n\t    \"filter\": {\n\t      \"private\": {\n\t        \"eq\": 0\n\t      }\n\t    },\n   \t    \"sort\": {\n\t      \"user_id\": {\n\t        \"order\": \"a\"\n\t      }\n\t    },\n        \"offset\": 0,\n        \"limit\": 4\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_list (with filtering and sorting)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note_list\",\n  \"id\": \"915\",\n  \"params\": {\n          \"query\": {\n      \t    \"filter\": {\n      \t      \"modified_at\": {\n      \t        \"lte\": \"2019-09-30T07:57:36.4843371\"\n      \t      }\n      \t    },\n       \t    \"sort\": {\n      \t      \"modified_at\": {\n      \t        \"order\": \"d\"\n      \t      }\n      \t    }\n        \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_note_list (with filtering by  entity_type_id)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_note_list\",\n  \"id\": \"915\",\n  \"params\": {\n  \t\"query\": {\n\t    \"filter\": {\n\t    \t\"entity_type_id\": {\n\t    \t\t\"eq\": 1\n\t    \t}\n\t    }\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_activity_list",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_activity_list\",\n  \"id\": \"915\",\n  \"params\": {\n      \"utc_offset\": \"+00:00\",\n      \"query\": {\n    \t\"filter\": {\n    \t}\n      }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_activity_list with filters",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_activity_list\",\n  \"id\": \"9152\",\n  \"params\": {\n    \"utc_offset\": \"+00:00\",\n  \t\"query\": {\n          \"filter\": {\n              \"activity_status\": {\n      \t    \t\t\"eq\": 3\n      \t      }\n          }\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "post_note",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_note\",\n  \"id\": \"916\",\n  \"params\": {\n  \t\"data\": {\n\t\t\"note\": \"My new note\",\n\t\t\"entity_type_id\": 2,\n\t\t\"entity_id\": 1,\n\t\t\"pinned\": 1,\n\t\t\"private\": 0\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "post_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_activity\",\n  \"id\": \"91666\",\n  \"params\": {\n  \t\"data\": {\n            \"utc_offset\": \"+00:00\",\n            \"title\": \"TODAY\",\n            \"note\": \"111111\",\n            \"entity_type_id\": 2,\n            \"entity_id\": 1,\n            \"start_date_time\": \"2021-03-04T13:30:02Z\",\n            \"finish_date_time\": \"2021-03-07T14:30:02Z\",\n            \"done\": 0,\n            \"remind\": 1,\n            \"remind_before_minutes\": 15,\n            \"assigned_to\": 2,\n            \"activity_type_id\": 2\n        \t}\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "post_tag",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_tag\",\n  \"id\": \"916\",\n  \"params\": {\n  \t\"data\": {\n\t  \"name\": \"Oslo\",\n\t  \"color\": \"Blue\"\n\t }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "post_search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_search\",\n  \"id\": \"9167\",\n  \"params\": {\n  \t\"data\": {\n        \"list_type_id\": 3,\n        \"name\": \"New search\",\n        \"settings\": {\"search\":\"Some string\",\"filters\":[{\"field\":\"name\",\"operator\":\"in\",\"value\":\"Some value\"}]},\n        \"notify\": 1,\n        \"notif_mode\": {\"sending_mode\":2,\"day_of_week\":null,\"time\":\"10:00\",\"date_time\":null},\n        \"notif_gateways\": [1,2,3],\n        \"user_id\": 5\n  \t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "put_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"put_activity\",\n  \"id\": \"916\",\n  \"params\": {\n    \t\"data\": {\n        \"activity_id\": 20,\n        \"title\": \"Activity title of 20\",\n        \"note\": \"The activity record was created by put_activity method\",\n        \"start_date_time\": \"2019-10-18T16:44:45-02:00\",\n        \"finish_date_time\": \"2019-11-18T16:44:45Z\",\n        \"done\": 0,\n        \"remind\": 1,\n        \"remind_before_minutes\": 30,\n        \"assigned_to\": 3,\n        \"activity_type_id\": 3\n    \t}\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_activity\",\n  \"id\": \"9286\",\n  \"params\": {\n      \"activity_id\": 36,\n      \"patch\": [\n        {\n\t        \"op\": \"replace\",\n\t        \"path\": \"done\",\n\t        \"value\": 0\n  \t    }\n      ]\n    }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_note",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_note\",\n  \"id\": \"913\",\n  \"params\": {\n  \t\"note_id\": 3,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"note\",\n                \"value\": \"TestNoteChanged33\"\n            },\n            {\n                \"op\": \"replace\",\n                \"path\": \"pinned\",\n                \"value\": \"1\"\n            },\n            {\n                \"op\": \"replace\",\n                \"path\": \"private\",\n                \"value\": \"1\"\n            }\n        ]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_search\",\n  \"id\": \"9193\",\n  \"params\": {\n  \t\"search_id\": 25,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"name\",\n                \"value\": \"Developer\"\n            }\n        ]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "patch_search name",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"patch_search\",\n  \"id\": \"9190\",\n  \"params\": {\n  \t\"search_id\": 25,\n    \"patch\": [\n            {\n                \"op\": \"replace\",\n                \"path\": \"notify\",\n                \"value\": 1\n            },\n            {\n                \"op\": \"replace\",\n                \"path\": \"notif_mode\",\n                \"value\": {\n                    \"sending_mode\": 2,\n                    \"time\": \"08:00\"\n                }\n            },\n            {\n                \"op\": \"replace\",\n                \"path\": \"notif_gateways\",\n                \"value\": [2,3]\n            }\n        ]\n\t}\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_note",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_note\",\n  \"id\": \"913\",\n  \"params\": {\n    \"note_id\": 6\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Request-Id",
								"value": "a8f468e3-9ce6-4e70-8d42-de3992f8ff16",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_activity\",\n  \"id\": \"9356\",\n  \"params\": {\n    \"activity_id\": 14\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete_search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_search\",\n  \"id\": \"932\",\n  \"params\": {\n    \"search_id\": 31\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "reset_fieldset",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"reset_fieldset\",\n  \"id\": \"912\",\n  \"params\": {\n    \"list_type_id\": 6\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "download_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"download_activity\",\n  \"id\": \"9\",\n  \"params\": {\n    \"activity_id\": 31,\n    \"file_format\": \"iCalendar\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "send_activity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"send_activity\",\n  \"id\": \"933\",\n  \"params\": {\n\t  \"activity_id\": 5,\n\t  \"file_format\": \"iCalendar\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						}
					},
					"response": []
				},
				{
					"name": "UTC",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8085/utc",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8085",
							"path": [
								"utc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Imposter",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"protocol\": \"http\",\n    \"port\": 8085,\n    \"numberOfRequests\": 0,\n    \"recordRequests\": true,\n    \"requests\": [],\n    \"stubs\": [\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"path\": \"/utc\",\n            \"method\": \"GET\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"utc_the_month_before\": \"\",\n                \"utc_the_day_before\": \"\",\n                \"utc_before\": \"\",\n                \"utc_now\": \"\",\n                \"utc_after\": \"\",\n                \"utc_after2\": \"\",\n                \"utc_the_day_after\": \"\",\n                \"utc_the_month_after\": \"\"\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { var now = new Date(); config.response.body.utc_now = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 1); config.response.body.utc_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 2); config.response.body.utc_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 1); config.response.body.utc_after2 = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 26); config.response.body.utc_the_day_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 48); config.response.body.utc_the_day_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 1); config.response.body.utc_the_day_after2 = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() - 750); config.response.body.utc_the_month_before = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z'); now.setHours(now.getHours() + 1500); config.response.body.utc_the_month_after = now.toISOString().replace(/\\\\.\\\\d\\\\d\\\\dZ$/, 'Z')}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/0\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"method\": \"POST\",\n            \"body\": {\n                \"method\": \"get_user\",\n                \"params\": {\n                \"user_id\": 33\n                }\n            }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"error\": {\n                \"code\": 604,\n                \"message\": \"User #33 does not exist\"\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:33) was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/1\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"method\": \"POST\",\n            \"body\": {\n                \"method\": \"get_user\",\n                \"params\": {\n                \"user_id\": 23\n                }\n            }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"result\": {\n                \"data\": {\n                    \"id\": 1,\n                    \"email\": \"autotest-smart-dummy@july.agency\",\n                    \"name\": \"Dummy\",\n                    \"phone\": \"+380501111111\",\n                    \"client_id\": 1,\n                    \"language_id\": 2,\n                    \"license_id\": 4,\n                    \"currency_id\": 1,\n                    \"geo_division_id\": 3,\n                    \"department_id\": 5,\n                    \"position_id\": 6,\n                    \"pic\": null,\n                    \"updates_notif_mode\": {\n                    \"sending_mode\": 2,\n                    \"day_of_week\": null,\n                    \"time\": \"10:00\",\n                    \"datetime\": null\n                    },\n                    \"updates_notif_gateways\": [\n                    1\n                    ],\n                    \"status\": 1,\n                    \"timezone\": \"Europe/Stockholm\"\n                }\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:23) was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/2\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"method\": \"POST\",\n            \"body\": {\n                \"method\": \"get_user\",\n                \"params\": {\n                \"user_id\": 2\n                }\n            }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"result\": {\n                \"data\": {\n                    \"id\": 1,\n                    \"email\": \"autotest-smart-attandee@july.agency\",\n                    \"name\": \"Attendee\",\n                    \"phone\": \"+380501111111\",\n                    \"client_id\": 1,\n                    \"language_id\": 2,\n                    \"license_id\": 4,\n                    \"currency_id\": 1,\n                    \"geo_division_id\": 3,\n                    \"department_id\": 5,\n                    \"position_id\": 6,\n                    \"pic\": null,\n                    \"updates_notif_mode\": {\n                    \"sending_mode\": 2,\n                    \"day_of_week\": null,\n                    \"time\": \"10:00\",\n                    \"datetime\": null\n                    },\n                    \"updates_notif_gateways\": [\n                    1\n                    ],\n                    \"status\": 2,\n                    \"timezone\": \"Europe/Stockholm\"\n                }\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:2) was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/3\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"method\": \"POST\",\n            \"headers\": {\n                \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n                \"method\": \"get_user\",\n                \"params\": {\n                \"user_id\": 4\n                }\n            }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"result\": {\n                \"data\": {\n                    \"id\": 4,\n                    \"email\": \"autotest-smart-organizer@july.agency\",\n                    \"name\": \"Organizer\",\n                    \"phone\": \"+380502222222\",\n                    \"client_id\": 1,\n                    \"language_id\": 2,\n                    \"license_id\": 4,\n                    \"currency_id\": 1,\n                    \"geo_division_id\": 3,\n                    \"department_id\": 5,\n                    \"position_id\": 6,\n                    \"pic\": null,\n                    \"updates_notif_mode\": {\n                    \"sending_mode\": 2,\n                    \"day_of_week\": null,\n                    \"time\": \"10:00\",\n                    \"datetime\": null\n                    },\n                    \"updates_notif_gateways\": [\n                    1\n                    ],\n                    \"status\": 2,\n                    \"timezone\": \"Europe/Stockholm\"\n                }\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:4) was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/4\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n            \"method\": \"POST\",\n            \"headers\": {\n                \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n                \"method\": \"get_user\",\n                \"params\": {\n                \"user_id\": 10\n                }\n            }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"result\": {\n                \"data\": {\n                    \"id\": 10,\n                    \"email\": \"autotest-smart-dummy@july.agency\",\n                    \"name\": \"Dummy\",\n                    \"phone\": \"+380502222222\",\n                    \"client_id\": 1,\n                    \"country_id\": 1,\n                    \"language_id\": 2,\n                    \"license_id\": 2,\n                    \"currency_id\": 1,\n                    \"geo_division_id\": 3,\n                    \"department_id\": 5,\n                    \"position_id\": 6,\n                    \"pic\": null,\n                    \"updates_notif_mode\": {\n                    \"sending_mode\": 2,\n                    \"day_of_week\": null,\n                    \"time\": \"10:00\",\n                    \"datetime\": null\n                    },\n                    \"updates_notif_gateways\": [\n                    1\n                    ],\n                    \"status\": 1,\n                    \"timezone\": \"Europe/Stockholm\"\n                }\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_user(user_id:10) was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/5\"\n        }\n        }\n    },\n    {\n        \"predicates\": [\n        {\n            \"equals\": {\n                \"method\": \"POST\",\n                \"body\": {\n                    \"method\": \"get_settings\"\n                }\n            }\n        },\n        {\n            \"matches\": {\n                \"path\": \"/jsonrpc/v1\\/?\"\n            }\n        }\n        ],\n        \"responses\": [\n        {\n            \"is\": {\n            \"headers\": {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            },\n            \"body\": {\n                \"jsonrpc\": \"2.0\",\n                \"id\": \"request_id\",\n                \"result\": {\n                    \"PROJECT_URI\": \"https://smart.byggfakta.no/leads/projects/{project_id}\",\n                    \"TENDER_URI\": \"https://smart.byggfakta.no/leads/tenders/{tender_id}\",\n                    \"COMPANY_URI\": \"https://smart.byggfakta.no/leads/companies/{company_id}\",\n                    \"CONTACT_URI\": \"https://smart.byggfakta.no/leads/contacts/{contact_id}\"\n                }\n            }\n            },\n            \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; config.logger.info('get_settings was yanked');}\"\n            }\n        }\n        ],\n        \"_links\": {\n        \"self\": {\n            \"href\": \"http://localhost:2525/imposters/8085/stubs/6\"\n        }\n        }\n    }\n    ],\n    \"_links\": {\n    \"self\": {\n        \"href\": \"http://localhost:2525/imposters/8085\"\n    },\n    \"stubs\": {\n        \"href\": \"http://localhost:2525/imposters/8085/stubs\"\n    }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						}
					},
					"response": []
				},
				{
					"name": "/noauth/user USER license #3 u#4, c#9, !=src_read",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/noauth/user?type=usr&sub=4&email=adminv@docu.se&user_client_id=9&package_id=1&language_id=1&license_id=3&currency_id=1&components=astring1,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"noauth",
								"user"
							],
							"query": [
								{
									"key": "type",
									"value": "usr"
								},
								{
									"key": "sub",
									"value": "4"
								},
								{
									"key": "email",
									"value": "adminv@docu.se"
								},
								{
									"key": "user_client_id",
									"value": "9"
								},
								{
									"key": "package_id",
									"value": "1"
								},
								{
									"key": "language_id",
									"value": "1"
								},
								{
									"key": "license_id",
									"value": "3"
								},
								{
									"key": "currency_id",
									"value": "1"
								},
								{
									"key": "components",
									"value": "astring1,astring2,astring3"
								},
								{
									"key": "user_status",
									"value": "1"
								},
								{
									"key": "client_activated",
									"value": "true"
								},
								{
									"key": "versions:user",
									"value": "1"
								},
								{
									"key": "versions:client",
									"value": "2"
								},
								{
									"key": "versions:license",
									"value": "3"
								},
								{
									"key": "versions:package",
									"value": "1"
								},
								{
									"key": "client_id",
									"value": "2"
								},
								{
									"key": "access_type",
									"value": "astring"
								},
								{
									"key": "country_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/noauth/user SUPPORT license #1 u#4, c#9, !=src_read",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8082/noauth/user?type=usr&sub=4&email=adminv@docu.se&user_client_id=9&package_id=1&language_id=1&license_id=1&currency_id=1&components=astring1,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"noauth",
								"user"
							],
							"query": [
								{
									"key": "type",
									"value": "usr"
								},
								{
									"key": "sub",
									"value": "4"
								},
								{
									"key": "email",
									"value": "adminv@docu.se"
								},
								{
									"key": "user_client_id",
									"value": "9"
								},
								{
									"key": "package_id",
									"value": "1"
								},
								{
									"key": "language_id",
									"value": "1"
								},
								{
									"key": "license_id",
									"value": "1"
								},
								{
									"key": "currency_id",
									"value": "1"
								},
								{
									"key": "components",
									"value": "astring1,astring2,astring3"
								},
								{
									"key": "user_status",
									"value": "1"
								},
								{
									"key": "client_activated",
									"value": "true"
								},
								{
									"key": "versions:user",
									"value": "1"
								},
								{
									"key": "versions:client",
									"value": "2"
								},
								{
									"key": "versions:license",
									"value": "3"
								},
								{
									"key": "versions:package",
									"value": "1"
								},
								{
									"key": "client_id",
									"value": "2"
								},
								{
									"key": "access_type",
									"value": "astring"
								},
								{
									"key": "country_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AuthService",
			"item": [
				{
					"name": "add_dummy",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"add_dummy\",\n  \"id\": \"911\",\n  \"params\": {\n      \"email\": \"autotest-smart-dimmy4@july.agency\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds dummy for the user (record with empty password)\n\nRequest schema\n{ \"email\": \"{string/req}\" }\n\nLogic:\nCheck if user with the specified email already exists.\nIf user is dummy (no password), response with user id\nIf user is real, return error User exists and exit\nIf email doesn't exist\nAdd the user to the AspNetUsers table (dummy, with empty password).\nResponse schema\n{ \"id\": \"{int/req}\" }"
					},
					"response": []
				},
				{
					"name": "generate_token (with email)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"generate_token\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n      \"email\": \"sharp.admin@docu.se\",\n\t  \"token_type\": 2\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8082/jsonrpc/v1",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds passwordless token for the user\n\ngateway route\nPOST /api/token\n\nRequest schema\n{\n  \"data\": {\n    \"email\": \"{string/req in case id doesn't specified}\",\n    \"id\": \"{int/req in case email  doesn't specified}\",\n    \"token_type\": \"{int}\"\n  }\n}\nLogic:\n\nIf email specified\n\nGet the user by email\nIf user is dummy or doesn't exist, return app level error Not found\nIf the user is not dummy, generate new token of the specified type (config/enums/UserTokenTypes)\nIf id specified\n\nGenerate new token for the user by id\nProduce topic notification, schema sharp/Notification\n\nIf token_type== config/enums/UserTokenTypes.MAGIC_LINK\n\nSubject = \"user_magic_link\"\nIf token_type== config/enums/UserTokenTypes.RESET_PASSWORD\n\nSubject = \"user_reset_password\"\nIf token_type== config/enums/UserTokenTypes.INVITE\n\nSubject = \"user_invite\"\nContextJson (serialized):\n\n{\n \"user\": {\n   \t\"id\": \"{int/req}\" \n  },\n  \"token\": \"{int/req}\"\n}\nResponse schema\n{\n  \"id\": \"{int/req}\",\n  \"token\": \"{string}\"\n}"
					},
					"response": []
				},
				{
					"name": "generate_token (with id)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"generate_token\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n      \"id\": 1,\n\t  \"token_type\": 1\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds passwordless token for the user\n\ngateway route\nPOST /api/token\n\nRequest schema\n{\n  \"data\": {\n    \"email\": \"{string/req in case id doesn't specified}\",\n    \"id\": \"{int/req in case email  doesn't specified}\",\n    \"token_type\": \"{int}\"\n  }\n}\nLogic:\n\nIf email specified\n\nGet the user by email\nIf user is dummy or doesn't exist, return app level error Not found\nIf the user is not dummy, generate new token of the specified type (config/enums/UserTokenTypes)\nIf id specified\n\nGenerate new token for the user by id\nProduce topic notification, schema sharp/Notification\n\nIf token_type== config/enums/UserTokenTypes.MAGIC_LINK\n\nSubject = \"user_magic_link\"\nIf token_type== config/enums/UserTokenTypes.RESET_PASSWORD\n\nSubject = \"user_reset_password\"\nIf token_type== config/enums/UserTokenTypes.INVITE\n\nSubject = \"user_invite\"\nContextJson (serialized):\n\n{\n \"user\": {\n   \t\"id\": \"{int/req}\" \n  },\n  \"token\": \"{int/req}\"\n}\nResponse schema\n{\n  \"id\": \"{int/req}\",\n  \"token\": \"{string}\"\n}"
					},
					"response": []
				},
				{
					"name": "generate_token (for redirect)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"generate_token\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n\t\t\"email\": null,\n\t\t\"id\": null,\n\t  \"token_type\": 4\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds passwordless token for the user\n\ngateway route\nPOST /api/token\n\nRequest schema\n{\n  \"data\": {\n    \"email\": \"{string/req in case id doesn't specified}\",\n    \"id\": \"{int/req in case email  doesn't specified}\",\n    \"token_type\": \"{int}\"\n  }\n}\nLogic:\n\nIf email specified\n\nGet the user by email\nIf user is dummy or doesn't exist, return app level error Not found\nIf the user is not dummy, generate new token of the specified type (config/enums/UserTokenTypes)\nIf id specified\n\nGenerate new token for the user by id\nProduce topic notification, schema sharp/Notification\n\nIf token_type== config/enums/UserTokenTypes.MAGIC_LINK\n\nSubject = \"user_magic_link\"\nIf token_type== config/enums/UserTokenTypes.RESET_PASSWORD\n\nSubject = \"user_reset_password\"\nIf token_type== config/enums/UserTokenTypes.INVITE\n\nSubject = \"user_invite\"\nContextJson (serialized):\n\n{\n \"user\": {\n   \t\"id\": \"{int/req}\" \n  },\n  \"token\": \"{int/req}\"\n}\nResponse schema\n{\n  \"id\": \"{int/req}\",\n  \"token\": \"{string}\"\n}"
					},
					"response": []
				},
				{
					"name": "revoke_token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"revoke_token\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"id\": 4,\n\t\"token_type\": 1\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Revoke passwordless token for the user\n\nRequest schema\n{\n  \"id\": \"{int/req}\",\n  \"token_type\": \"{int}\"\n}\nLogic:\n\nCheck if user with the specified id exists. If no - return error.\nRemove passwordless token of specified type for the user (if exists).\nResponse schema\nBoolean"
					},
					"response": []
				},
				{
					"name": "change_password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"change_password\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n      \"password\": \"ghbdtn1113\"\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Revoke passwordless token for the user\n\nRequest schema\n{\n  \"id\": \"{int/req}\",\n  \"token_type\": \"{int}\"\n}\nLogic:\n\nCheck if user with the specified id exists. If no - return error.\nRemove passwordless token of specified type for the user (if exists).\nResponse schema\nBoolean"
					},
					"response": []
				},
				{
					"name": "suspend_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"suspend_user\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n      \"id\": 1\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Revoke passwordless token for the user\n\nRequest schema\n{\n  \"id\": \"{int/req}\",\n  \"token_type\": \"{int}\"\n}\nLogic:\n\nCheck if user with the specified id exists. If no - return error.\nRemove passwordless token of specified type for the user (if exists).\nResponse schema\nBoolean"
					},
					"response": []
				},
				{
					"name": "unsuspend_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"unsuspend_user\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"data\": {\n      \"id\": 1\n\t}\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Revoke passwordless token for the user\n\nRequest schema\n{\n  \"id\": \"{int/req}\",\n  \"token_type\": \"{int}\"\n}\nLogic:\n\nCheck if user with the specified id exists. If no - return error.\nRemove passwordless token of specified type for the user (if exists).\nResponse schema\nBoolean"
					},
					"response": []
				},
				{
					"name": "init_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"init_user\",\n  \"id\": \"916\",\n  \"params\": {\n\t\"id\": 1,\n    \"password\": \"ghbdtn\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Init dummy user to real one\n\nRequest schema\n{\n  \"id\": \"{int/req}\",\n  \"password\": \"{string/req}\"\n}\nLogic:\n\nCheck if user with the specified id already exists (dummy or not, doesn't metter). If no - return error.\nHash* password and save it to the AspNetUsers table for the user\nIf user was dummy, set it to real user\nResponse schema\nBoolean"
					},
					"response": []
				},
				{
					"name": "add_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"add_user\",\n  \"id\": \"916\",\n  \"params\": {\n    \"idempotence_key\": \"\",\n    \"user\": {\n      \"email\": \"autotest-sharp-user2@july.agency\",\n      \"password\": \"ghbdtn\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds new user\n\nRequest schema\nPOST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"add_user\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"idempotence_key\": \"{guid/req}\",\n    \"user\": {\n      \"email\": \"{string/req}\",\n      \"password\": \"{string/req}\"\n    }\n  }\n}\nLogic:\n\nCheck if the idempotence_key exists in Redis idempotence table. If exists - return the payload and exit.\nCheck if user with the specified email already exists. If yes - return error.\nHash* password and add the user to the AspNetUsers table\nCreate record in Redis idempotence table with idempotence_key as key, and with response as value. Set TTL to 24 hours.\nResponse schema\nHTTP/1.1 200 OK\nContent-Type: application/json-rpc\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"id\": \"{int/req}\"\n  },\n  \"error\": \"{object[]}\",\n  \"id\": \"{int/req}\"\n}"
					},
					"response": []
				},
				{
					"name": "post_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"post_user\",\n  \"id\": \"916\",\n  \"params\": {\n    \"idempotence_key\": \"\",\n    \"user\": {\n      \"email\": \"autotest-sharp-user3@july.agency\",\n      \"password\": \"ghbdtn\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Adds new user\n\nRequest schema\nPOST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"add_user\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"idempotence_key\": \"{guid/req}\",\n    \"user\": {\n      \"email\": \"{string/req}\",\n      \"password\": \"{string/req}\"\n    }\n  }\n}\nLogic:\n\nCheck if the idempotence_key exists in Redis idempotence table. If exists - return the payload and exit.\nCheck if user with the specified email already exists. If yes - return error.\nHash* password and add the user to the AspNetUsers table\nCreate record in Redis idempotence table with idempotence_key as key, and with response as value. Set TTL to 24 hours.\nResponse schema\nHTTP/1.1 200 OK\nContent-Type: application/json-rpc\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"id\": \"{int/req}\"\n  },\n  \"error\": \"{object[]}\",\n  \"id\": \"{int/req}\"\n}"
					},
					"response": []
				},
				{
					"name": "delete_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_user\",\n  \"id\": \"916\",\n  \"params\": {\n    \"idempotence_key\": \"\",\n    \"id\": 3\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Deletes user by id\n\nRequest schema\nPOST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"delete_user\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"idempotence_key\": \"{guid/req}\",\n    \"id\": \"{int/req}\"\n  }\n}\nLogic:\n\nCheck if the idempotence_key exists in Redis idempotence table. If exists - return the payload and exit.\nCheck if the user with specified id exists.\nStart db transaction\nRemove all the connected records (tokens etc.)\nRemove the main record from AspNetUsers table.\nEnd db transaction\nCreate record in Redis idempotence table with idempotence_key as key, and with response as value. Set TTL to 24 hours.\nResponse schema\nHTTP/1.1 200 OK\nContent-Type: application/json-rpc\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": true,\n  \"error\": \"{object[]}\",\n  \"id\": \"{int/req}\"\n}"
					},
					"response": []
				},
				{
					"name": "get_user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user\",\n  \"id\": \"916\",\n  \"params\": {\n    \"id\": 2\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Returns the user by id\n\nRequest schema\nPOST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"id\": \"{int/req}\"\n  }\n}\nLogic:\n\nCheck if the user with specified id exists.\nIf exists, return the record\nResponse schema\nHTTP/1.1 200 OK\nContent-Type: application/json-rpc\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"user\": {\n      \"id\": \"{int/req}\",\n      \"email\": \"{string/req}\"\n    }\n  },\n  \"error\": \"{object[]}\",\n  \"id\": \"{int/req}\"\n}"
					},
					"response": []
				},
				{
					"name": "get_user_token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user_token\",\n  \"id\": \"936\",\n  \"params\": {\n          \"user_id\": 3,\n          \"token_type\": 1\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/jsonrpc/v1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"jsonrpc",
								"v1"
							]
						},
						"description": "Returns the user by id\n\nRequest schema\nPOST /json-rpc-endpoint HTTP/1.1\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"get_user\",\n  \"id\": \"{int/req}\",\n  \"params\": {\n    \"id\": \"{int/req}\"\n  }\n}\nLogic:\n\nCheck if the user with specified id exists.\nIf exists, return the record\nResponse schema\nHTTP/1.1 200 OK\nContent-Type: application/json-rpc\n{\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"user\": {\n      \"id\": \"{int/req}\",\n      \"email\": \"{string/req}\"\n    }\n  },\n  \"error\": \"{object[]}\",\n  \"id\": \"{int/req}\"\n}"
					},
					"response": []
				}
			]
		},
		{
			"name": "UsageStats",
			"item": [
				{
					"name": "/hc",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9200/_cluster/health",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9200",
							"path": [
								"_cluster",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Debug TestUtilsApp",
			"item": [
				{
					"name": "get imposter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:2525/imposters/8085",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters",
								"8085"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove imposter",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:2525/imposters/5001",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters",
								"5001"
							]
						},
						"description": "curl -X DELETE http://localhost:2525/imposters/8085"
					},
					"response": []
				},
				{
					"name": "Imposter to debug have-schema predicat",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 8085,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"and\": [\n            {\n              \"equals\": {\n                \"path\": \"/test\",\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"Content-Type\": \"application/json\"\n                }\n              }\n            },\n            {\n              \"contains\": {\n                \"body\": {\n                  \"message\": \"ping\"\n                }\n              }\n            }\n          ]\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"id\": \"request_id\",\n              \"message\": \"pong\"\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/wrong_utc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"wrong_utc\": \"2019-02-30T07:57:36Z\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/right_utc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"right_utc\": \"2020-02-29T07:57:36Z\"\n            }\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/utc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"utc_before\": \"\",\n              \"utc_now\": \"\",\n              \"utc_after\": \"\"\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { var now = new Date(); config.response.body.utc_now = now.toISOString(); now.setHours(now.getHours() - 2); config.response.body.utc_before = now.toISOString(); now.setHours(now.getHours() + 4); config.response.body.utc_after = now.toISOString()}\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_utc\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\"utc\": \"2019-09-30T07:57:36Z\"}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_user\",\n              \"params\": {\n\t\t\t\t\"user_id\": 2\n\t\t\t  }\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n\t\t\t\t  \"data\": {\n\t\t\t\t    \"id\": 2,\n\t\t\t\t    \"email\": \"autotest-sharp@july.agency\",\n\t\t\t\t    \"name\": \"Vasja Pupkin\",\n\t\t\t\t    \"phone\": \"0501111111\",\n\t\t\t\t    \"client_id\": 2,\n\t\t\t\t    \"language_id\": 2,\n\t\t\t\t    \"license_id\": 2,\n\t\t\t\t    \"currency_id\": 1,\n\t\t\t\t    \"geo_division_id\": 1,\n\t\t\t\t    \"department_id\": 1,\n\t\t\t\t    \"position_id\": 1,\n\t\t\t\t    \"pic\": null,\n\t\t\t\t    \"updates_notif_mode\": \"{object/req/schema(notif_mode)}\",\n\t\t\t\t    \"updates_notif_gateways\": [1,2],\n\t\t\t\t    \"status\": 3,\n\t\t\t\t    \"timezone\": \"{string/valid(TimeZoneInfo Class zone identifier)}\"\n\t\t\t\t  }\n\t\t\t\t}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_user\",\n              \"params\": {\n\t\t\t\t\"user_id\": 3\n\t\t\t  }\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"${id}\",\n              \"result\": {\n\t\t\t\t  \"data\": {\n\t\t\t\t    \"id\": 3,\n\t\t\t\t    \"email\": \"autotest-sharp@july.agency\",\n\t\t\t\t    \"name\": \"Vasja Pupkin\",\n\t\t\t\t    \"phone\": \"0501111111\",\n\t\t\t\t    \"client_id\": 2,\n\t\t\t\t    \"language_id\": 2,\n\t\t\t\t    \"license_id\": 2,\n\t\t\t\t    \"currency_id\": 1,\n\t\t\t\t    \"geo_division_id\": 1,\n\t\t\t\t    \"department_id\": 1,\n\t\t\t\t    \"position_id\": 1.234,\n\t\t\t\t    \"pic\": \"base64-string\",\n\t\t\t\t    \"updates_notif_mode\": \"{object/req/schema(notif_mode)}\",\n\t\t\t\t    \"updates_notif_gateways\": [1,2, { \"var1\": {} }],\n\t\t\t\t    \"status\": 3,\n\t\t\t\t    \"timezone\": \"{string/valid(TimeZoneInfo Class zone identifier)}\"\n\t\t\t\t  }\n\t\t\t\t}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_client\",\n              \"params\": {\n\t\t\t\t\"client_id\": 4\n\t\t\t  }\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n        \"data\": {\n            \"id\": 4,\n            \"organization_id\": 4,\n            \"package_id\": 4,\n            \"contacts\": [],\n            \"pic\": \"someBase64String\",\n            \"activated\": 0,\n            \"activated_at\": \"2019-01-01T05:00:01Z\",\n            \"history\": 4,\n            \"package_registered_at\": \"2019-02-02T05:00:02Z\",\n            \"package_expire_at\": \"0001-01-01T00:00:00Z\"\n        }\n    }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_not_empty_array\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n\t\t\t    \"not_empty_array\": [1.1]\n\t\t\t  }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_not_empty_root_array\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": [1.1]\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_not_empty_root_object\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\"double\": 1.1}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_null\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\"null_field\": null}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"get_boolean\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\"bool_field\": true}\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"multiple_types\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n              \t\"string_or_null__string\": \"it can be null\",\n              \t\"string_or_null__null\": null,\n              \t\"int_or_double__int\": 1,\n              \t\"int_or_double__double\": 1.1,\n              \t\"null_or_array__null\": null,\n              \t\"null_or_array__array\": [\"Some string 1\", \"Some string 2\"],\n              \t\"null_or_emptyarray__null\": null,\n              \t\"null_or_emptyarray__emptyarray\": []\n              }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"required_fields\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n              \t\"req_string\": \"i am required string\",\n              \t\"not_req_string\": \"i not am required string\"\n              }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"required_object\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n              \t\"req_object\": {\"str\":\"a string in required object\"},\n              \t\"not_req_object\": {\"str\":\"a string in object\"}\n              }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"required_array\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n              \t\"req_array\": [\"string in required array\"],\n              \t\"not_req_array\": [\"string in not required array\"]\n              }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/jsonrpc/v1\",\n            \"method\": \"POST\",\n            \"headers\": {\n              \"Content-Type\": \"application/json\"\n            },\n            \"body\": {\n              \"method\": \"restrictions\"\n            }\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"jsonrpc\": \"2.0\",\n              \"id\": \"request_id\",\n              \"result\": {\n              \t\"array_with_limit\": [\"element 1\", \"element 2\"],\n              \t\"int_with_in\": 3,\n\t            \"string_with_in\": \"abc\",\n\t            \"string_with_len\": \"abcdef\"\n              }\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "hc:5001",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 5001,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/hc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"status\": \"Healthy\"\n            }\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				},
				{
					"name": "target-service:8082",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"protocol\": \"http\",\n  \"port\": 5001,\n  \"numberOfRequests\": 0,\n  \"recordRequests\": true,\n  \"requests\": [],\n  \"stubs\": [\n    {\n      \"predicates\": [\n        {\n          \"and\": [\n            {\n              \"equals\": {\n                \"path\": \"/test\",\n                \"method\": \"POST\",\n                \"headers\": {\n                  \"Content-Type\": \"application/json\"\n                }\n              }\n            },\n            {\n              \"contains\": {\n                \"body\": {\n                  \"message\": \"ping\"\n                }\n              }\n            }\n          ]\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"body\": {\n              \"id\": \"request_id\",\n              \"message\": \"pong\"\n            }\n          },\n          \"_behaviors\": {\n            \"decorate\": \"(config) => { config.response.body.id = JSON.parse(config.request.body).id; }\"\n          }\n        }\n      ]\n    },\n    {\n      \"predicates\": [\n        {\n          \"equals\": {\n            \"path\": \"/hc\",\n            \"method\": \"GET\"\n          }\n        }\n      ],\n      \"responses\": [\n        {\n          \"is\": {\n            \"headers\": {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n            },\n            \"body\": {\n              \"target_service\": \"healthy\"\n            }\n          }\n        }\n      ]\n    }\n  ],\n  \"_links\": {\n    \"self\": {\n      \"href\": \"http://localhost:2525/imposters/8085\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "http://localhost:2525/imposters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "2525",
							"path": [
								"imposters"
							]
						},
						"description": "Кроме методов Auth сервиса реализован ответ на patch_user метод Users сервиса"
					},
					"response": []
				}
			]
		},
		{
			"name": "/noauth/reset",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/reset",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"reset"
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/user",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/user?type=usr&sub=4&email=adminv@docu.se&user_client_id=9&package_id=1&language_id=1&license_id=3&currency_id=1&components=src_read,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"user"
					],
					"query": [
						{
							"key": "type",
							"value": "usr"
						},
						{
							"key": "sub",
							"value": "4"
						},
						{
							"key": "email",
							"value": "adminv@docu.se"
						},
						{
							"key": "user_client_id",
							"value": "9"
						},
						{
							"key": "package_id",
							"value": "1"
						},
						{
							"key": "language_id",
							"value": "1"
						},
						{
							"key": "license_id",
							"value": "3"
						},
						{
							"key": "currency_id",
							"value": "1"
						},
						{
							"key": "components",
							"value": "src_read,astring2,astring3"
						},
						{
							"key": "user_status",
							"value": "1"
						},
						{
							"key": "client_activated",
							"value": "true"
						},
						{
							"key": "versions:user",
							"value": "1"
						},
						{
							"key": "versions:client",
							"value": "2"
						},
						{
							"key": "versions:license",
							"value": "3"
						},
						{
							"key": "versions:package",
							"value": "1"
						},
						{
							"key": "client_id",
							"value": "2"
						},
						{
							"key": "access_type",
							"value": "astring"
						},
						{
							"key": "country_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/user USER",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/user?type=usr&sub=3&email=adminv@docu.se&user_client_id=9&package_id=1&language_id=1&license_id=3&currency_id=1&components=src_read,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"user"
					],
					"query": [
						{
							"key": "type",
							"value": "usr"
						},
						{
							"key": "sub",
							"value": "3"
						},
						{
							"key": "email",
							"value": "adminv@docu.se"
						},
						{
							"key": "user_client_id",
							"value": "9"
						},
						{
							"key": "package_id",
							"value": "1"
						},
						{
							"key": "language_id",
							"value": "1"
						},
						{
							"key": "license_id",
							"value": "3"
						},
						{
							"key": "currency_id",
							"value": "1"
						},
						{
							"key": "components",
							"value": "src_read,astring2,astring3"
						},
						{
							"key": "user_status",
							"value": "1"
						},
						{
							"key": "client_activated",
							"value": "true"
						},
						{
							"key": "versions:user",
							"value": "1"
						},
						{
							"key": "versions:client",
							"value": "2"
						},
						{
							"key": "versions:license",
							"value": "3"
						},
						{
							"key": "versions:package",
							"value": "1"
						},
						{
							"key": "client_id",
							"value": "2"
						},
						{
							"key": "access_type",
							"value": "astring"
						},
						{
							"key": "country_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/user USER:api_webhooks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/user?type=usr&sub=4&email=adminv@docu.se&user_client_id=2&package_id=1&language_id=1&license_id=3&currency_id=1&components=api_webhooks,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1&versions:ac=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"user"
					],
					"query": [
						{
							"key": "type",
							"value": "usr"
						},
						{
							"key": "sub",
							"value": "4"
						},
						{
							"key": "email",
							"value": "adminv@docu.se"
						},
						{
							"key": "user_client_id",
							"value": "2"
						},
						{
							"key": "package_id",
							"value": "1"
						},
						{
							"key": "language_id",
							"value": "1"
						},
						{
							"key": "license_id",
							"value": "3"
						},
						{
							"key": "currency_id",
							"value": "1"
						},
						{
							"key": "components",
							"value": "api_webhooks,astring2,astring3"
						},
						{
							"key": "user_status",
							"value": "1"
						},
						{
							"key": "client_activated",
							"value": "true"
						},
						{
							"key": "versions:user",
							"value": "1"
						},
						{
							"key": "versions:client",
							"value": "2"
						},
						{
							"key": "versions:license",
							"value": "3"
						},
						{
							"key": "versions:package",
							"value": "1"
						},
						{
							"key": "client_id",
							"value": "2"
						},
						{
							"key": "access_type",
							"value": "astring"
						},
						{
							"key": "country_id",
							"value": "1"
						},
						{
							"key": "versions:ac",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/user AC:api_webhooks",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/user?type=ac&sub=4&email=adminv@docu.se&user_client_id=1&package_id=1&language_id=1&license_id=3&currency_id=1&components=api_webhooks,astring2,astring3&user_status=1&client_activated=true&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1&versions:ac=2&name=aname&ac_client_id=1&user_id=2&access_type_id=3&client_daughters=4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"user"
					],
					"query": [
						{
							"key": "type",
							"value": "ac"
						},
						{
							"key": "sub",
							"value": "4"
						},
						{
							"key": "email",
							"value": "adminv@docu.se"
						},
						{
							"key": "user_client_id",
							"value": "1"
						},
						{
							"key": "package_id",
							"value": "1"
						},
						{
							"key": "language_id",
							"value": "1"
						},
						{
							"key": "license_id",
							"value": "3"
						},
						{
							"key": "currency_id",
							"value": "1"
						},
						{
							"key": "components",
							"value": "api_webhooks,astring2,astring3"
						},
						{
							"key": "user_status",
							"value": "1"
						},
						{
							"key": "client_activated",
							"value": "true"
						},
						{
							"key": "versions:client",
							"value": "2"
						},
						{
							"key": "versions:license",
							"value": "3"
						},
						{
							"key": "versions:package",
							"value": "1"
						},
						{
							"key": "client_id",
							"value": "2"
						},
						{
							"key": "access_type",
							"value": "astring"
						},
						{
							"key": "country_id",
							"value": "1"
						},
						{
							"key": "versions:ac",
							"value": "2"
						},
						{
							"key": "name",
							"value": "aname"
						},
						{
							"key": "ac_client_id",
							"value": "1"
						},
						{
							"key": "user_id",
							"value": "2"
						},
						{
							"key": "access_type_id",
							"value": "3"
						},
						{
							"key": "client_daughters",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/user SUPPORT",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/user?type=usr&sub=4&email=adminv@docu.se&user_client_id=9&package_id=1&language_id=1&license_id=1&currency_id=1&components=astring1,astring2,astring3&user_status=1&client_activated=true&versions:user=1&versions:client=2&versions:license=3&versions:package=1&client_id=2&access_type=astring&country_id=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"user"
					],
					"query": [
						{
							"key": "type",
							"value": "usr"
						},
						{
							"key": "sub",
							"value": "4"
						},
						{
							"key": "email",
							"value": "adminv@docu.se"
						},
						{
							"key": "user_client_id",
							"value": "9"
						},
						{
							"key": "package_id",
							"value": "1"
						},
						{
							"key": "language_id",
							"value": "1"
						},
						{
							"key": "license_id",
							"value": "1"
						},
						{
							"key": "currency_id",
							"value": "1"
						},
						{
							"key": "components",
							"value": "astring1,astring2,astring3"
						},
						{
							"key": "user_status",
							"value": "1"
						},
						{
							"key": "client_activated",
							"value": "true"
						},
						{
							"key": "versions:user",
							"value": "1"
						},
						{
							"key": "versions:client",
							"value": "2"
						},
						{
							"key": "versions:license",
							"value": "3"
						},
						{
							"key": "versions:package",
							"value": "1"
						},
						{
							"key": "client_id",
							"value": "2"
						},
						{
							"key": "access_type",
							"value": "astring"
						},
						{
							"key": "country_id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/noauth/service",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8082/noauth/service?type=srv&sub=1&name=test",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8082",
					"path": [
						"noauth",
						"service"
					],
					"query": [
						{
							"key": "type",
							"value": "srv"
						},
						{
							"key": "sub",
							"value": "1"
						},
						{
							"key": "name",
							"value": "test"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "healthy check /hc",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5001/hc",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"hc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Elastic alive",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9200",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9200"
				}
			},
			"response": []
		}
	]
}